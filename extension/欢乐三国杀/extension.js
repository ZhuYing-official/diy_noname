game.import("extension", function (lib, game, ui, get, ai, _status) {
    return {
        name: "欢乐三国杀", content: function (config, pack) {
            //评级
            //评级
            if (lib.rank) {
                var rank = {
                    rarity: {
                        //传说
                        legend: [
                            'hpp_shen_caocao',
                            'hpp_shen_daxiaoqiao',
                            'hpp_shen_dianwei',
                            'hpp_shen_diaochan',
                            'hpp_shen_ganning',
                            'hpp_shen_guanyu',
                            'hpp_shen_guojia',
                            'hpp_shen_huatuo',
                            'hpp_shen_jiangwei',
                            'hpp_shen_liubei',
                            'hpp_shen_luxun',
                            'hpp_shen_lvbu',
                            'hpp_shen_lvmeng',
                            'hpp_shen_simayi',
                            'hpp_shen_sunce',
                            'hpp_shen_sunquan',
                            'hpp_shen_taishici',
                            'hpp_shen_xunyu',
                            'hpp_shen_zhangfei',
                            'hpp_shen_zhangjiao',
                            'hpp_shen_zhangliao',
                            'hpp_shen_zhaoyun',
                            'hpp_shen_zhenji',
                            'hpp_shen_zhouyu',
                            'hpp_shen_zhugeliang',

                            'hpp_beimihu',
                            'hpp_bulianshi',
                            'hpp_buzhi',
                            'hpp_caifuren',
                            'hpp_caiwenji',
                            'hpp_caoang',
                            'hpp_caocao',
                            'hpp_caochong',
                            'hpp_caohua',
                            'hpp_caojie',
                            'hpp_caomao',
                            'hpp_caopi',
                            'hpp_caoren',
                            'hpp_caorui',
                            'hpp_caoxing',
                            'hpp_caoxiu',
                            'hpp_caoying',
                            'hpp_caozhang',
                            'hpp_caozhen',
                            'hpp_caozhi',
                            'hpp_chendao',
                            'hpp_chengong',
                            'hpp_chengpu',
                            'hpp_chenqun',
                            'hpp_chunyuqiong',
                            'hpp_daqiao',
                            'hpp_dengai',
                            'hpp_dianwei',
                            'hpp_diaochan',
                            'hpp_dingfeng',
                            'hpp_dongbai',
                            'hpp_dongyun',
                            'hpp_dongzhuo',
                            'hpp_dufuren',
                            'hpp_fazheng',
                            'hpp_fuhuanghou',
                            'hpp_ganfuren',
                            'hpp_ganning',
                            'hpp_gaoshun',
                            'hpp_gongsunzan',
                            'hpp_guanping',
                            'hpp_guanyinping',
                            'hpp_guanyu',
                            'hpp_guohuai',
                            'hpp_guohuanghou',
                            'hpp_guojia',
                            'hpp_guotupangji',
                            'hpp_handang',
                            'hpp_haozhao',
                            'hpp_hetaihou',
                            'hpp_huaman',
                            'hpp_huanggai',
                            'hpp_huangyueying',
                            'hpp_huangzhong',
                            'hpp_huatuo',
                            'hpp_huaxiong',
                            'hpp_jiangwei',
                            'hpp_jianyong',
                            'hpp_jiaxu',
                            'hpp_jushou',
                            'hpp_kuailiangkuaiyue',
                            'hpp_liangxing',
                            'hpp_liaohua',
                            'hpp_lidian',
                            'hpp_lijue',
                            'hpp_lingtong',
                            'hpp_liru',
                            'hpp_liubei',
                            'hpp_liubiao',
                            'hpp_liuchen',
                            'hpp_liufeng',
                            'hpp_liushan',
                            'hpp_liuxie',
                            'hpp_liuyan',
                            'hpp_liuyong',
                            'hpp_liuzan',
                            'hpp_liuzhang',
                            'hpp_liyan',
                            'hpp_luji',
                            'hpp_lukang',
                            'hpp_lusu',
                            'hpp_luxun',
                            'hpp_luyusheng',
                            'hpp_lvbu',
                            'hpp_lvkai',
                            'hpp_lvlingqi',
                            'hpp_lvmeng',
                            'hpp_machao',
                            'hpp_madai',
                            'hpp_masu',
                            'hpp_mayunlu',
                            'hpp_menghuo',
                            'hpp_mifuren',
                            'hpp_mizhu',
                            'hpp_panfeng',
                            'hpp_pangde',
                            'hpp_pangtong',
                            'hpp_panjun',
                            'hpp_qinmi',
                            'hpp_quyi',
                            'hpp_shamoke',
                            'hpp_simayi',
                            'hpp_sunce',
                            'hpp_sundeng',
                            'hpp_sunhao',
                            'hpp_sunjian',
                            'hpp_sunliang',
                            'hpp_sunluban',
                            'hpp_sunluyu',
                            'hpp_sunqian',
                            'hpp_sunquan',
                            'hpp_sunshangxiang',
                            'hpp_taishici',
                            'hpp_tangji',
                            'hpp_wangji',
                            'hpp_wangping',
                            'hpp_wangrong',
                            'hpp_wangyi',
                            'hpp_wanniangongzhu',
                            'hpp_weiyan',
                            'hpp_wenqin',
                            'hpp_wuguotai',
                            'hpp_wuxian',
                            'hpp_wuyi',
                            'hpp_xiahouba',
                            'hpp_xiahoudun',
                            'hpp_xiahoujie',
                            'hpp_xiahoulingnv',
                            'hpp_xiahoushi',
                            'hpp_xiahouyuan',
                            'hpp_xiaoqiao',
                            'hpp_xinxianying',
                            'hpp_xizhicai',
                            'hpp_xuhuang',
                            'hpp_xunyou',
                            'hpp_xunyu',
                            'hpp_xurong',
                            'hpp_xusheng',
                            'hpp_xushi',
                            'hpp_xushu',
                            'hpp_xuyou',
                            'hpp_xuzhu',
                            'hpp_yanfuren',
                            'hpp_yangxiu',
                            'hpp_yanjun',
                            'hpp_yanliangwenchou',
                            'hpp_yanyan',
                            'hpp_yinfuren',
                            'hpp_yuanshao',
                            'hpp_yuanshu',
                            'hpp_yuji',
                            'hpp_yujin',
                            'hpp_zhangbao',
                            'hpp_zhangchunhua',
                            'hpp_zhangfei',
                            'hpp_zhanghe',
                            'hpp_zhangji',
                            'hpp_zhangjiao',
                            'hpp_zhangliang',
                            'hpp_zhangliao',
                            'hpp_zhangsong',
                            'hpp_zhangxingcai',
                            'hpp_zhangxiu',
                            'hpp_zhangyao',
                            'hpp_zhangzhaozhanghong',
                            'hpp_zhaoxiang',
                            'hpp_zhaoyun',
                            'hpp_zhenji',
                            'hpp_zhonghui',
                            'hpp_zhongyao',
                            'hpp_zhoucang',
                            'hpp_zhoufang',
                            'hpp_zhoufei',
                            'hpp_zhoutai',
                            'hpp_zhouyu',
                            'hpp_zhugeguo',
                            'hpp_zhugejin',
                            'hpp_zhugeke',
                            'hpp_zhugeliang',
                            'hpp_zhugezhan',
                            'hpp_zhuhuan',
                            'hpp_zhuran',
                            'hpp_zhurong',
                            'hpp_zhuzhi',
                            'hpp_zumao',
                            'hpp_zuoci',
                            'hpp_sp_caiwenji',
                            'hpp_sp_caoren',
                            'hpp_sp_daqiao',
                            'hpp_sp_diaochan',
                            'hpp_sp_guanyu',
                            'hpp_sp_huangyueying',
                            'hpp_sp_jiangwei',
                            'hpp_sp_jiaxu',
                            'hpp_sp_machao',
                            'hpp_sp_menghuo',
                            'hpp_sp_pangde',
                            'hpp_sp_pangtong',
                            'hpp_sp_sunshangxiang',
                            'hpp_sp_taishici',
                            'hpp_sp_xiaoqiao',
                            'hpp_sp_zhangfei',
                            'hpp_sp_zhanghe',
                            'hpp_sp_zhaoyun',
                            'hpp_sp_zhenji',
                            'hpp_sp_zhugeliang',

                            'hpp_miao_caifuren',
                            'hpp_miao_caiwenji',
                            'hpp_miao_daqiao',
                            'hpp_miao_diaochan',
                            'hpp_miao_huangyueying',
                            'hpp_miao_sunshangxiang',
                            'hpp_miao_wangyi',
                            'hpp_miao_xiaoqiao',
                            'hpp_miao_zhangchunhua',
                            'hpp_miao_zhangxingcai',
                            'hpp_miao_zhenji',
                            'hpp_miao_zhurong',

                            'hpp_change',
                            'hpp_dalanmao',
                            'hpp_libai',
                            'hpp_sunwukong',
                        ],
                        //史诗
                        epic: [
                        ],
                        //稀有
                        rare: [
                        ],
                        //普通
                        common: [
                        ],
                        //平凡
                        junk: [

                        ],
                    },
                };
                for (var name of Object.keys(lib.characterPack['happykill'])) {
                    if (!Object.keys(rank.rarity).some(rarity => rank.rarity[rarity].contains(name))) {
                        rank.rarity.junk.push(name);
                    }
                }
                var addRank = function (rank) {
                    if (!lib.rank) return;
                    for (var i in rank) {
                        if (i == 'rarity') continue;
                        lib.rank[i].addArray(rank[i]);
                    }
                    if (rank.rarity && lib.rank.rarity) {
                        for (var i in rank.rarity) {
                            if (lib.rank.rarity[i] === undefined) {
                                lib.rank.rarity[i] = [];
                            }
                            lib.rank.rarity[i].addArray(rank.rarity[i]);
                        }
                    }
                };
                addRank(rank);
            }

            // 修正
            {
                //技能配音修正
                lib.skill.moon_jushou.audio = 'xinjushou';
                lib.skill.jushou.audio = 'xinjushou';
                lib.skill.jiewei.audio = 'xinjiewei';
                lib.skill.liangying.audio = false;
                lib.skill.xueji_old.audio = 'xueji';
                lib.skill.youdi.audio = 2;
                lib.skill.new_juexiang.audio = 'juexiang';
                lib.skill.polu.subSkill.damage.audio = 'polu';
                lib.skill.reyixiang.subSkill.card.audio = 'yixiang';
                lib.skill.reyixiang.subSkill.card.audioname = ['re_taoqian'];
                lib.skill.jishi.subSkill.draw.audio = 'jishi';
                lib.skill.xinhuangtian.audio = 'huangtian2';
                lib.skill.huangtian2.audioname = ['zhangjiao', 're_zhangjiao'];
                lib.skill.xinhuangtian.audioname = ['zhangjiao', 're_zhangjiao'];
                lib.skill.xinhuangtian2.audioname = ['zhangjiao', 're_zhangjiao'];
                lib.skill.dcfuxue.subSkill.draw.audio = 'dcfuxue';
                lib.skill.sbhuangtian.subSkill.mark.audio = 'sbhuangtian';
                lib.skill.fengxiang.subSkill.draw.audio = 'fengxiang';
                lib.skill.tianze.subSkill.draw.audio = 'tianze';
                lib.skill.spshidi.subSkill.use.audio = 'spshidi';
                lib.skill.spshidi.subSkill.beused.audio = 'spshidi';
                lib.skill.huaiyuan.subSkill.init.audio = 'huaiyuan';
                lib.skill.huaiyuan.subSkill.die.audio = 'huaiyuan';
                lib.skill.weishu.subSkill.discard.audio = 'weishu';
                lib.skill.twhengjiang.audio = 'hengjiang';
                lib.skill.jianhui.subSkill.draw.audio = 'jianhui';
                lib.skill.reqiaobian.subSkill.jieshu.audio = 'reqiaobian';
                lib.skill.yuzhang.subSkill.skip.audio = 'yuzhang';
                lib.skill.dcliuzhuan.subSkill.gain.audio = 'dcliuzhuan';
                lib.skill.yizan_use.audio = 'yizan_respond_shan';
                lib.skill.splveying.subSkill.add.audio = 'splveying';
                lib.skill.spyingwu.subSkill.add.audio = 'spyingwu';
                lib.skill.fuping.subSkill.mark.audio = 'fuping';
                lib.skill.scfuhai.subSkill.usea.audio = 'scfuhai';
                lib.skill.scfuhai.subSkill.die.audio = 'scfuhai';
                lib.skill.tianzuo.subSkill.remove.audio = 'tianzuo';
                //武将配音audioname添加
                lib.skill.biyue.audioname = ['sp_diaochan'];

                //武将配音audioname2添加
                lib.skill.qiaoshui.audioname2 = {
                    re_jianyong: 'reqiaoshui',
                    xin_jianyong: 'xinqiaoshui'
                };
                lib.skill.rebiyue.audioname2 = { sp_diaochan: 'biyue_sp_diaochan' };
                lib.skill.xiaoji.audioname2 = { Mbaby_sp_sunshangxiang: 'xiaoji_sp_sunshangxiang' };
                lib.skill.reluanwu.audioname2 = { Mbaby_jiaxu: 'luanwu_re_jiaxu' };
                lib.skill.yaowu.audioname2 = { FD_huaxiong: 'bolNoAudio' };
                lib.skill.yinghun.audioname2.FD_sunjian = 'bolNoAudio';
                lib.skill.gzyinghun.audioname2.FD_sunjian = 'bolNoAudio';
                lib.skill.gzyinghun.audioname2.Mbaby_sunce = 'yinghun_sunce';
                lib.skill.rezhiman.audioname2 = { Mbaby_guansuo: 'zhiman_guansuo' };
                lib.skill.reyingzi.audioname2 = {
                    Mbaby_sunce: 'reyingzi_sunce',
                    Mbaby_re_sunyi: 'reyingzi_re_sunyi',
                };
                lib.skill.rejizhi.audioname2 = {
                    Mbaby_lukang: 'rejizhi_lukang',
                    old_shen_simayi: 'jilue_jizhi',
                };
                lib.skill.new_repaoxiao.audioname2.wechat_xiahouba = 'paoxiao_xiahouba';
                lib.skill.reyicong.audioname2 = { jsp_zhaoyun: 'yicong_jsp_zhaoyun' };
                lib.skill.yicong.audioname2 = { oldx_zhaoyun: 'yicong_jsp_zhaoyun' };
                lib.skill.yicong_jsp_zhaoyun = { audio: 2 };
                lib.skill.new_rejianxiong.audioname2 = {
                    old_shen_caopi: 'rejianxiong_shen_caopi',
                    qin_lvbuwei: 'bolNoAudio',
                };
                lib.skill.rerende.audioname2 = {
                    old_shen_caopi: 'rerende_shen_caopi',
                    qin_lvbuwei: 'bolNoAudio',
                };
                lib.skill.rezhiheng.audioname2 = {
                    old_shen_caopi: 'rezhiheng_shen_caopi',
                    qin_lvbuwei: 'bolNoAudio',
                    old_shen_simayi: 'jilue_zhiheng',
                };
                lib.skill.olluanji.audioname2 = { old_shen_caopi: 'olluanji_shen_caopi' };
                lib.skill.olfangquan.audioname2 = { old_shen_caopi: 'olfangquan_shen_caopi' };
                lib.skill.rejijiang.audioname2 = { Mbaby_liushan: 'jijiang1_liushan' };
                lib.skill.rejijiang1.audioname2 = { Mbaby_liushan: 'jijiang1_liushan' };
                lib.skill.guidao.audioname2 = { Mbaby_zhangjiao: 'guidao_sp_zhangjiao' };
                lib.skill.yijin.audioname2 = { bilibili_litiansuo: 'bolNoAudio' };
                lib.skill.clandaojie.audioname2 = {
                    old_zu_xunshu: 'clandaojie_clan_xunshu',
                    old_zu_xunchen: 'clandaojie_clan_xunchen',
                    old_zu_xuncai: 'clandaojie_clan_xuncai',
                    old_zu_xuncan: 'clandaojie_clan_xuncan',
                    oldx_zu_xuncai: 'clandaojie_clan_xuncai',
                };
                lib.skill.fangzhu.audioname2 = { old_shen_simayi: 'jilue_fangzhu' };
                lib.skill.reguicai.audioname2 = { old_shen_simayi: 'jilue_guicai' };
                lib.skill.rewansha.audioname2 = { old_shen_simayi: 'wansha_shen_simayi' };
                lib.skill.new_repaoxiao.audioname2.Mbaby_xiahouba = 'paoxiao_xiahouba';
                lib.skill.retianxiang.audioname2 = { decade_daxiaoqiao: 'tianxiang_daxiaoqiao' };
                lib.skill.liuli.audioname2 = { decade_daxiaoqiao: 'liuli_daxiaoqiao' };
                lib.skill.retiaoxin.audioname2 = {
                    wechat_sp_jiangwei: 'tiaoxin_sp_jiangwei',
                    wechat_xiahouba: 'tiaoxin_xiahouba',
                };
                lib.skill.relianying.audioname2 = { wechat_lukang: 'rejizhi_lukang' };
                lib.skill.qingguo.audioname2 = { re_zhenji: 'reqingguo' };
                lib.skill.shangshi.audioname2 = { re_zhangchunhua: 'reshangshi' };
                lib.skill.xingshang.audioname2 = { wechat_caoying: 'lingren_xingshang' };
                lib.skill.wusheng.audioname2.bol_jsp_guanyu = 'wusheng_jsp_guanyu';
                lib.skill.wusheng.audioname2.bolx_jsp_guanyu = 'wusheng_jsp_guanyu';

                //技能修正
                //derivation添加
                lib.skill.xsqianxin.derivation = 'rejianyan';
                lib.skill.zbaijiang.derivation = ['zyexin', 'zzili', 'zpaiyi'];
                lib.skill.old_fuhun.derivation = ['wusheng', 'paoxiao'];
                lib.skill.drlt_jueyan.derivation = 'rejizhi';
                lib.skill.jinghe.derivation = ['releiji', 'rebiyue', 'new_retuxi', 'remingce', 'xinzhiyan', 'nhyinbing', 'nhhuoqi', 'nhguizhu', 'nhxianshou', 'nhlundao', 'nhguanyue', 'nhyanzheng'];
                lib.skill.sbaiyin.derivation = ['jilue', 'reguicai', 'fangzhu', 'rejizhi', 'rezhiheng', 'wansha'];
            }
        }, precontent: function (ext) {
            if (ext.enable) {
                game.import("character", function () {
                    var happykill = {
                        name: "happykill",
                        connect: true,
                        characterSort: {
                            happykill: {
                                biao_zhu: ['hpp_caocao', 'hpp_liubei', 'hpp_sunquan'],
                                biao_hu: ['hpp_guanyu', 'hpp_zhangfei', 'hpp_zhaoyun', 'hpp_machao', 'hpp_huangzhong'],
                                biao_meng: ['hpp_xuzhu', 'hpp_huanggai', 'hpp_xiahoudun', 'hpp_zhangliao', 'hpp_ganning'],
                                biao_jiao: ['hpp_daqiao', 'hpp_xiaoqiao', 'hpp_diaochan', 'hpp_sunshangxiang', 'hpp_zhenji'],
                                biao_wei: ['hpp_huaxiong', 'hpp_liaohua', 'hpp_pangde', 'hpp_huatuo', 'hpp_lvbu'],
                                biao_mou: ['hpp_lvmeng', 'hpp_simayi', 'hpp_guojia', 'hpp_zhugeliang', 'hpp_pangtong'],
                                feng_xiao: ['hpp_caoren', 'hpp_guohuai', 'hpp_weiyan', 'hpp_xiahouyuan'],
                                feng_li: ['hpp_liubiao', 'hpp_caifuren',],
                                feng_zhi: ['hpp_sunce', 'hpp_zhoutai', 'hpp_zhouyu',],
                                feng_xian: ['hpp_zhangjiao', 'hpp_yuji', 'hpp_zuoci'],
                                lin_zhi: ['hpp_wangji', 'hpp_zhangsong', 'hpp_zhongyao', 'hpp_sunqian', 'hpp_masu', 'hpp_huangyueying', 'hpp_luxun', 'hpp_lusu', 'hpp_jiaxu'],
                                lin_man: ['hpp_huaman', 'hpp_shamoke', 'hpp_zhurong', 'hpp_menghuo',],
                                lin_xiong: ['hpp_sunliang', 'hpp_sunjian', 'hpp_gongsunzan', 'hpp_dongzhuo', 'hpp_liuyan'],
                                huo_zhong: ['hpp_zhangzhaozhanghong', 'hpp_yanyan', 'hpp_wangping', 'hpp_chendao', 'hpp_zhoucang', 'hpp_caohong', 'hpp_dianwei', 'hpp_jiangwei', 'hpp_xunyu', 'hpp_dongyun', 'hpp_zumao'],
                                huo_yi: ['hpp_taishici', 'hpp_luji', 'hpp_lingtong', 'hpp_xusheng', 'hpp_gaoshun', 'hpp_zhuran', 'hpp_zhuhuan', 'hpp_zhuzhi',],
                                huo_bi: ['hpp_zhonghui', 'hpp_liuxie', 'hpp_panfeng', 'hpp_quyi', 'hpp_yanliangwenchou', 'hpp_yuanshao', 'hpp_xuyou', 'hpp_yuanshu'],
                                huo_yong: ['hpp_liangxing', 'hpp_caoxing', 'hpp_xiahoujie', 'hpp_wenqin', 'hpp_dingfeng'],
                                shan_zhen: ['hpp_fuhuanghou', 'hpp_caojie', 'hpp_mayunlu', 'hpp_xushi', 'hpp_dufuren', 'hpp_tangji', 'hpp_xiahoulingnv', 'hpp_wangrong', 'hpp_caiwenji', 'hpp_wangyi', 'hpp_zhangchunhua', 'hpp_bulianshi'],
                                shan_si: ['hpp_liushan', 'hpp_zhugezhan', 'hpp_guanping', 'hpp_liufeng', 'hpp_zhangxingcai', 'hpp_guanyinping', 'hpp_zhaoxiang', 'hpp_liuyong'],
                                shan_liang: ['hpp_xuhuang', 'hpp_dengai', 'hpp_zhanghe', 'hpp_yujin', 'hpp_lidian'],
                                shan_ce: ['hpp_sp_zhugeliang', 'hpp_xunyou', 'hpp_jianyong', 'hpp_chenqun', 'hpp_guotupangji', 'hpp_buzhi', 'hpp_yanjun', 'hpp_panjun', 'hpp_mizhu', 'hpp_zhoufang', 'hpp_yangxiu', 'hpp_lvkai'],
                                shan_ji: ['hpp_lukang', 'hpp_liuchen', 'hpp_sundeng', 'hpp_zhugeguo', 'hpp_sunhao', 'hpp_zhugeke', 'hpp_xiahouba', 'hpp_luyusheng',],
                                shan_xian: ['hpp_yinfuren', 'hpp_mifuren'],
                                ming_shu: ['hpp_zhoufei', 'hpp_wuguotai', 'hpp_sunluban', 'hpp_xiahoushi', 'hpp_wuxian', 'hpp_guohuanghou', 'hpp_xinxianying', 'hpp_dongbai', 'hpp_sunluyu', 'hpp_wanniangongzhu', 'hpp_zhangyao', 'hpp_ganfuren'],
                                ming_ru: ['hpp_kuailiangkuaiyue', 'hpp_fazheng', 'hpp_chengong', 'hpp_liru', 'hpp_jushou', 'hpp_zhugejin', 'hpp_qinmi', 'hpp_xushu', 'hpp_liuzhang', 'hpp_yijie'],
                                ming_cao: ['hpp_caopi', 'hpp_caozhi', 'hpp_caozhang', 'hpp_caochong', 'hpp_caozhen', 'hpp_caorui', 'hpp_caoxiu', 'hpp_caoang', 'hpp_caoying', 'hpp_caomao', 'hpp_caohua'],
                                ming_han: ['hpp_haozhao', 'hpp_zhangxiu', 'hpp_madai', 'hpp_chengpu', 'hpp_handang', 'hpp_wuyi', 'hpp_liyan', 'hpp_xurong', 'hpp_lijue', 'hpp_zhangji', 'hpp_chunyuqiong'],
                                ming_qi: ['hpp_xizhicai', 'hpp_zhangliang', 'hpp_zhangbao', 'hpp_beimihu'],
                                ming_jue: ['hpp_hetaihou', 'hpp_yanfuren'],
                                xian_sp: ['hpp_sp_jiangwei', 'hpp_sp_huangyueying', 'hpp_sp_taishici', 'hpp_sp_machao', 'hpp_sp_daqiao', 'hpp_sp_zhangfei', 'hpp_sp_zhaoyun', 'hpp_sp_sunshangxiang', 'hpp_sp_caiwenji', 'hpp_sp_xiaoqiao', 'hpp_sp_diaochan'],
                                xian_sp2: ['hpp_sp_pangtong', 'hpp_sp_pangde', 'hpp_sp_menghuo', 'hpp_sp_jiaxu', 'hpp_sp_zhenji', 'hpp_sp_guanyu', 'hpp_sp_caoren', 'hpp_sp_zhangliao', 'hpp_sp_zhanghe'],
                                xian_jin: ['hpp_guansuo', 'hpp_baosanniang', 'hpp_wenyang', 'hpp_liuzan', 'hpp_guozhao', 'hpp_fanyufeng', 'hpp_panshu', 'hpp_lvlingqi', 'hpp_zhangchangpu', 'hpp_zhangqiying', 'hpp_puyuan', 'hpp_xushao'],
                                xian_xiu: ['hpp_yangwan', 'hpp_zhouyi', 'hpp_sunyi', 'hpp_fengyu', 'hpp_tenggongzhu', 'hpp_zhangxuan', 'hpp_luotong'],
                                xian_miao: ['hpp_miao_caiwenji', 'hpp_miao_diaochan', 'hpp_miao_caifuren', 'hpp_miao_zhangxingcai', 'hpp_miao_zhurong', 'hpp_miao_huangyueying', 'hpp_miao_daqiao', 'hpp_miao_xiaoqiao', 'hpp_miao_sunshangxiang', 'hpp_miao_zhenji', 'hpp_miao_zhangchunhua', 'hpp_miao_wangyi'],
                                shen_wei: ['hpp_shen_caocao', 'hpp_shen_simayi', 'hpp_shen_zhangliao', 'hpp_shen_dianwei', 'hpp_shen_guojia', 'hpp_shen_xunyu'],
                                shen_shu: ['hpp_shen_guanyu', 'hpp_shen_zhugeliang', 'hpp_shen_zhaoyun', 'hpp_shen_liubei', 'hpp_shen_zhangfei', 'hpp_shen_jiangwei'],
                                shen_wu: ['hpp_shen_lvmeng', 'hpp_shen_zhouyu', 'hpp_shen_luxun', 'hpp_shen_ganning', 'hpp_shen_sunquan', 'hpp_shen_sunce', 'shen_daxiaoqiao', 'hpp_shen_taishici'],
                                shen_qun: ['hpp_shen_lvbu', 'hpp_shen_huatuo', 'hpp_shen_zhenji', 'hpp_shen_zhangjiao', 'hpp_shen_diaochan'],
                                doudizhu: ['hpp_change', 'hpp_dalanmao', 'hpp_libai', 'hpp_sunwukong'],
                            },
                        },
                        character: {
                            // B
                            // 欢杀卑弥呼
                            hpp_beimihu: ['female', 'qun', 4, ['hpp_zongkui', 'hpp_guju', 'bmcanshi'], []],
                            // 欢杀步练师
                            hpp_bulianshi: ['female', 'wu', 3, ['hpp_anxu', 'zhuiyi'], []],
                            // 欢杀步骘
                            hpp_buzhi: ['male', 'wu', 3, ['hpp_hongde', 'hpp_dingpan'], []],

                            // C
                            // 欢杀蔡夫人
                            hpp_caifuren: ['female', 'qun', 3, ['hpp_qieting', 'hpp_xianzhou'], []],
                            // 欢杀蔡文姬
                            hpp_caiwenji: ['female', 'qun', 3, ['hpp_beige', 'duanchang'], []],
                            // 欢杀曹昂
                            hpp_caoang: ['male', 'wei', 4, ['hpp_kangkai'], []],
                            // 欢杀曹操
                            hpp_caocao: ["male", "wei", 4, ["hpp_jianxiong", "hpp_hujia"], ['zhu']],
                            // 欢杀曹冲
                            hpp_caochong: ['male', 'wei', 3, ['hpp_chengxiang', 'renxin'], []],
                            // 欢杀曹华
                            hpp_caohua: ['female', 'wei', 3, ['hpp_caiyi', 'hpp_guili'], []],
                            // 欢杀曹节
                            hpp_caojie: ['female', 'qun', 3, ['hpp_shouxi', 'hpp_huimin'], []],
                            // 欢杀曹髦
                            hpp_caomao: ['male', 'wei', '3/4', ['qianlong', 'fensi', 'juetao', 'zhushi'], ['zhu']],
                            // 欢杀曹丕
                            hpp_caopi: ['male', 'wei', 3, ['hpp_xingshang', 'hpp_fangzhu', 'songwei'], ['zhu']],
                            // 欢杀曹仁
                            hpp_caoren: ['male', 'wei', 4, ['hpp_caoren_jushou', 'xinjiewei'], []],
                            // 欢杀曹叡
                            hpp_caorui: ['male', 'wei', 3, ['huituo', 'hpp_mingjian', 'hpp_xingshuai'], ['zhu']],
                            // 欢杀曹性
                            hpp_caoxing: ['male', 'qun', 4, ['hpp_liushi', 'zhanwan'], []],
                            // 欢杀曹休
                            hpp_caoxiu: ['male', 'wei', 4, ['qianju', 'hpp_qingxi'], []],
                            // 欢杀曹婴
                            hpp_caoying: ['female', 'wei', 4, ['hpp_lingren', 'hpp_fujian'], []],
                            // 欢杀曹彰
                            hpp_caozhang: ['male', 'wei', 4, ['hpp_jiangchi'], []],
                            // 欢杀曹真
                            hpp_caozhen: ['male', 'wei', 4, ['hpp_sidi'], []],
                            // 欢杀曹植
                            hpp_caozhi: ['male', 'wei', 3, ['hpp_luoying', 'hpp_jiushi'], []],

                            // D
                            // 欢杀陈到
                            hpp_chendao: ['male', 'shu', 4, ['hpp_wanglie'], []],
                            // 欢杀陈宫
                            hpp_chengong: ['male', 'qun', 3, ['hpp_mingce', 'zhichi'], []],
                            // 欢杀程普
                            hpp_chengpu: ['male', 'wu', 4, ['hpp_lihuo', 'hpp_chunlao'], []],
                            // 欢杀陈群
                            hpp_chenqun: ['male', 'wei', 3, ['pindi', 'hpp_faen'], []],
                            // 欢杀淳于琼
                            hpp_chunyuqiong: ['male', 'qun', 4, ['hpp_cangchu', 'hpp_liangying', 'hpp_shishou'], []],
                            // 欢杀大乔
                            hpp_daqiao: ['female', 'wu', 3, ['hpp_wanrong', 'hpp_guose', 'hpp_liuli'], []],
                            // 欢杀邓艾
                            hpp_dengai: ['male', 'wei', 4, ['hpp_tuntian', 'zaoxian'], []],
                            // 欢杀典韦
                            hpp_dianwei: ['male', 'wei', 4, ['hpp_qiangxi'], []],
                            // 欢杀貂蝉
                            hpp_diaochan: ['female', 'qun', 3, ['hpp_lijian', 'hpp_biyue'], []],
                            // 欢杀丁奉
                            hpp_dingfeng: ['male', 'wu', 4, ['hpp_duanbing', 'hpp_fenxun'], []],
                            // 欢杀董白
                            hpp_dongbai: ['female', 'qun', 3, ['hpp_lianzhu', 'hpp_xiahui'], []],
                            // 欢杀董允
                            hpp_dongyun: ['male', 'shu', 3, ['hpp_bingzheng', 'sheyan'], []],
                            // 欢杀董卓
                            hpp_dongzhuo: ['male', 'qun', 8, ['hpp_jiuchi', 'hpp_roulin', 'hpp_benghuai', 'hpp_baonue'], ['zhu']],
                            // 欢杀杜夫人
                            hpp_dufuren: ['female', 'wei', 3, ['hpp_yise', 'hpp_shunshi'], []],

                            // F
                            // 欢杀法正
                            hpp_fazheng: ['male', 'shu', 3, ['hpp_enyuan', 'hpp_xuanhuo'], []],
                            // 欢杀伏皇后
                            hpp_fuhuanghou: ['female', 'qun', 3, ['hpp_zhuikong', 'hpp_qiuyuan'], []],

                            // G
                            // 欢杀甘宁
                            hpp_ganning: ['male', 'wu', 4, ['hpp_qixi', 'hpp_fenwei'], []],
                            // 欢杀甘夫人
                            hpp_ganfuren: ['female', 'shu', 3, ['hpp_shushen', 'hpp_huangsi'], []],
                            // 欢杀高顺
                            hpp_gaoshun: ['male', 'qun', 4, ['hpp_xianzhen', 'hpp_jinjiu'], []],
                            // 欢杀公孙瓒
                            hpp_gongsunzan: ['male', 'qun', 4, ['hpp_qiaomeng', 'hpp_yicong'], []],
                            // 欢杀关平
                            hpp_guanping: ['male', 'shu', 4, ['jiezhong', 'hpp_longyin'], []],
                            // 欢杀关银屏
                            hpp_guanyinping: ['female', 'shu', 3, ['hpp_xuehen', 'hpp_huxiao', 'hpp_wuji'], []],
                            // 欢杀关羽
                            hpp_guanyu: ['male', 'shu', 4, ['hpp_wusheng', 'hpp_tuodao', 'jsrgguanjue'], []],
                            // 欢杀郭淮
                            hpp_guohuai: ['male', 'wei', 4, ['hpp_jingce'], []],
                            // 欢杀郭皇后
                            hpp_guohuanghou: ['female', 'wei', 3, ['hpp_jiaozhao', 'hpp_danxin'], []],
                            // 欢杀郭嘉
                            hpp_guojia: ['male', 'wei', 3, ['hpp_tiandu', 'hpp_yiji', 'hpp_shenglun'], []],
                            // 欢杀郭图逢纪
                            hpp_guotupangji: ['male', 'qun', 3, ['hpp_jigong', 'hpp_shifei'], []],

                            // H
                            // 欢杀韩当
                            hpp_handang: ['male', 'wu', 4, ['xingongji', 'xinjiefan'], []],
                            // 欢杀郝昭
                            hpp_haozhao: ['male', 'wei', 4, ['drlt_zhenggu'], []],
                            // 欢杀何太后
                            hpp_hetaihou: ['female', 'qun', 3, ['hpp_zhendu', 'hpp_qiluan'], []],
                            // 欢杀花鬘
                            hpp_huaman: ['female', 'shu', 4, ['hmmanyi', 'mansi', 'hpp_souying', 'hpp_zhanyuan'], []],
                            // 欢杀黄盖
                            hpp_huanggai: ['male', 'wu', 4, ['kurou', 'hpp_zhaxiang'], []],
                            // 欢杀黄月英
                            hpp_huangyueying: ['female', 'shu', 3, ['hpp_jizhi', 'hpp_qicai'], []],
                            // 欢杀黄忠
                            hpp_huangzhong: ['male', 'shu', 4, ['hpp_liegong'], []],
                            // 欢杀华佗
                            hpp_huatuo: ['male', 'qun', 3, ['hpp_jijiu', 'hpp_qingnang'], []],
                            // 欢杀华雄
                            hpp_huaxiong: ['male', 'qun', 6, ['hpp_yaowu', 'hpp_yangwei'], []],

                            // J
                            // 欢杀姜维
                            hpp_jiangwei: ['male', 'shu', 4, ['hpp_tiaoxin', 'hpp_zhiji'], []],
                            // 欢杀简雍
                            hpp_jianyong: ['male', 'shu', 3, ['hpp_qiaoshui', 'jyzongshi'], []],
                            // 欢杀贾诩
                            hpp_jiaxu: ['male', 'qun', 3, ['hpp_wansha', 'luanwu', 'weimu'], []],
                            // 欢杀沮授
                            hpp_jushou: ['male', 'qun', 3, ['jianying', 'hpp_shibei'], []],

                            // K
                            // 欢杀蒯良蒯越
                            hpp_kuailiangkuaiyue: ['male', 'wei', 3, ['nzry_jianxiang', 'hpp_shenshi'], []],

                            // L
                            // 欢杀梁兴
                            hpp_liangxing: ['male', 'qun', 4, ['hpp_lulue', 'lxzhuixi'], []],
                            // 欢杀廖化
                            hpp_liaohua: ['male', 'shu', 4, ['hpp_dangxian', 'hpp_fuli'], []],
                            // 欢杀李典
                            hpp_lidian: ['male', 'wei', 3, ['hpp_xunxun', 'wangxi'], []],
                            // 欢杀李傕
                            hpp_lijue: ['male', 'qun', '5/6', ['xinfu_yisuan', 'xinfu_langxi'], []],
                            // 欢杀凌统
                            hpp_lingtong: ['male', 'wu', 4, ['hpp_xuanfeng', 'hpp_yongjin'], []],
                            // 欢杀李儒
                            hpp_liru: ['male', 'qun', 3, ['xinjuece', 'hpp_fencheng', 'hpp_mieji'], []],
                            // 欢杀刘备
                            hpp_liubei: ['male', 'shu', 4, ['hpp_rende', 'hpp_jijiang'], ['zhu']],
                            // 欢杀刘表
                            hpp_liubiao: ['male', 'qun', 3, ['hpp_zishou', 'hpp_zongshi'], []],
                            // 欢杀刘谌
                            hpp_liuchen: ['male', 'shu', 4, ['hpp_zhanjue', 'hpp_qinwang'], ['zhu']],
                            // 欢杀刘封
                            hpp_liufeng: ['male', 'shu', 4, ['hpp_xiansi'], []],
                            // 欢杀刘禅
                            hpp_liushan: ['male', 'shu', 4, ['xiangle', 'hpp_fangquan', 'hpp_ruoyu'], ['zhu']],
                            // 欢杀刘协
                            hpp_liuxie: ['male', 'qun', 3, ['hpp_tianming', 'hpp_mizhao'], []],
                            // 欢杀刘焉
                            hpp_liuyan: ['male', 'qun', 3, ['xinfu_tushe', 'xinfu_limu'], []],
                            // 欢杀刘永
                            hpp_liuyong: ['male', 'shu', 3, ['zhuning', 'hpp_fengxiang'], []],
                            // 欢杀留赞
                            hpp_liuzan: ['male', 'wu', 4, ['refenyin', 'liji'], []],
                            // 欢杀刘璋
                            hpp_liuzhang: ['male', 'qun', 4, ['hpp_yinlang', 'hpp_xiusheng', 'hpp_huaibi'], ['zhu']],
                            // 欢杀李严
                            hpp_liyan: ['male', 'shu', 4, ['hpp_duliang', 'fulin'], []],
                            // 欢杀陆绩
                            hpp_luji: ['male', 'wu', 3, ['nzry_huaiju', 'nzry_yili', 'hpp_zhenglun'], []],
                            // 欢杀陆抗
                            hpp_lukang: ['male', 'wu', 4, ['drlt_qianjie', 'hpp_jueyan', 'hpp_huairou'], []],
                            // 欢杀鲁肃
                            hpp_lusu: ['male', 'wu', 3, ['hpp_haoshi', 'hpp_dimeng'], []],
                            // 欢杀陆逊
                            hpp_luxun: ['male', 'wu', 3, ['hpp_qianxun', 'lianying'], []],
                            // 欢杀陆郁生
                            hpp_luyusheng: ['female', 'wu', 3, ['hpp_zhente', 'hpp_zhiwei'], []],
                            // 欢杀吕布
                            hpp_lvbu: ['male', 'qun', 5, ['wushuang'], []],
                            // 欢杀吕凯
                            hpp_lvkai: ['male', 'shu', 3, ['hpp_tunan', 'xinfu_bijing'], []],
                            // 欢杀吕玲绮
                            hpp_lvlingqi: ['female', 'qun', 4, ['guowu', 'zhuangrong'], []],
                            // 欢杀吕蒙
                            hpp_lvmeng: ['male', 'wu', 4, ['hpp_keji', 'hpp_qinxue'], []],

                            // M
                            // 欢杀马超
                            hpp_machao: ['male', 'shu', 4, ['hpp_yuma', 'hpp_tieji'], []],
                            // 欢杀马岱
                            hpp_madai: ['male', 'shu', 4, ['hpp_qianxi', 'mashu'], []],
                            // 欢杀马谡
                            hpp_masu: ['male', 'shu', 3, ['hpp_sanyao', 'rezhiman'], []],
                            // 欢杀马云禄
                            hpp_mayunlu: ['female', 'shu', 4, ['hpp_fengpo', 'mashu'], []],
                            // 欢杀孟获
                            hpp_menghuo: ['male', 'shu', 5, ['hpp_huoshou', 'zaiqi'], []],
                            // 欢杀糜夫人
                            hpp_mifuren: ['female', 'shu', 3, ['hpp_guixiu', 'hpp_cunsi'], []],
                            // 欢杀糜竺
                            hpp_mizhu: ['male', 'shu', 3, ['hpp_ziyuan', 'hpp_jugu'], []],

                            // P
                            // 欢杀潘凤
                            hpp_panfeng: ['male', 'qun', 4, ['hpp_kuangfu'], []],
                            // 欢杀庞德
                            hpp_pangde: ['male', 'qun', 4, ['mashu', 'hpp_jianchu'], []],
                            // 欢杀庞统
                            hpp_pangtong: ['male', 'shu', 3, ['hpp_lianhuan', 'hpp_niepan'], []],
                            // 欢杀潘浚
                            hpp_panjun: ['male', 'wu', 3, ['hpp_guanwei', 'hpp_gongqing'], []],

                            // Q
                            // 欢杀秦宓
                            hpp_qinmi: ['male', 'shu', 3, ['jianzheng', 'hpp_zhuandui', 'tianbian'], []],
                            // 欢杀麴义
                            hpp_quyi: ['male', 'qun', 4, ['hpp_fuqi', 'hpp_jiaozi'], []],

                            // S
                            // 欢杀沙摩柯
                            hpp_shamoke: ['male', 'shu', 4, ['hpp_jili'], []],
                            // 欢杀司马懿
                            hpp_simayi: ['male', 'wei', 3, ['hpp_fankui', 'hpp_guicai'], []],
                            // 欢杀孙策
                            hpp_sunce: ['male', 'wu', 4, ['hpp_jiang', 'hpp_hunzi', 'hpp_zhiba'], ['zhu']],
                            // 欢杀孙登
                            hpp_sundeng: ['male', 'wu', 4, ['hpp_kuangbi'], []],
                            // 欢杀孙皓
                            hpp_sunhao: ['male', 'wu', 5, ['hpp_canshi', 'hpp_chouhai', 'guiming'], ['zhu']],
                            // 欢杀孙坚
                            hpp_sunjian: ['male', 'wu', 4, ['hpp_yinghun', 'hpp_wulie'], []],
                            // 欢杀孙亮
                            hpp_sunliang: ['male', 'wu', 3, ['hpp_kuizhu', 'hpp_chezheng', 'hpp_lijun'], ['zhu']],
                            // 欢杀孙鲁班
                            hpp_sunluban: ['female', 'wu', 3, ['hpp_zenhui', 'hpp_jiaojin'], []],
                            // 欢杀孙鲁育
                            hpp_sunluyu: ['female', 'wu', 3, ['hpp_meibu', 'remumu'], []],
                            // 欢杀孙乾
                            hpp_sunqian: ['male', 'shu', 3, ['hpp_qianya', 'shuimeng'], []],
                            // 欢杀孙权
                            hpp_sunquan: ['male', 'wu', 4, ['hpp_zhiheng', 'hpp_jiuyuan'], ['zhu']],
                            // 欢杀孙尚香
                            hpp_sunshangxiang: ['female', 'wu', 3, ['hpp_jieyi', 'xiaoji'], []],

                            // T
                            // 欢杀太史慈
                            hpp_taishici: ['male', 'wu', 4, ['hpp_tianyi'], []],
                            // 欢杀唐姬
                            hpp_tangji: ['female', 'qun', 3, ['hpp_kangge', 'hpp_jielie'], []],

                            // W
                            // 欢杀王基
                            hpp_wangji: ['male', 'wei', 3, ['hpp_qizhi', 'hpp_jinqu'], []],
                            // 欢杀王平
                            hpp_wangping: ['male', 'shu', 4, ['hpp_feijun', 'hpp_binglue'], []],
                            // 欢杀王荣
                            hpp_wangrong: ['female', 'qun', 3, ['hpp_minsi', 'hpp_jijing', 'zhuide'], []],
                            // 欢杀万年公主
                            hpp_wanniangongzhu: ['female', 'qun', 3, ['hpp_zhenge', 'hpp_xinghan'], []],
                            // 欢杀魏延
                            hpp_weiyan: ['male', 'shu', 4, ['hpp_kuanggu', 'hpp_qimou'], []],
                            // 欢杀王异
                            hpp_wangyi: ['female', 'wei', 4, ['hpp_zhenlie', 'hpp_miji'], []],
                            // 欢杀文钦
                            hpp_wenqin: ['male', 'wei', 4, ['olguangao', 'hpp_huiqi'], []],
                            // 欢杀吴国太
                            hpp_wuguotai: ['female', 'wu', 3, ['hpp_ganlu', 'hpp_buyi'], []],
                            // 欢杀吴苋
                            hpp_wuxian: ['female', 'shu', 3, ['hpp_fumian', 'hpp_daiyan'], ['clan:陈留吴氏']],
                            // 欢杀吴懿
                            hpp_wuyi: ['male', 'shu', 4, ['xinbenxi'], ['clan:陈留吴氏']],

                            // X
                            // 欢杀夏侯霸
                            hpp_xiahouba: ['male', 'shu', 4, ['hpp_baobian'], []],
                            // 欢杀夏侯惇
                            hpp_xiahoudun: ['male', 'wei', 4, ['reganglie', 'hpp_qingjian'], []],
                            // 欢杀夏侯杰
                            hpp_xiahoujie: ['male', 'wei', 5, ['hpp_liedan', 'hpp_zhuangdan'], []],
                            // 欢杀夏侯令女
                            hpp_xiahoulingnv: ['female', 'wei', 4, ['fuping', 'hpp_weilie'], []],
                            // 欢杀夏侯氏
                            hpp_xiahoushi: ['female', 'shu', 3, ['hpp_qiaoshi', 'hpp_yanyu'], []],
                            // 欢杀夏侯渊
                            hpp_xiahouyuan: ['male', 'wei', 4, ['hpp_shensu', 'hpp_shebian'], []],
                            // 欢杀小乔
                            hpp_xiaoqiao: ['female', 'wu', 3, ['hpp_tianxiang', 'hpp_hongyan'], []],
                            // 欢杀辛宪英
                            hpp_xinxianying: ['female', 'wei', 3, ['hpp_zhongjian', 'hpp_caishi'], []],
                            // 欢杀戏志才
                            hpp_xizhicai: ['male', 'wei', 3, ['hpp_tiandu', 'xianfu', 'hpp_chouce'], []],
                            // 欢杀徐晃
                            hpp_xuhuang: ['male', 'wei', 4, ['hpp_duanliang', 'hpp_jiezi'], []],
                            // 欢杀荀攸
                            hpp_xunyou: ['male', 'wei', 3, ['hpp_qice', 'hpp_zhiyu'], []],
                            // 欢杀荀彧
                            hpp_xunyu: ['male', 'wei', 3, ['hpp_quhu', 'hpp_jieming'], []],
                            // 欢杀徐荣
                            hpp_xurong: ['male', 'qun', 4, ['xinfu_shajue', 'xinfu_xionghuo'], []],
                            // 欢杀徐盛
                            hpp_xusheng: ['male', 'wu', 4, ['hpp_pojun'], []],
                            // 欢杀徐氏
                            hpp_xushi: ['female', 'wu', 3, ['hpp_wengua', 'hpp_fuzhu'], []],
                            // 欢杀徐庶
                            hpp_xushu: ['male', 'shu', 3, ['xinwuyan', 'hpp_jujian'], []],
                            // 欢杀许攸
                            hpp_xuyou: ['male', 'qun', 3, ['hpp_chenglue', 'nzry_shicai', 'nzry_cunmu'], []],
                            // 欢杀许诸
                            hpp_xuzhu: ['male', 'wei', 4, ['hpp_luoyi', 'hpp_huchi'], []],

                            // Y
                            // 欢杀严夫人
                            hpp_yanfuren: ['female', 'qun', 3, ['hpp_channi', 'hpp_nifu'], []],
                            // 欢杀杨修
                            hpp_yangxiu: ['male', 'wei', 3, ['danlao', 'hpp_jilei'], []],
                            // 欢杀严畯
                            hpp_yanjun: ['male', 'wu', 3, ['hpp_guanchao', 'hpp_xunxian'], []],
                            // 欢杀颜良文丑
                            hpp_yanliangwenchou: ['male', 'qun', 4, ['hpp_shuangxiong'], []],
                            // 欢杀严颜
                            hpp_yanyan: ['male', 'shu', 4, ['hpp_juzhan'], []],
                            // 欢杀尹夫人
                            hpp_yinfuren: ['female', 'wei', 3, ['dcyingyu', 'hpp_yongbi'], []],
                            // 欢杀袁绍
                            hpp_yuanshao: ['male', 'qun', 4, ['hpp_luanji', 'hpp_xueyi'], ['zhu']],
                            // 欢杀袁术
                            hpp_yuanshu: ['male', 'qun', 4, ['yongsi', 'hpp_weidi'], []],
                            // 欢杀于吉
                            hpp_yuji: ['male', 'qun', 4, ['hpp_guhuo'], []],
                            // 欢杀于禁
                            hpp_yujin: ['male', 'wei', 4, ['hpp_yizhong', 'decadezhenjun'], []],

                            // Z
                            // 欢杀张宝
                            hpp_zhangbao: ['male', 'qun', 4, ['hpp_zhoufu', 'hpp_yingbing'], []],
                            // 欢杀张春华
                            hpp_zhangchunhua: ['female', 'wei', 3, ['hpp_jueqing', 'hpp_shangshi'], []],
                            // 欢杀张飞
                            hpp_zhangfei: ['male', 'shu', 4, ['new_repaoxiao', 'hpp_tishen'], []],
                            // 欢杀张郃
                            hpp_zhanghe: ['male', 'wei', 4, ['hpp_qiaobian'], []],
                            // 欢杀张济
                            hpp_zhangji: ['male', 'qun', 4, ['hpp_lueming', 'hpp_tunjun'], []],
                            // 欢杀张角
                            hpp_zhangjiao: ['male', 'qun', 3, ['hpp_leiji', 'hpp_guidao', 'hpp_huangtian'], ['zhu']],
                            // 欢杀张梁
                            hpp_zhangliang: ['male', 'qun', 4, ['hpp_jijun', 'hpp_fangtong'], []],
                            // 欢杀张辽
                            hpp_zhangliao: ['male', 'wei', 4, ['new_retuxi', 'hpp_zhengbing'], []],
                            // 欢杀张松
                            hpp_zhangsong: ['male', 'shu', 3, ['qiangzhi', 'hpp_xiantu'], []],
                            // 欢杀张星彩
                            hpp_zhangxingcai: ['female', 'shu', 3, ['shenxian', 'hpp_qiangwu'], []],
                            // 欢杀张绣
                            hpp_zhangxiu: ['male', 'qun', 4, ['drlt_xiongluan', 'drlt_congjian'], []],
                            // 欢杀张媱
                            hpp_zhangyao: ['female', 'wu', 3, ['hpp_yuanyu', 'hpp_xiyan'], []],
                            // 欢杀张昭张纮
                            hpp_zhangzhaozhanghong: ['male', 'wu', 3, ['hpp_zhijian', 'hpp_guzheng'], []],
                            // 欢杀赵襄
                            hpp_zhaoxiang: ['female', 'shu', 4, ['hpp_fanghun', 'hpp_fuhan'], []],
                            // 欢杀赵云
                            hpp_zhaoyun: ['male', 'shu', 4, ['hpp_longdan', 'hpp_yajiao'], []],
                            // 欢杀甄姬
                            hpp_zhenji: ['female', 'wei', 3, ['hpp_luoshen', 'qingguo'], []],
                            // 欢杀钟会
                            hpp_zhonghui: ['male', 'wei', 3, ['hpp_quanji', 'hpp_paiyi'], []],
                            // 欢杀钟繇
                            hpp_zhongyao: ['male', 'wei', 3, ['hpp_huomo', 'hpp_zuoding'], []],
                            // 欢杀周仓
                            hpp_zhoucang: ['male', 'shu', 4, ['hpp_zhongyong', 'hpp_daopu'], []],
                            // 欢杀周鲂
                            hpp_zhoufang: ['male', 'wu', 3, ['hpp_youdi', 'xinfu_duanfa'], []],
                            // 欢杀周妃
                            hpp_zhoufei: ['female', 'wu', 3, ['hpp_liangyin', 'kongsheng'], []],
                            // 欢杀周泰
                            hpp_zhoutai: ['male', 'wu', 4, ['hpp_buqu', 'fenji', 'hpp_qingchuang'], []],
                            // 欢杀周瑜
                            hpp_zhouyu: ['male', 'wu', 3, ['hpp_yingzi', 'hpp_fanjian'], []],
                            // 欢杀诸葛果
                            hpp_zhugeguo: ['female', 'shu', 3, ['hpp_qirang', 'hpp_yuhua'], []],
                            // 欢杀诸葛瑾
                            hpp_zhugejin: ['male', 'wu', 3, ['huanshi', 'hpp_hongyuan', 'mingzhe'], []],
                            // 欢杀诸葛恪
                            hpp_zhugeke: ['male', 'wu', 3, ['hpp_aocai', 'hpp_duwu'], []],
                            // 欢杀诸葛亮
                            hpp_zhugeliang: ['male', 'shu', 3, ['hpp_guanxing', 'hpp_kongcheng'], []],
                            // 欢杀诸葛瞻
                            hpp_zhugezhan: ['male', 'shu', 3, ['hpp_zuilun', 'xinfu_fuyin'], []],
                            // 欢杀朱桓
                            hpp_zhuhuan: ['male', 'wu', 4, ['hpp_fenli', 'hpp_pingkou'], []],
                            // 欢杀朱然
                            hpp_zhuran: ['male', 'wu', 4, ['hpp_danshou'], []],
                            // 欢杀祝融
                            hpp_zhurong: ['female', 'shu', 4, ['hpp_juxiang', 'hpp_lieren', 'changbiao'], []],
                            // 欢杀朱治
                            hpp_zhuzhi: ['male', 'wu', 4, ['hpp_anguo'], []],
                            // 欢杀祖茂
                            hpp_zumao: ['male', 'wu', 4, ['hpp_yinbing', 'hpp_juedi'], []],
                            // 欢杀左慈
                            hpp_zuoci: ['male', 'qun', 3, ['hpp_shendao', 'hpp_xinsheng'], []],

                            // SP
                            // 欢杀SP蔡文姬
                            hpp_sp_caiwenji: ['female', 'wei', 3, ['hpp_chenqing', 'hpp_mozhi'], []],
                            // 欢杀SP曹仁
                            hpp_sp_caoren: ['male', 'wei', 4, ['hpp_weikui', 'hpp_lizhan'], []],
                            // 欢杀SP大乔
                            hpp_sp_daqiao: ['female', 'wu', 3, ['hpp_yanxiao', 'hpp_guose', 'hpp_anxian'], []],
                            // 欢杀SP貂蝉
                            hpp_sp_diaochan: ['female', 'qun', 3, ['hpp_lihun', 'hpp_pianyi'], []],
                            // 欢杀SP关羽
                            hpp_sp_guanyu: ['male', 'wei', 4, ['hpp_spwusheng', 'hpp_danji'], []],
                            // 欢杀SP黄月英
                            hpp_sp_huangyueying: ['female', 'qun', 3, ['hpp_jiqiao', 'hpp_linglong'], []],
                            // 欢杀SP姜维
                            hpp_sp_jiangwei: ['male', 'wei', 4, ['hpp_kunfen', 'hpp_fengliang'], []],
                            // 欢杀SP贾诩
                            hpp_sp_jiaxu: ['male', 'wei', 3, ['zhenlue', 'hpp_jianshu', 'hpp_yongdi'], []],
                            // 欢杀SP马超
                            hpp_sp_machao: ['male', 'qun', 4, ['hpp_zhuiji', 'hpp_shichou'], []],
                            // 欢杀SP孟获
                            hpp_sp_menghuo: ['male', 'qun', 4, ['hpp_manwang'], []],
                            // 欢杀SP庞德
                            hpp_sp_pangde: ['male', 'wei', 4, ['hpp_juesi', 'hpp_yuma'], []],
                            // 欢杀SP庞统
                            hpp_sp_pangtong: ['male', 'wu', 3, ['hpp_guolun', 'hpp_songsang', 'hpp_zhanji'], []],
                            // 欢杀SP孙尚香
                            hpp_sp_sunshangxiang: ['female', 'shu', 3, ['hpp_liangzhu', 'hpp_fanxiang'], []],
                            // 欢杀SP太史慈
                            hpp_sp_taishici: ['male', 'qun', 4, ['hpp_jixu'], []],
                            // 欢杀SP小乔
                            hpp_sp_xiaoqiao: ['female', 'wu', 3, ['hpp_xingwu', 'hpp_luoyan', 'hpp_huimou'], []],
                            // 欢杀SP张飞
                            hpp_sp_zhangfei:['male', 'shu', 4, ['hpp_sppaoxiao', 'hpp_xvhe'], []],
                            // 欢杀SP张郃
                            hpp_sp_zhanghe: ['male', 'qun', 4, ['hpp_zhouxuan'], []],
                            // 欢杀SP张辽
                            hpp_sp_zhangliao: ['male', 'qun', 4, ['hpp_mubing', 'hpp_ziqu', 'hpp_diaoling'], []],
                            // 欢杀SP赵云
                            hpp_sp_zhaoyun: ['male', 'qun', 3, ['hpp_longdan', 'hpp_chongzhen'], []],
                            // 欢杀SP甄姬
                            hpp_sp_zhenji: ['female', 'qun', 3, ['hpp_jinghong', 'hpp_spluoshen'], []],
                            // 欢杀卧龙诸葛
                            hpp_sp_zhugeliang: ['male', 'shu', 3, ['hpp_bazhen', 'hpp_huoji', 'hpp_kanpo'], []],

                            // 喵
                            hpp_miao_caiwenji: ['female', 'qun', 3, ['hpp_miaobeige', 'hpp_miaoduanchang', 'hpp_doumao'], []],
                            hpp_miao_diaochan: ['female', 'qun', 3, ['hpp_miaolijian', 'hpp_miaobiyue', 'hpp_doumao'], []],
                            hpp_miao_caifuren: ['female', 'qun', 3, ['hpp_miaoqieting', 'hpp_miaoxianzhou', 'hpp_doumao'], []],
                            hpp_miao_zhangxingcai: ['female', 'shu', 3, ['hpp_miaoshenxian', 'hpp_miaoqiangwu', 'hpp_doumao'], []],
                            hpp_miao_zhurong: ['female', 'shu', 4, ['hpp_miaojuxiang', 'hpp_miaolieren', 'hpp_doumao'], []],
                            hpp_miao_huangyueying: ['female', 'shu', 3, ['hpp_miaojizhi', 'hpp_miaoqicai', 'hpp_doumao'], []],
                            hpp_miao_daqiao: ['female', 'wu', 3, ['hpp_miaoguose', 'hpp_miaoliuli', 'hpp_doumao'], []],
                            hpp_miao_wangyi: ['female', 'wei', 4, ['hpp_miaozhenlie', 'hpp_miaomiji', 'hpp_doumao'], []],
                            hpp_miao_zhangchunhua: ['female', 'wei', 3, ['hpp_miaojueqing', 'hpp_miaoshangshi', 'hpp_doumao'], []],
                            hpp_miao_zhenji: ['female', 'wei', 3, ['hpp_miaoluoshen', 'hpp_miaoqingguo', 'hpp_doumao'], []],
                            hpp_miao_sunshangxiang: ['female', 'wu', 3, ['hpp_miaojieyi', 'hpp_miaoxiaoji', 'hpp_doumao'], []],
                            hpp_miao_xiaoqiao: ['female', 'wu', 3, ['hpp_miaotianxiang', 'hpp_miaohongyan', 'hpp_doumao'], []],

                            // 神
                            // 神曹操
                            hpp_shen_caocao: ['male', 'shen', 3, ['hpp_guixin', 'feiying'], ['wei']],
                            // 神大小乔
                            hpp_shen_daxiaoqiao: ['female', 'shen', 4, ['hpp_shuangshu', 'hpp_pingting', 'hpp_yizheng'], ['wu']],
                            // 神典韦
                            hpp_shen_dianwei: ['male', 'shen', 5, ['hpp_shenwei', 'hpp_elai', 'hpp_kuangxi'], ['wei']],
                            // 神貂蝉
                            hpp_shen_diaochan: ['female', 'shen', 3, ['hpp_meihun', 'hpp_huoxin'], ['qun']],
                            // 神甘宁
                            hpp_shen_ganning: ['male', 'shen', '3/6', ['hpp_poxi', 'drlt_jieying'], ['wu']],
                            // 神关羽
                            hpp_shen_guanyu: ['male', 'shen', 5, ['hpp_wushen', 'hpp_wuhun'], ['shu']],
                            // 神郭嘉
                            hpp_shen_guojia: ['male', 'shen', 3, ['reshuishi', 'hpp_gjtianyi', 'hpp_huishi'], ['wei']],
                            // 神华佗
                            hpp_shen_huatuo: ['male', 'shen', 1, ['hpp_jishi', 'hpp_taoxian', 'hpp_shenzhen'], ['qun']],
                            // 神姜维
                            hpp_shen_jiangwei: ['male', 'shen', 4, ['tianren', 'jiufa', 'pingxiang'], ['shu']],
                            // 神刘备
                            hpp_shen_liubei: ['male', 'shen', 6, ['hpp_longnu', 'hpp_jieying'], ['shu']],
                            // 神陆逊
                            hpp_shen_luxun: ["male", "shen", 4, ["hpp_junlue", "hpp_cuike", "hpp_zhanhuo"], ["wu"]],
                            // 神吕布
                            hpp_shen_lvbu: ['male', 'shen', 6, ['hpp_wuqian', 'hpp_shenfen'], ['qun']],
                            // 神吕蒙
                            hpp_shen_lvmeng: ['male', 'shen', 3, ['hpp_shelie', 'hpp_gongxin'], ['wu']],
                            // 神司马懿
                            hpp_shen_simayi: ['male', 'shen', 3, ['hpp_renjie', 'hpp_jilve', 'lianpo'], ['wei']],
                            // 神孙策
                            hpp_shen_sunce: ['male', 'shen', '1/6', ['yingba', 'scfuhai', 'pinghe'], ['wu']],
                            // 神孙权
                            hpp_shen_sunquan: ['male', 'shen', 4, ['hpp_quanxue', 'hpp_shehu', 'hpp_dingli'], ['wu']],
                            // 神太史慈
                            hpp_shen_taishici: ['male', 'shen', 4, ['hpp_dulie', 'hpp_chongwei', 'hpp_powei'], ['wu']],
                            // 神荀彧
                            hpp_shen_xunyu: ['male', 'shen', 3, ['tianzuo', 'lingce', 'dinghan'], ['wei', 'clan:颍川荀氏']],
                            // 神张飞
                            hpp_shen_zhangfei: ['male', 'shen', 4, ['shencai', 'xunshi'], ['shu']],
                            // 神张角
                            hpp_shen_zhangjiao: ['male', 'shen', 3, ['hpp_yizhao', 'hpp_sanshou', 'hpp_sijun', 'hpp_tianjie'], ['qun']],
                            // 神张辽
                            hpp_shen_zhangliao: ['male', 'shen', 4, ['hpp_duorui', 'hpp_zhiti'], ['wei']],
                            // 神赵云
                            hpp_shen_zhaoyun: ['male', 'shen', 2, ['hpp_juejing', 'hpp_longhun'], ['shu']],
                            // 神甄姬
                            hpp_shen_zhenji: ['female', 'shen', 3, ['hpp_shenfu', 'hpp_qixian', 'hpp_feifu'], ['qun']],
                            // 神周瑜
                            hpp_shen_zhouyu: ['male', 'shen', 4, ['hpp_qinyin', 'hpp_yeyan'], ['wu']],
                            // 神诸葛亮
                            hpp_shen_zhugeliang: ['male', 'shen', 3, ['hpp_qixing', 'hpp_kuangfeng', 'hpp_dawu'], ['shu']],

                            // 嫦娥
                            hpp_change: ['female', 'shen', '1/4', ['hpp_daoyao', 'hpp_benyue'], []],
                            // 大懒猫
                            hpp_dalanmao: ['male', 'shen', 4, ['hpp_zuzhou', 'hpp_moyu', 'hpp_sanlian'], []],
                            // 李白
                            hpp_libai: ['male', 'qun', 3, ['hpp_shixian'], []],
                            // 孙悟空
                            hpp_sunwukong: ['male', 'shen', 4, ['hpp_72bian', 'hpp_ruyi', 'hpp_qitian'], []],
                        },
                        characterIntro: {
                            hpp_guotupangji: '两人均是袁绍帐下谋士。曾联手献计，利用公孙瓒攻击韩馥，又劝说韩馥请袁绍抵挡公孙瓒，终替袁绍拿下冀州。官渡之战期间，两人进谗逼反张郃高览，逼死田丰。使得袁绍的实力大损。',
                            hpp_lidian: '字曼成，曹操麾下将领。李典深明大义，不与人争功，崇尚学习与高贵儒雅，尊重博学之士，在军中被称为长者。李典有长者之风，官至破虏将军，三十六岁去世。魏文帝曹丕继位后追谥号为愍侯。',
                            hpp_zhangzhaozhanghong: '张昭，字子布，彭城人，三国时期吴国重臣，善丹青。拜辅吴将军，班亚三司，改封娄侯。年八十一卒，谥曰文侯。<br/>张纮，字子纲，广陵人。东吴谋士，和张昭一起合称“二张”。孙策平定江东时亲自登门邀请，张纮遂出仕为官。张纮后来建议孙权迁都秣陵，孙权正在准备时张纮病逝，其年六十岁。孙权为之流涕。',
                            hpp_yanliangwenchou: '东汉末年河北袁绍部下武将，素有威名。颜良与文丑一起作为袁绍军队的勇将而闻名。建安四年（199），袁绍以颜良、文丑为将，率精卒十万，准备攻许都；次年，兵进黎阳，遣颜良攻白马。终均亡于关羽刀下。',
                            hpp_sp_caiwenji: '名琰，原字昭姬，晋时避司马昭讳，改字文姬，东汉末年陈留圉（今河南开封杞县）人，东汉大文学家蔡邕的女儿，是中国历史上著名的才女和文学家，精于天文数理，既博学能文，又善诗赋，兼长辩才与音律。代表作有《胡笳十八拍》、《悲愤诗》等 。',
                            hpp_sp_caoren: '字子孝，沛国谯人，曹操的从弟。三国时期曹魏名将，官至大司马。谥曰忠侯。',
                            hpp_sp_daqiao: '庐江皖县人，为乔公长女，孙策之妻，小乔之姊。与小乔并称为“江东二乔”，容貌国色流离。',
                            hpp_sp_diaochan: '中国古代四大美女之一，有闭月羞花之貌。司徒王允之义女，由王允授意施行连环计，离间董卓、吕布，借布手除卓。后貂蝉成为吕布的妾。',
                            hpp_sp_guanyu: '关羽，字云长。曾水淹七军、擒于禁、斩庞德、威震华夏，吓得曹操差点迁都躲避，但是东吴偷袭荆州，关羽兵败被害。后传说吕蒙因关羽之魂索命而死。',
                            hpp_sp_huangyueying: '荆州沔南白水人，沔阳名士黄承彦之女，诸葛亮之妻，诸葛瞻之母。容貌甚丑，而有奇才：上通天文，下察地理，韬略近于诸书无所不晓，诸葛亮在南阳闻其贤而迎娶。',
                            hpp_sp_jiangwei: '字伯约，天水冀人。三国时期蜀汉著名将领、军事统帅。原为曹魏天水郡的中郎将，后降蜀汉，官至凉州刺史、大将军。诸葛亮去世后继承诸葛亮的遗志，继续率领蜀汉军队北伐曹魏，与曹魏名将陈泰、郭淮、邓艾等多次交手。',
                            hpp_sp_jiaxu: '字文和，武威姑臧人。三国时期魏国著名谋士。曾先后担任三国军阀李傕、张绣、曹操的谋士。官至魏国太尉，谥曰肃侯。',
                            hpp_sp_machao: '字孟起，扶风茂陵人。面如冠玉，目如流星，虎体猿臂，彪腹狼腰，声雄力猛。因衣着讲究，举止非凡，故人称“锦马超”。麾铁骑，捻金枪。',
                            hpp_sp_menghuo: '中国三国时期南中少数族首领。系东汉末益州建宁郡( 今云南晋宁东 )大姓，身材肥硕。生卒年不详。官至御史中丞。曾被诸葛亮七擒七纵，传为佳话。',
                            hpp_sp_pangde: '字令明，东汉末年雍州南安郡狟道县（今甘肃天水市武山县四门镇）人。曹操部下重要将领。官至立义将军，拜关门亭侯。谥曰壮侯。有一子庞会。',
                            hpp_sp_pangtong: "庞统，字士元，襄阳（治今湖北襄阳）人。三国时刘备帐下谋士，官拜军师中郎将。才智与诸葛亮齐名，人称“凤雏”。在进围雒县时，统率众攻城，不幸被流矢击中去世，时年三十六岁。追赐统为关内侯，谥曰靖侯。庞统死后，葬于落凤庞统墓坡。",
                            hpp_sp_sunshangxiang: '孙夫人，乃孙权之妹。刘备定荆州，孙权进妹与其结姻，重固盟好。孙夫人才捷刚猛，有诸兄之风。后人为其立庙，号曰“枭姬庙”。',
                            hpp_sp_taishici: '太史慈，字子义，东莱黄县（今山东龙口东黄城集）人。东汉末年武将，守言应诺，恪遵信义，始终如一，弭息诽论。官至建昌都尉。弓马熟练，箭法精良。原为刘繇部下，后被孙策收降，于赤壁之战前病逝，死时才四十一岁。',
                            hpp_sp_xiaoqiao: '庐江皖县人也。父桥国老德尊于时。小乔国色流离，资貌绝伦。建安三年，周瑜协策攻皖，拔之。娶小乔为妻。后人谓英雄美女，天作之合。',
                            hpp_sp_zhangfei: '字翼德，涿郡人，燕颔虎须，豹头环眼。有诗云：“长坂坡头杀气生，横枪立马眼圆睁。一声好似轰雷震，独退曹家百万兵”。',
                            hpp_sp_zhanghe: '字儁乂，河间鄚人。三国时期魏国名将。官渡之战时，本为袁绍部将的张郃投降了曹操，并在曹操帐下多立功勋，于曹魏建立后加封为征西车骑将军。诸葛亮六出祁山之间，张郃多次抵御蜀军的进攻，于公元231年在木门道被诸葛亮设伏射死。后谥曰壮侯。为曹魏“五子良将”之一。',
                            hpp_sp_zhaoyun: '字子龙，常山真定人。身长八尺，姿颜雄伟。长坂坡单骑救阿斗，先主云：“子龙一身都是胆也。”',
                            hpp_sp_zhenji: '中山无极人，别称甄洛或甄宓，庙号文昭甄皇后。魏文帝曹丕的正室。懂诗文，有倾国倾城之貌，《洛神赋》即是曹植为她所作。',


                            hpp_miao_caiwenji: '蔡谈，字文姬，又字昭姬 。生卒年不详。东汉陈留郡围县人，东汉大文学家蔡邕的女儿。初嫁于卫仲道，丈夫死去而回到自己家里，后值因匈奴入侵，蔡文姬被匈奴左贤王掳走，嫁给匈奴人，并生育了两个孩子。十二年后，曹操统一北方，用重金将蔡文姬赎回，并将其嫁给董祀。“文姬归汉”的故事在历朝历代被广为流传。 蔡文姬同时擅长文学、音乐、书法。《隋书·经籍志》著录有《蔡文姬集》一卷。现在能看到的蔡文姬作品只有《悲愤诗》二首和《胡笳十八拍》。后世人称蔡文姬婉娩淑女，与士并列。至柔动刚，彤管炜节。自异界穿梭之后获得了全新的形象。',
                            hpp_miao_diaochan: '貂蝉，中国四大美女之一，本名任红昌，因十常侍之乱而被王允收留。之后董卓造逆，貂蝉为拯救风雨飘摇的汉室，由义父王允授意暗施连环离间计。以连环离间计挑拨董卓和吕布之间的关系，让两人为了争夺绍蝉而争风吃醋，最终反目成仇，吕布冲冠一怒为红颜，打败董卓，貂蝉顺理成章做了吕布的妾室。 (《三国演义》)。离间计体现出了貂蝉的有胆有识识大体顾大局的性格，以己之身，拯救天下苍生，“猛将勇夫不能除一董卓，而貂蝉独能除之”(蔡东藩《后汉演义》)足见貂蝉地位的重要。董卓部将李催击败吕布后，她随吕布来到徐州。下邸一役后，吕布被曹操所打败，貂蝉跟随吕布家眷前往许昌。关于貂蝉的下落已是众说纷纭。自异界穿梭之后获得了全新的形象。',
                            hpp_miao_caiwenji: '蔡夫人，东汉末年荆州牧刘表的后妻，襄阳人，刘琼后母、蔡瑁之姐。荆襄一带的豪族蔡氏家族的一员。诸葛亮之妻黄月英的姨母，以侄女妻表次子刘踪，因爱之，常毁刘琦而誉刘琼于表。刘表死后，与蔡瑁等共排表长子刘琦，奉刘琼为嗣，后曹操军队来到襄阳后，蔡夫人便随刘踪，献上荆州投降曹操。然曹操命刘踪为青州刺史，上任途中，命于禁将其母子二人灭口。有评李势:“蔡夫人短见，白白把荆州送与别人，与今之弟兄争家、争献豪门者一个样子。可笑世上人，大愚不悟也。自异界穿梭之后获得了全新的形象。',
                            hpp_miao_zhangxingcai: '张星彩 (? - 237年)，泳郡人，车骑将军张飞与夏侯氏之女，张苞，张绍之妹，蜀汉后主刘禅的皇后。“星彩”二字暗含“蜀国未来的希望之星”。从小生活在蜀军的军营里，受父亲张飞影响长大，但是与父亲性格迥异，对任何事物均冷静判断，小心行事。 221年作为太子刘禅的妃子入宫:223年被立为皇后。陈寿的《三国志》对其描述为:“易称有夫妇然后有父子夫人伦之始，恩纪之隆，莫尚于此矣。是故纪录，以究一国之体焉。”建兴十五年(公元237年)六月，张氏去世，谥号敬哀皇后，死后葬于南陵。自异界穿梭之后获得了全新的形象。',
                            hpp_miao_zhurong: '祝融，南蛮王孟获之妻，带来洞主之姐，传说为火神祝融的后裔，武艺高强，性格刚强，以诸葛亮取得后，祝融替丈夫出阵，以飞刀伤张巍之手，又用绊马索擒下马忠，生擒了二人;然而因受不住赵云、魏延等的挑衅，深入敌军陷阱，旋即被马岱以绊马索擒下。最后孟获以张、马二将换回祝融。后来诸葛亮七擒七纵孟获，孟获表示永不再反，祝融亦随之归顺。自异界穿梭之后获得了全新的形象。',
                            hpp_miao_huangyueying: '黄月英，荆州河南白水人，河阳名士黄承彦之女，诸葛亮之妻。姨母是刘表后妻蔡夫人。其之有诸葛瞻，与女诸葛果。长相丑陋，黄头发，黑皮肤，但才华却与诸葛亮相当。诸葛亮在六出祁山时，所用的木牛流马，也是为娶黄月英所特制。诸葛亮从不离手的朱雀羽扇，也是黄月英所赠传扇上有攻城略地、治国安邦的计策，且黄月英也是提点诸葛亮，大丈夫做事要沉得住气，不能情绪波动，感情用事，更不能让人家发现，被轻视、被鄙视，而成不了大事，偶尔以扇遮面，可不被对方所窥心中所想。诸葛亮的功绩显赫，离不开黄月英的存在。自异界穿梭之后获得了全新的形象。',
                            hpp_miao_daqiao: '大乔，庐江郡皖县人，系乔公之女、孙策之妾、小乔之姊。与其妹小乔并称为“江东二乔”传说为绝世美女，容貌国色流离。建安四年 (公元199年) 12月，孙策攻取庐江的皖城，虏获二乔姐妹，孙策自纳大乔为妾。大乔随后同被俘获的袁术家眷和刘勋家眷一起被送回吴郡。然而孙策四个月后就去世。大乔自此沦为了孤家寡人，思君之情零里看花，清人薛福成的《庸盒笔记》传说大乔在孙策死后，哭泣数月而卒。曹操所建铜雀台传闻也是为二乔所建。自异界穿梭之后获得了全新的形象',
                            hpp_miao_xiaoqiao: '小乔， (180 - 223)，本姓桥，中国东汉未年时期的美女，庐江皖县人。乔公的次女，汉末名将周瑜之妾。与其姐大乔合成为“双乔”，国色天香之姿。周瑜风度翩翩的才子形象，与堪称国色的小乔可称天作之合。育有一子一女，其子为周胤，周瑜次子。其女为周妃 (周彻)，黄武四年(225年)在大帝孙权安排做主下，嫁于王太子孙登为王太子妃。建安十五年(公元210年) 周瑜36岁英年早逝，小乔住守庐江，扶养遗孤。公元223年，小乔病卒，享年四十七岁。南陵小乔墓前有一块巨碑，阳刻“东吴大都督周公配乔夫人之墓.”两侧阴刻着一副对联。上联是安徽宿松文人许文权撰: 千年来本贵贱同归，玉容花貌，飘零几处? 昭君家、杨妃草、真娘墓、苏小坟，更遗此江作名妹，并向天涯留胜迹。 下联是芜湖儒士陶宝森作: 三国时何夫妻异葬，纸钱酒杯，浇典谁人? 笋露、芭蕉雨、菌风，梧桐月，只借他寺前野景，常为地主作清供自异界穿梭之后获得了全新的形象',
                            hpp_miao_sunshangxiang: '孙尚香，吴郡富春人，她是孙坚和吴国太的女儿，孙策和孙权的妹妹，赤壁之战后为巩固孙刘联盟嫁给蜀主刘备，后世称她“孙夫人”。孙夫人嫁给刘备时正当妙龄，刘备却已年过五十她貌美机敏，刚强勇猛，大有父亲孙坚和长兄孙策之风。她嫁到蜀国的时候，身边带了一百多个侍婢，个个都执刀守卫在她身边。刘备每次进入内房时都战战兢兢的，刘备最信任的谋士法正甚至将她视为与曹操、孙权同级别的祸患。211年，孙刘交恶，孙权派人来接孙尚香回吴国，孙尚香打算将刘禅一起带走，但被赵云和张飞截下。此后事迹不详。在小说《三国演义》中，孙夫人真心爱恋刘备，帮助刘备拜托了东吴设下的“美人计”圈套，顺利返回蜀国。自异界穿梭之后获得了全新的形象',
                            hpp_miao_zhenji: '甄姬(183年一221年)，史称甄夫人,文昭甄皇后。中山无极人，上蔡令甄逸之女。魏文帝曹丕的妻子，魏明帝曹都的生母。建安中期，袁绍为次子袁熙纳之为妻。建安九年(204年)曹操率军攻下邺城，甄氏因为姿貌绝伦，被曹不所纳，生下儿子曹数和女儿曹氏 (即东乡公主)。延康元年(220年) ，曹不继位魏王。甄氏被留在城。黄初元年 (220年) ，曹不称帝，后宫中文德郭皇后，李贵人和阴贵人都得到宠幸，甄氏愈发失意，曹不大怒，黄初二年(221) 年六月，遣使赐死甄氏，葬于邺城。黄初七年 (226) 五月，曹即位后，追溢甄氏日文昭皇后。甄姬著有诗歌《塘上行》一首，属《相和歌·清调曲》。 以决绝的笔触抒发了因逸言而与丈夫嫌隙的沉痛，追思昔日欢好自异界穿梭之后获得了全新的形象。',
                            hpp_miao_zhangchunhua: '张春华，司马懿的妻子，司马师和司马昭的母亲，被封为宣穆皇后。年少时有德行，智慧超过常人，嫁给司马懿后生有三子一女，其中就有司马师和司马昭。建安六年，司马懿被选拔为官。曹操当时担任司空想要征召司马懿入朝，司马懿深知汉朝国运无可挽回，不愿屈服，假城自己有风痹之疾卧床难起，拒绝征召。有一次晾晒书籍，忽遇大暴雨，司马懿不由自主地去收书。家中惟有一个媳女看到此事，张春华担心司马歆装病之事泄露出去招致灾祸，便亲手处理了婢女，而且亲自下灶烧火做饭。司马懿由此十分看重她。后来司马懿宠爱柏夫人张春华被司马懿冷落，甚至在司马懿生病前去探望时被司马懿恶语相向。正始八年，张春华去世，张春华一生未得司马懿青睐，死后才得追赠。自异界穿梭之后获得了全新的形象。',
                            hpp_miao_wangyi: '王异，赵昂之妻。建安十六年 (公元212年)，马超攻打冀城。因救兵不到，刺史韦康投降参军杨阜痛哭。马超入城后，杨阜入历城见姜叙商议反攻马超之计，姜叙又与统兵校尉尹奉、赵昂商议。赵昂答应，但儿子赵月在马超军中从事，与妻子王异商议，言语中有不起兵之意，王异厉声说:“雪国君之大耻，即使自身死也不值得怜惜，何况一子!如果你因为顾忌儿子而放弃，我就先死!”赵昂于是下定决心起兵。王异随军出征，把自己的首饰犒劳给军兵。马超知后立刻进攻历城。姜叙、尹奉、赵昂与马超大战，恰夏侯渊救兵至，马超逃走冀城细作当着马超面将马超全家杀死。马超辗转回历城，诈称姜叙兵回，入城后血洗百姓姜叙、尹奉、赵昂全家皆死，王异因在军中而幸免于难。次日，夏侯渊兵至，马超逃走，投奔张鲁。自异界穿梭之后获得了全新的形象。',

                            hpp_shen_caocao: '魏武帝曹操，字孟德，小名阿瞒、吉利，沛国谯人。精兵法，善诗歌，乃治世之能臣，乱世之奸雄也。',
                            hpp_shen_daxiaoqiao: '大乔，庐江皖县人，为乔公长女，孙策之妻，容貌国色流离。小乔为大乔之妹，周瑜之妻，资貌绝伦。两人合称“二乔”。',
                            hpp_shen_dianwei: '己吾城村人。东汉末年曹魏猛将。擅使大双戟，为人壮猛任侠，曾为乡人刘氏报仇，杀人出市，人莫敢近。相貌魁梧，膂力过人。建安二年（197），张绣背叛曹操，典韦为保护曹操而独挡叛军，击杀多人，但最终因寡不敌众而战死。',
                            hpp_shen_diaochan: '貂蝉，中国四大美女之一，本名任红昌，因十常侍之乱而被王允收留。之后董卓造逆，貂蝉为拯救风雨飘摇的汉室，由义父王允授意暗施连环离间计。以连环离间计挑拨董卓和吕布之间的关系，让两人为了争夺绍蝉而争风吃醋，最终反目成仇，吕布冲冠一怒为红颜，打败董卓，貂蝉顺理成章做了吕布的妾室。 (《三国演义》)。离间计体现出了貂蝉的有胆有识识大体顾大局的性格，以己之身，拯救天下苍生，“猛将勇夫不能除一董卓，而貂蝉独能除之”(蔡东藩《后汉演义》)足见貂蝉地位的重要。董卓部将李催击败吕布后，她随吕布来到徐州。下邸一役后，吕布被曹操所打败，貂蝉跟随吕布家眷前往许昌。关于貂蝉的下落已是众说纷纭。自异界穿梭之后获得了全新的形象。',
                            hpp_shen_ganning: '字兴霸，巴郡临江人，祖籍荆州南阳郡。为人勇猛刚强，忠心耿耿，勇往无前。曾带兵百人于二更奇袭曹营，大挫其锐气。',
                            hpp_shen_guanyu: '关羽，字云长。曾水淹七军、擒于禁、斩庞德、威震华夏，吓得曹操差点迁都躲避，但是东吴偷袭荆州，关羽兵败被害。后传说吕蒙因关羽之魂索命而死。',
                            hpp_shen_guojia: '字奉孝，颍川阳翟人，官至军师祭酒。惜天妒英才，英年早逝。有诗云：“良计环环不遗策，每临制变满座惊”。',
                            hpp_shen_huatuo: '字元化，一名旉，沛国谯人，“建安三神医”之一。集平生之所得著《青囊经》，现已失传。',
                            hpp_shen_jiangwei: '字伯约，天水冀人。三国时期蜀汉著名将领、军事统帅。原为曹魏天水郡的中郎将，后降蜀汉，官至凉州刺史、大将军。诸葛亮去世后继承诸葛亮的遗志，继续率领蜀汉军队北伐曹魏，与曹魏名将陈泰、郭淮、邓艾等多次交手。',
                            hpp_shen_liubei: '先主姓刘，讳备，字玄德，涿郡涿县人，汉景帝子中山靖王胜之后也。以仁德治天下。',
                            hpp_shen_luxun: '本名陆议，字伯言，吴郡吴县人。历任东吴大都督、丞相。吴大帝孙权兄孙策之婿，世代为江东大族。以谦逊之书麻痹关羽，夺取荆州，又有火烧连营大破蜀军。',
                            hpp_shen_lvbu: '字奉先，五原郡九原县人。三国第一猛将，曾独力战刘关张三人，其武力世之无双。时人语曰：“人中有吕布，马中有赤兔。”',
                            hpp_shen_lvmeng: '吕蒙，字子明，汝南富陂人，东吴名将，原有“吴下阿蒙”之贬称，后受孙权劝说，奋发读书，最终成就一代名将。',
                            hpp_shen_simayi: '晋宣帝，字仲达，河内温人。曾任职过曹魏的大都督，太尉，太傅。少有奇节，聪明多大略，博学洽闻，伏膺儒教，世之鬼才也。',
                            hpp_shen_sunce: '字伯符，吴郡富春人。孙坚长子，孙权长兄。东汉末年割据江东一带的军阀，汉末群雄之一，三国时期吴国的奠基者。三国演义中绰号“小霸王”，统一江东。在一次狩猎中为刺客所伤，不久后身亡，年仅二十六岁。其弟孙权接掌孙策势力，并于称帝后，追谥孙策为长沙桓王。',
                            hpp_shen_sunquan: '吴大帝，字仲谋，吴郡富春县人。统领吴与蜀魏三足鼎立，制衡天下。',
                            hpp_shen_taishici: '太史慈，字子义，东莱黄县（今山东龙口东黄城集）人。东汉末年武将，守言应诺，恪遵信义，始终如一，弭息诽论。官至建昌都尉。弓马熟练，箭法精良。原为刘繇部下，后被孙策收降，于赤壁之战前病逝，死时才四十一岁。',
                            hpp_shen_xunyu: '荀彧，字文若，颍川颍阴（今河南许昌）人。东汉末年曹操帐下首席谋臣，杰出的战略家。自小被世人称作“王佐之才”。',
                            hpp_shen_zhangfei: '字翼德，涿郡人，燕颔虎须，豹头环眼。有诗云：“长坂坡头杀气生，横枪立马眼圆睁。一声好似轰雷震，独退曹家百万兵”。',
                            hpp_shen_zhangjiao: '乱世的开始，黄巾起义军首领，太平道创始人。张角早年信奉黄老学说，对在汉代十分流行的谶纬之学也深有研究，对民间医术 、巫术也很熟悉。',
                            hpp_shen_zhangliao: '字文远，魏雁门马邑人。官至前将军、征东将军、晋阳侯。武功高强，又谋略过人，多次建立奇功，以800人突袭孙权十万大军，皆望风披靡。',
                            hpp_shen_zhaoyun: '字子龙，常山真定人。身长八尺，姿颜雄伟。长坂坡单骑救阿斗，先主云：“子龙一身都是胆也。”',
                            hpp_shen_zhenji: '中山无极人，别称甄洛或甄宓，庙号文昭甄皇后。魏文帝曹丕的正室。懂诗文，有倾国倾城之貌，《洛神赋》即是曹植为她所作。',
                            hpp_shen_zhouyu: '字公瑾，庐江舒县人。东汉末年名将。有姿貌、精音律，江东有“曲有误，周郎顾”之语。周瑜少与孙策交好，后孙策遇刺身亡，孙权继任。周瑜将兵赴丧，以中护军的身份与长史张昭共掌众事，建安十三年（208年），周瑜率东吴军与刘备军联合，在赤壁击败曹操。此战也奠定了三分天下的基础。',
                            hpp_shen_zhugeliang: '字孔明、号卧龙，汉族，琅琊阳都人，三国时期蜀汉丞相、杰出的政治家、军事家、发明家、文学家。在世时被封为武乡侯，死后追谥忠武侯，后来东晋政权推崇诸葛亮军事才能，特追封他为武兴王。诸葛亮为匡扶蜀汉政权，呕心沥血、鞠躬尽瘁、死而后已。其代表作有《前出师表》、《后出师表》、《诫子书》等。曾发明木牛流马等，并改造连弩，可一弩十矢俱发。于234年在宝鸡五丈原逝世。',
                            hpp_change: '嫦娥，中国古代神话中的人物，又名恒我、恒娥、姮娥、常娥、素娥，羿之妻，因偷吃了不死药而飞升至月宫。嫦娥的故事最早出现在商朝卦书 《归藏》。而嫦娥奔月的完整故事最早记载于西汉《淮南子·览冥训》。东汉时期，嫦娥与羿的夫妻关系确立，而嫦娥在进入月宫后变成了捣药的蟾蜍。南北朝以后，嫦娥的形象回归为女儿身。汉画像中，嫦娥人头蛇身，头梳高髻，身着宽袖长襦，身后长尾上饰有倒钩状细短羽毛。南北朝以后，嫦娥的形象被描绘成绝世美女。南朝陈后主陈叔宝曾把宠妃张丽华比作嫦娥。唐朝诗人白居易曾用嫦娥夸赞邻家少女不可多得的容貌。',
                            hpp_dalanmao: '欢乐三国杀家园系统角色',
                            hpp_sunwukong: '狗卡桌游《自在西游》联动角色',
                        },
                        characterReplace: {
                            // B
                            beimihu: ['hpp_beimihu', 'tw_beimihu', 'beimihu'],
                            bulianshi: ['hpp_bulianshi', 're_bulianshi', 'dc_bulianshi', 'bulianshi', 'old_bulianshi'],
                            buzhi: ['hpp_buzhi', 'buzhi'],
                            // C
                            caifuren: ['hpp_caifuren', 'xin_caifuren', 're_caifuren', 'caifuren'],
                            caiwenji: ['hpp_caiwenji', 'ol_caiwenji', 're_caiwenji', 'caiwenji'],
                            caoang: ['hpp_caoang', 'caoang', 'yj_caoang', 'tw_caoang'],
                            caocao: ['hpp_caocao', 're_caocao', 'caocao'],
                            caochong: ['hpp_caochong', 'caochong', 'old_caochong'],
                            caohua: ['hpp_caohua', 'caohua'],
                            caojie: ['hpp_caojie', 'caojie'],
                            caomao: ['hpp_caomao', 'caomao'],
                            caopi: ['hpp_caopi', 'caopi', 're_caopi', 'ps_caopi'],
                            caoren: ['hpp_caoren', 'caoren', 'new_caoren', 'old_caoren'],
                            caorui: ['hpp_caorui', 'caorui', 'old_caorui'],
                            caoxing: ['hpp_caoxing', 'caoxing'],
                            caoxiu: ['hpp_caoxiu', 're_caoxiu', 'tw_caoxiu', 'xin_caoxiu', 'caoxiu', 'old_caoxiu'],
                            caoying: ['hpp_caoying', 'caoying'],
                            caozhang: ['hpp_caozhang', 're_caozhang', 'xin_caozhang', 'caozhang'],
                            caozhen: ['hpp_caozhen', 're_caozhen', 'xin_caozhen', 'caozhen', 'old_caozhen'],
                            caozhi: ['hpp_caozhi', 're_caozhi', 'dc_caozhi', 'caozhi', 'ps_caozhi'],
                            chendao: ['hpp_chendao', 'chendao', 'old_chendao', 'ns_chendao'],
                            chengong: ['hpp_chengong', 're_chengong', 'chengong'],
                            chengpu: ['hpp_chengpu', 're_chengpu', 'tw_chengpu', 'ns_chengpu', 'chengpu', 'xin_chengpu'],
                            chenqun: ['hpp_chenqun', 'dc_chenqun', 'chenqun', 're_chenqun', 'old_chenqun'],
                            chunyuqiong: ['hpp_chunyuqiong', 'chunyuqiong', 're_chunyuqiong'],
                            // D
                            daqiao: ['hpp_daqiao', 're_daqiao', 'daqiao'],
                            dengai: ['hpp_dengai', 're_dengai', 'ol_dengai', 'dengai'],
                            dianwei: ['hpp_dianwei', 'ol_dianwei', 're_dianwei', 'dianwei'],
                            diaochan: ['hpp_diaochan', 're_diaochan', 'diaochan'],
                            dingfeng: ['hpp_dingfeng', 'dingfeng', 'tw_dingfeng', 'old_dingfeng'],
                            dongbai: ['hpp_dongbai', 're_dongbai', 'dongbai', 'jsrg_dongbai'],
                            dongyun: ['hpp_dongyun', 'dongyun'],
                            dongzhuo: ['hpp_dongzhuo', 'ol_dongzhuo', 'sp_dongzhuo', 're_dongzhuo', 'dongzhuo'],
                            dufuren: ['hpp_dufuren', 'dufuren'],
                            // F
                            fazheng: ['hpp_fazheng', 're_fazheng', 'tw_re_fazheng', 'xin_fazheng', 'fazheng'],
                            fuhuanghou: ['hpp_fuhuanghou', 're_fuhuanghou', 'xin_fuhuanghou', 'fuhuanghou', 'old_fuhuanghou'],
                            // G
                            ganfuren: ['hpp_ganfuren', 'ganfuren', 'dc_ganfuren'],
                            ganning: ['hpp_ganning', 're_ganning', 'ganning'],
                            gaoshun: ['hpp_gaoshun', 'xin_gaoshun', 're_gaoshun', 'gaoshun', 'old_gaoshun'],
                            gongsunzan: ['hpp_gongsunzan', 'dc_gongsunzan', 're_gongsunzan', 'xin_gongsunzan', 'gongsunzan'],
                            guanping: ['hpp_guanping', 're_guanping', 'guanping'],
                            guanyinping: ['hpp_guanyinping', 'guanyinping'],
                            guanyu: ['hpp_guanyu', 're_guanyu', 'guanyu'],
                            guohuai: ['hpp_guohuai', 'guohuai', 'tw_guohuai', 're_guohuai', 'xin_guohuai', 'ol_guohuai'],
                            guohuanghou: ['hpp_guohuanghou', 're_guohuanghou', 'guohuanghou'],
                            guojia: ['hpp_guojia', 're_guojia', 'guojia'],
                            guotufengji: ['hpp_guotupangji', 'guotufengji', 're_guotufengji'],
                            // H
                            handang: ['hpp_handang', 'tw_handang', 'xin_handang', 're_handang', 'handang', 'old_handang'],
                            haozhao: ['hpp_haozhao', 'haozhao'],
                            hetaihou: ['hpp_hetaihou', 'hetaihou'],
                            huaman: ['hpp_huaman', 'huaman', 'sp_huaman'],
                            huanggai: ['hpp_huanggai', 're_huanggai', 'huanggai'],
                            huangyueying: ['hpp_huangyueying', 're_huangyueying', 'huangyueying', 'junk_huangyueying'],
                            huangzhong: ['hpp_huangzhong', 'ol_huangzhong', 're_huangzhong', 'huangzhong'],
                            huatuo: ['hpp_huatuo', 're_huatuo', 'old_huatuo', 'huatuo'],
                            huaxiong: ['hpp_huaxiong', 're_huaxiong', 'old_huaxiong', 'huaxiong', 'ol_huaxiong'],
                            // J
                            jiangwei: ['hpp_jiangwei', 'ol_jiangwei', 're_jiangwei', 'jiangwei'],
                            jianyong: ['hpp_jianyong', 're_jianyong', 'xin_jianyong', 'jianyong'],
                            jiaxu: ['hpp_jiaxu', 're_jiaxu', 'jiaxu', 'ns_jiaxu'],
                            yj_jushou: ['hpp_jushou', 're_jushou', 'xin_jushou', 'yj_jushou'],
                            // K
                            kuailiangkuaiyue: ['hpp_kuailiangkuaiyue', 'kuailiangkuaiyue'],
                            // L
                            liangxing: ['hpp_liangxing', 'liangxing'],
                            liaohua: ['hpp_liaohua', 'xin_liaohua', 're_liaohua', 'liaohua'],
                            re_lidian: ['hpp_lidian', 're_lidian', 'old_re_lidian', 'junk_lidian'],
                            lijue: ['hpp_lijue', 'lijue', 'ns_lijue'],
                            lingtong: ['hpp_lingtong', 'xin_lingtong', 're_lingtong', 'lingtong', 'old_lingtong'],
                            liru: ['hpp_liru', 're_liru', 'dc_liru', 'xin_liru', 'liru', 'yj_liru'],
                            liubei: ['hpp_liubei', 're_liubei', 'liubei', 'junk_liubei'],
                            liubiao: ['hpp_liubiao', 're_liubiao', 'xin_liubiao', 'liubiao', 'oldre_liubiao', 'old_liubiao'],
                            liuchen: ['hpp_liuchen', 're_liuchen', 'liuchen'],
                            liufeng: ['hpp_liufeng', 're_liufeng', 'liufeng'],
                            liushan: ['hpp_liushan', 'ol_liushan', 're_liushan', 'liushan'],
                            liuxie: ['hpp_liuxie', 'liuxie'],
                            liuyan: ['hpp_liuyan', 'liuyan'],
                            liuyong: ['hpp_liuyong', 'liuyong'],
                            liuzan: ['hpp_liuzan', 're_liuzan', 'liuzan'],
                            liuzhang: ['hpp_liuzhang', 'liuzhang', 'tw_liuzhang'],
                            liyan: ['hpp_liyan', 'liyan', 'old_liyan'],
                            ol_lusu: ['hpp_lusu', 'ol_lusu', 're_lusu'],
                            luji: ['hpp_luji', 'luji'],
                            lukang: ['hpp_lukang', 'lukang'],
                            luxun: ['hpp_luxun', 're_luxun', 'luxun'],
                            ol_lusu: ['hpp_lusu', 'ol_lusu', 're_lusu'],
                            luyusheng: ['hpp_luyusheng', 'luyusheng'],
                            lvbu: ['hpp_lvbu', 're_lvbu', 'lvbu'],
                            lvkai: ['hpp_lvkai', 'lvkai'],
                            lvlingqi: ['hpp_lvlingqi', 'lvlingqi'],
                            lvmeng: ['hpp_lvmeng', 're_lvmeng', 'lvmeng'],
                            // M
                            machao: ['hpp_machao', 're_machao', 'machao'],
                            madai: ['hpp_madai', 'tw_madai', 're_madai', 'old_madai', 'madai'],
                            masu: ['hpp_masu', 'xin_masu', 're_masu', 'masu'],
                            mayunlu: ['hpp_mayunlu', 'tw_mayunlu', 'mayunlu'],
                            menghuo: ['hpp_menghuo', 're_menghuo', 'menghuo'],
                            dc_mifuren: ['hpp_mifuren', 'dc_mifuren', 'sp_mifuren'],
                            mizhu: ['hpp_mizhu', 'mizhu'],
                            // P
                            panfeng: ['hpp_panfeng', 're_panfeng', 'panfeng'],
                            pangde: ['hpp_pangde', 'ol_pangde', 're_pangde', 'pangde'],
                            pangtong: ['hpp_pangtong', 'ol_pangtong', 're_pangtong', 'pangtong'],
                            panjun: ['hpp_panjun', 'panjun'],
                            // Q
                            qinmi: ['hpp_qinmi', 'qinmi'],
                            quyi: ['hpp_quyi', 'quyi', 're_quyi'],
                            // S
                            shamoke: ['hpp_shamoke', 'shamoke'],
                            simayi: ['hpp_simayi', 're_simayi', 'simayi'],
                            sunce: ['hpp_sunce', 're_sunben', 're_sunce', 'sunce'],
                            sundeng: ['hpp_sundeng', 'sundeng', 're_sundeng', 'ns_sundeng'],
                            sunhao: ['hpp_sunhao', 'sunhao'],
                            sunjian: ['hpp_sunjian', 'ol_sunjian', 're_sunjian', 'sunjian'],
                            sunliang: ['hpp_sunliang', 'sunliang'],
                            sunluban: ['hpp_sunluban', 're_sunluban', 'xin_sunluban', 'sunluban'],
                            sunluyu: ['hpp_sunluyu', 'sunluyu', 're_sunluyu'],
                            sunqian: ['hpp_sunqian', 'sunqian'],
                            sunquan: ['hpp_sunquan', 're_sunquan', 'sunquan'],
                            sunshangxiang: ['hpp_sunshangxian', 're_sunshangxiang', 'sunshangxiang'],
                            // T
                            taishici: ['hpp_taishici', 're_taishici', 'taishici'],
                            tangji: ['hpp_tangji', 'tangji'],
                            // W
                            wangji: ['hpp_wangji', 'wangji'],
                            wangping: ['hpp_wangping', 'wangping'],
                            wangrong: ['hpp_wangrong', 'wangrong', 'ol_wangrong'],
                            wanniangongzhu: ['hpp_wanniangongzhu', 'wanniangongzhu'],
                            weiyan: ['hpp_weiyan', 'ol_weiyan', 're_weiyan', 'weiyan'],
                            wangyi: ['hpp_wangyi', 're_wangyi', 'wangyi', 'old_wangyi'],
                            wenqin: ['hpp_wenqin', 'wenqin', 'pe_wenqin'],
                            wuguotai: ['hpp_wuguotai', 'wuguotai', 'xin_wuguotai', 're_wuguotai'],
                            wuxian: ['hpp_wuxian', 'wuxian'],
                            wuyi: ['hpp_wuyi', 're_wuyi', 'xin_wuyi', 'wuyi'],
                            // X
                            xiahouba: ['hpp_xiahouba', 'xiahouba', 'tw_xiahouba'],
                            xiahoudun: ['hpp_xiahoudun', 're_xiahoudun', 'xin_xiahoudun', 'xiahoudun'],
                            xiahoujie: ['hpp_xiahoujie', 'xiahoujie'],
                            xiahoulingnv: ['hpp_xiahoulingnv', 'xiahoulingnv'],
                            xiahoushi: ['hpp_xiahoushi', 'xiahoushi', 're_xiahoushi', 'sb_xiahoushi'],
                            xiahouyuan: ['hpp_xiahouyuan', 'ol_xiahouyuan', 're_xiahouyuan', 'xiahouyuan'],
                            xiaoqiao: ['hpp_xiaoqiao', 'ol_xiaoqiao', 're_xiaoqiao', 'xiaoqiao'],
                            xinxianying: ['hpp_xinxianying', 're_xinxianying', 'xinxianying', 'ol_xinxianying', 'sp_xinxianying'],
                            xizhicai: ['hpp_xizhicai', 'xizhicai'],
                            xuhuang: ['hpp_xuhuang', 'ol_xuhuang', 're_xuhuang', 'xuhuang'],
                            xurong: ['hpp_xurong', 'xurong'],
                            xusheng: ['hpp_xusheng', 'xin_xusheng', 're_xusheng', 'xusheng', 'old_xusheng'],
                            xushi: ['hpp_xushi', 'xushi'],
                            xushu: ['hpp_xushu', 'dc_xushu', 're_xushu', 'xin_xushu', 'xushu'],
                            xunyou: ['hpp_xunyou', 're_xunyou', 'xunyou'],
                            xunyu: ['hpp_xunyu', 'ol_xunyu', 're_xunyu', 'xunyu'],
                            xuyou: ['hpp_xuyou', 'sp_xuyou', 'xuyou'],
                            xuzhu: ['hpp_xuzhu', 're_xuzhu', 'xuzhu'],
                            // Y
                            yanfuren: ['hpp_yanfuren', 'yanfuren'],
                            yangxiu: ['hpp_yangxiu', 'yangxiu'],
                            yanjun: ['hpp_yanjun', 'yanjun'],
                            yanwen: ['hpp_yanliangwenchou', 're_yanwen', 'yanwen'],
                            yanyan: ['hpp_yanyan', 'yanyan'],
                            yinfuren: ['hpp_yinfuren', 'yinfuren'],
                            re_yuanshao: ['hpp_yuanshao', 'ol_yuanshao', 're_yuanshao', 'xin_yuanshao'],
                            yuanshu: ['hpp_yuanshu', 'yl_yuanshu', 'yuanshu', 're_yuanshu', 'old_yuanshu', 'ol_yuanshu'],
                            yuji: ['hpp_yuji', 'xin_yuji', 're_yuji', 'yuji'],
                            yujin: ['hpp_yujin', 'yujin_yujin', 'ol_yujin', 'xin_yujin', 'yujin'],
                            // Z
                            zhangbao: ['hpp_zhangbao', 'zhangbao', 're_zhangbao'],
                            zhangchunhua: ['hpp_zhangchunhua', 're_zhangchunhua', 'zhangchunhua', 'mini_zhangchunhua'],
                            zhangfei: ['hpp_zhangfei', 're_zhangfei', 'tw_zhangfei', 'xin_zhangfei', 'old_zhangfei', 'zhangfei'],
                            zhanghe: ['hpp_zhanghe', 're_zhanghe', 'zhanghe'],
                            zhangji: ['hpp_zhangji', 'zhangji', 'ns_zhangji'],
                            zhangjiao: ['hpp_zhangjiao', 're_zhangjiao', 'sp_zhangjiao', 'zhangjiao'],
                            zhangliang: ['hpp_zhangliang', 're_zhangliang', 'zhangliang'],
                            zhangliao: ['hpp_zhangliao', 're_zhangliao', 'zhangliao'],
                            zhangsong: ['hpp_zhangsong', 'zhangsong'],
                            zhangxingcai: ['hpp_zhangxingcai', 'zhangxingcai', 'old_zhangxingcai'],
                            zhangxiu: ['hpp_zhangxiu', 'zhangxiu'],
                            zhangyao: ['hpp_zhangyao', 'zhangyao'],
                            zhangzhang: ['hpp_zhangzhaozhanghong', 're_zhangzhang', 'zhangzhang'],
                            zhaoxiang: ['hpp_zhaoxiang', 'zhaoxiang', 'tw_zhaoxiang'],
                            zhaoyun: ['hpp_zhaoyun', 're_zhaoyun', 'old_zhaoyun', 'zhaoyun'],
                            zhenji: ['hpp_zhenji', 're_zhenji', 'zhenji'],
                            zhonghui: ['hpp_zhonghui', 're_zhonghui', 'xin_zhonghui', 'zhonghui', 'old_zhonghui'],
                            zhongyao: ['hpp_zhongyao', 'zhongyao'],
                            zhoucang: ['hpp_zhoucang', 're_zhoucang', 'xin_zhoucang', 'zhoucang'],
                            zhoufang: ['hpp_zhoufang', 'zhoufang'],
                            zhoufei: ['hpp_zhoufei', 'zhoufei'],
                            zhoutai: ['hpp_zhoutai', 'zhoutai', 'xin_zhoutai', 'old_zhoutai'],
                            zhouyu: ['hpp_zhouyu', 're_zhouyu', 'zhouyu'],
                            zhugeguo: ['hpp_zhugeguo', 'tw_zhugeguo', 'zhugeguo'],
                            zhugejin: ['hpp_zhugejin', 'zhugejin'],
                            zhugeke: ['hpp_zhugeke', 'zhugeke'],
                            zhugeliang: ['hpp_zhugeliang', 're_zhugeliang', 'zhugeliang'],
                            zhugezhan: ['hpp_zhugezhan', 'zhugezhan', 'old_zhugezhan'],
                            zhuhuan: ['hpp_zhuhuan', 're_zhuhuan', 'xin_zhuhuan', 'zhuhuan', 'old_zhuhuan'],
                            zhuran: ['hpp_zhuran', 're_zhuran', 'xin_zhuran', 'zhuran', 'old_zhuran'],
                            zhurong: ['hpp_zhurong', 're_zhurong', 'ol_zhurong', 'zhurong'],
                            zhuzhi: ['hpp_zhuhzi', 're_zhuzhi', 'zhuzhi', 'xin_zhuzhi', 'old_zhuzhi'],
                            zumao: ['hpp_zumao', 'zumao', 'tw_zumao'],
                            zuoci: ['hpp_zuoci', 're_zuoci', 'zuoci'],
                            // SP
                            sp_caiwenji: ['hpp_sp_caiwenji', 'sp_caiwenji'],
                            jsp_caoren: ['hpp_sp_caoren', 'jsp_caoren'],
                            sp_daqiao: ['hpp_sp_daqiao', 'sp_daqiao'],
                            sp_diaochan: ['hpp_sp_diaochan', 'sp_diaochan'],
                            jsp_guanyu: ['hpp_sp_guanyu', 'jsp_guanyu', 'dc_jsp_guanyu', 'jsrg_guanyu'],
                            jsp_huangyueying: ['hpp_sp_huangyueying', 'jsp_huangyueying', 're_jsp_huangyueying'],
                            sp_jiangwei: ['hpp_sp_jiangwei', 'sp_jiangwei'],
                            sp_jiaxu: ['hpp_sp_jiaxu', 'sp_jiaxu', 'dc_sp_jiaxu', 'yj_jiaxu'],
                            sp_machao: ['hpp_sp_machao', 'sp_machao', 'old_machao'],
                            sp_menghuo: ['hpp_sp_menghuo', 'sp_menghuo'],
                            sp_pangde: ['hpp_sp_pangde', 'sp_pangde'],
                            re_jsp_pangtong: ['hpp_sp_pangtong', 're_jsp_pangtong', 'sp_pangtong'],
                            sp_sunshangxiang: ['hpp_sp_sunshangxiang', 'sp_sunshangxiang'],
                            sp_taishici: ['hpp_sp_taishici', 're_sp_taishici', 'sp_taishici'],
                            sp_zhangfei: ['hpp_sp_zhangfei', 'sp_zhangfei'],
                            sp_zhanghe: ['hpp_sp_zhanghe', 'sp_zhanghe'],
                            sp_zhangliao: ['hpp_sp_zhangliao', 'sp_zhangliao', 'yj_zhangliao', 'jsrg_zhangliao'],
                            sp_zhaoyun: ['hpp_sp_zhaoyun', 'sp_zhaoyun', 'jsp_zhaoyun'],
                            sp_zhugeliang: ['hpp_sp_zhugeliang', 'ol_sp_zhugeliang', 're_sp_zhugeliang', 'sp_zhugeliang'],
                            // 神
                            shen_caocao: ['hpp_shen_caocao', 'shen_caocao'],
                            shen_ganning: ['hpp_shen_ganning', 'shen_ganning'],
                            shen_guanyu: ['hpp_shen_guanyu', 'shen_guanyu', 'tw_shen_guanyu'],
                            shen_guojia: ['hpp_shen_guojia', 'shen_guojia'],
                            shen_jiangwei: ['hpp_shen_jiangwei', 'shen_jiangwei'],
                            shen_liubei: ['hpp_shen_liubei', 'shen_liubei'],
                            shen_luxun: ['hpp_shen_luxun', 'shen_luxun'],
                            shen_lvbu: ['hpp_shen_lvbu', 'shen_lvbu'],
                            shen_lvmeng: ['hpp_shen_lvmeng', 'tw_shen_lvmeng', 'shen_lvmeng'],
                            shen_simayi: ['hpp_shen_simayi', 'shen_simayi'],
                            shen_sunce: ['hpp_shen_sunce', 'shen_shunce'],
                            shen_sunquan: ['hpp_shen_sunquan', 'shen_sunquan', 'junk_sunquan'],
                            shen_taishici: ['hpp_shen_taishici', 'shen_taishici'],
                            shen_xunyu: ['hpp_shen_xunyu', 'shen_xunyu'],
                            shen_zhangfei: ['hpp_shen_zhangfei', 'shen_zhangfei'],
                            shen_zhangjiao: ['hpp_shen_zhangjiao', 'shen_zhangjiao'],
                            shen_zhangliao: ['hpp_shen_zhangliao', 'ol_zhangliao', 'shen_zhangliao'],
                            shen_zhaoyun: ['hpp_shen_zhaoyun', 'shen_zhaoyun', 'boss_zhaoyun'],
                            shen_zhenji: ['hpp_shen_zhenji', 'shen_zhenji'],
                            shen_zhouyu: ['hpp_shen_zhouyu', 'shen_zhouyu'],
                            shen_zhugeliang: ['hpp_shen_zhugelaing', 'shen_zhugeliang'],
                        },
                        characterFilter: {
                        },
                        card: {
                            hpp_yanxiao_card: {
                                type: 'delay',
                                judge: 0,
                                effect: function () { },
                                ai: {
                                    basic: {
                                        order: 1,
                                        useful: 1,
                                        value: 8,
                                    },
                                    result: {
                                        target: 1
                                    },
                                }
                            },
                            hpp_lingren_basic: {
                                image: 'ext:欢乐三国杀/image/card/lingren_basic.png',
                                fullimage: true,
                            },
                            hpp_lingren_trick: {
                                image: 'ext:欢乐三国杀/image/card/lingren_trick.png',
                                fullimage: true,
                            },
                            hpp_lingren_equip: {
                                image: 'ext:欢乐三国杀/image/card/lingren_equip.png',
                                fullimage: true,
                            },
                            hpp_ruyijingubang: {
                                fullimage: true,
                                derivation: 'hpp_sunwukong',
                                type: 'equip',
                                subtype: 'equip1',
                                ai: { basic: { equipValue: 4399 } },
                                skills: ['hpp_ruyijingubang', 'hpp_ruyijingubang2'],
                            },
                        },
                        skill: {
                            // 卑弥呼
                            hpp_zongkui: {
                                audio: 'zongkui',
                                trigger: { global: 'phaseBefore', player: ['phaseBegin', 'enterGame'] },
                                filter: function (event, player, name) {
                                    if (name == 'phaseBefore' && game.phaseNumber > 0) return false;
                                    return game.hasPlayer(function (current) {
                                        if ((name == 'phaseBefore' || name == 'enterGame') && !current.isMinHp()) return false;
                                        return current != player && !current.hasMark('zongkui_mark');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    event.logged = false;
                                    if (event.triggername == 'phaseBefore' || event.triggername == 'enterGame') {
                                        player.logSkill('hpp_zongkui');
                                        event.logged = true;
                                    }
                                    var targets = game.filterPlayer(function (current) {
                                        if ((event.triggername == 'phaseBefore' || event.triggername == 'enterGame') && !current.isMinHp()) return false;
                                        return current != player && !current.hasMark('zongkui_mark');
                                    });
                                    if ((event.triggername == 'phaseBefore' || event.triggername == 'enterGame') && targets.length == 1) {
                                        event._result = { bool: true, targets: targets };
                                    }
                                    else {
                                        var next = player.chooseTarget(event.logged ? '请选择【纵傀】的目标' : get.prompt('zongkui'), '令一名' + ((event.triggername == 'phaseBefore' || event.triggername == 'enterGame') ? '体力值最小的' : '') + '其他角色获得“傀”标记', function (card, player, target) {
                                            if (_status.event.round && !target.isMinHp()) return false;
                                            return target != player && !target.hasMark('zongkui_mark');
                                        }).set('ai', function (target) {
                                            var num = target.isMinHp() ? 0.5 : 1;
                                            return num * get.threaten(target);
                                        }).set('round', event.triggername == 'phaseBefore' || event.triggername == 'enterGame');
                                        if (event.triggername == 'phaseBefore' || event.triggername == 'enterGame') next.set('forced', true);
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        if (!event.logged) player.logSkill('hpp_zongkui', target);
                                        else player.line(target);
                                        target.addMark('zongkui_mark', 1);
                                        game.delayx();
                                    }
                                },
                            },
                            hpp_guju: {
                                audio: 'guju',
                                inherit: 'guju',
                                content: function () {
                                    player.draw();
                                },
                            },

                            // 步练师
                            hpp_anxu: {
                                audio: 'anxu',
                                trigger: { player: ['phaseUseBegin', 'phaseUseEnd'] },
                                direct: true,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player /* && current.isMaxHandcard() */ && current.countCards('h');
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_anxu'), function (card, player, target) {
                                        return target.isMaxHandcardNotMe(player) && target.countCards('h') && player != target;
                                    }).set('ai', function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (target.hasSkill('tuntian')) return att / 10;
                                        return -att;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_anxu', target);
                                        player.gainPlayerCard(target, 'h', true);
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 2'
                                    if (get.suit(result.cards[0]) == 'spade') {
                                        player.line(target);
                                        target.draw();
                                    }
                                },
                            },

                            // 步骘
                            hpp_hongde: {
                                group: 'hpp_hongde_hongde',
                                audio: 'hongde',
                                trigger: {
                                    player: 'loseAfter',
                                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                },
                                frequent: true,
                                filter: function (event, player) {
                                    if (event.name == 'gain' && event.player == player) return false;
                                    var evt = event.getl(player);
                                    return evt && evt.cards2 && evt.cards2.length > 0;
                                },
                                usable: 2,
                                frequent: true,
                                content: function () {
                                    player.draw();
                                },
                                subSkill: {
                                    hongde: {
                                        trigger: { player: 'gainAfter' },
                                        filter: function (event, player) {
                                            return event.cards && event.cards.length > 1;
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('hpp_hongde'), '令一名其他角色摸一张牌', lib.filter.notMe).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.attitude(player, target);
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0]
                                                player.logSkill('hpp_hongde', target);
                                                target.draw();
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_dingpan: {
                                audio: 'dingpan',
                                inherit: 'dingpan',
                                filter: function (event, player) {
                                    return (player.getStat().skill.hpp_dingpan || 0) < game.countGroup();
                                },
                            },
                            hpp_dingpan2: { charlotte: true, onremove: true },

                            // 蔡夫人
                            hpp_qieting: {
                                audio: 'reqieting',
                                trigger: { global: 'phaseEnd' },
                                filter: function (event, player) {
                                    if (event.player == player) return false;
                                    return event.player.countCards('h') > player.countCards('h') || !event.player.getHistory('sourceDamage', function (evt) {
                                        return evt.player != event.player;
                                    }).length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    event.logged = false;
                                    if (trigger.player.countCards('h') <= player.countCards('h')) event.goto(2);
                                    'step 1'
                                    player.logSkill('hpp_qieting', trigger.player);
                                    player.draw();
                                    if (trigger.player.getHistory('sourceDamage', function (evt) {
                                        return evt.player != trigger.player;
                                    }).length) event.finish();
                                    else event.logged = true;
                                    'step 2'
                                    var list = ['摸一张牌'], target = trigger.player, str = get.translation(target);
                                    event.target = target;
                                    event.addIndex = 0;
                                    if (target.countCards('h') > 0) list.push('观看' + str + '的两张手牌并获得其中一张');
                                    else event.addIndex++;
                                    if (target.countCards('e', function (card) {
                                        return player.canEquip(card);
                                    }) > 0) list.push('将' + str + '装备区内的一张牌移动至自己的装备区');
                                    player.chooseControl('cancel2').set('choiceList', list).set('prompt', get.prompt('hpp_qieting', target)).set('ai', function () {
                                        var evt = _status.event.getParent();
                                        if (get.attitude(evt.player, evt.target) > 0) return 0;
                                        var val = evt.target.hasSkillTag('noe') ? 6 : 0;
                                        if (evt.target.countCards('e', function (card) {
                                            return evt.player.canEquip(card) && get.value(card, evt.target) > val && get.effect(evt.player, card, evt.player, evt.player) > 0;
                                        }) > 0) return 2 - evt.addIndex;
                                        if (evt.target.countCards('h') > 0) return 1;
                                        return 0;
                                    });
                                    'step 3'
                                    if (result.control != 'cancel2') {
                                        if (!event.logged) player.logSkill('hpp_qieting', target);
                                        else player.line(target);
                                        if (result.index == 0) {
                                            player.draw();
                                            event.finish();
                                        }
                                        else if (result.index + event.addIndex == 1) {
                                            player.choosePlayerCard(target, 'h', 2, true);
                                            player.addExpose(0.2);
                                            event.goto(5);
                                        }
                                        else {
                                            player.addExpose(0.1);
                                            player.choosePlayerCard(target, 'e', true).set('filterButton', function (button) {
                                                return _status.event.player.canEquip(button.link);
                                            }).set('ai', function (button) {
                                                var player = _status.event.player;
                                                return get.effect(player, button.link, player, player);
                                            });
                                        }
                                    }
                                    else event.finish();
                                    'step 4'
                                    if (result.bool) {
                                        var card = result.cards[0];
                                        target.$give(card, player, false);
                                        game.delay(0.5);
                                        player.equip(card);
                                    }
                                    event.finish();
                                    'step 5'
                                    if (result.bool) player.chooseButton(['选择获得一张牌', result.cards], true);
                                    else event.finish();
                                    'step 6'
                                    if (result.bool) {
                                        var card = result.links[0];
                                        if (lib.filter.canBeGained(card, player, target)) player.gain(card, target, 'giveAuto', 'bySelf');
                                        else game.log('但', card, '不能被', player, '获得！');
                                    }
                                },
                            },
                            hpp_xianzhou: {
                                unique: true,
                                limited: true,
                                audio: 'rexianzhou',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                filterCard: true,
                                position: 'h',
                                selectCard: [1, Infinity],
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (ui.selected.cards.length >= player.hp) return 0;
                                    return 7 - get.value(card);
                                },
                                filterTarget: lib.filter.notMe,
                                discard: false,
                                lose: false,
                                delay: false,
                                skillAnimation: true,
                                animationColor: 'gray',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_xianzhou');
                                    player.give(cards, target);
                                    player.recover(cards.length)
                                    'step 1'
                                    var list = game.filterPlayer(function (current) {
                                        return target.inRange(current);
                                    });
                                    if (list.length) {
                                        var max = Math.min(list.length, cards.length);
                                        player.chooseTarget(true, [1, max], '对至多' + get.cnNumber(max) + '名范围内的角色各造成1点伤害', function (card, player, target) {
                                            return _status.event.list.contains(target);
                                        }).set('list', list).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.damageEffect(target, player, player);
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.line(targets, 'green');
                                        for (var i of targets) i.damage('nocard');
                                    }
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        target: 1,
                                        player: function (player) {
                                            var bool = true, players = game.filterPlayer();
                                            for (var i = 0; i < players.length; i++) {
                                                if (players[i] != player && get.attitude(player, players[i]) > 2 && get.attitude(players[i], player) > 2) {
                                                    bool = false; break;
                                                }
                                            }
                                            if (bool) return -10;
                                            if (player.hp == 1) return 1;
                                            return -10;
                                        }
                                    },
                                },
                            },

                            // 蔡文姬
                            hpp_beige: {
                                audio: 'beige',
                                trigger: { global: 'damageEnd' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && event.source && event.player.isIn() && player.countCards('he');
                                },
                                direct: true,
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('he', get.prompt2('hpp_beige', trigger.player)).set('ai', function (card) {
                                        var player = _status.event.player;
                                        var target = _status.event.list[0];
                                        var source = _status.event.list[1];
                                        var att1 = get.attitude(player, target);
                                        var att2 = get.attitude(player, source);
                                        switch (get.suit(card)) {
                                            case 'heart': case 'diamond':
                                                if (att1 > 0) return 10 - get.value(card);
                                                return 0;
                                                break;
                                            case 'club':
                                                if (att2 < 0) return (7 - get.value(card)) * (source.countCards('he') ? 1 : 0);
                                                return 0;
                                                break;
                                            case 'spade':
                                                if (att2 > 0 && source.isTurnedOver()) return 20 - get.value(card);
                                                if (att2 < 0 && !source.isTurnedOver()) return 10 - get.value(card);
                                                return 0;
                                                break;
                                        }
                                    }).setHiddenSkill('hpp_beige').set('list', [trigger.player, trigger.source]).logSkill = 'hpp_beige';
                                    'step 1'
                                    if (result.bool) {
                                        switch (get.suit(result.cards[0])) {
                                            case 'heart': case 'diamond':
                                                player.line(trigger.player);
                                                trigger.player.recover();
                                                trigger.player.draw(2);
                                                break;
                                            case 'club':
                                                player.line(trigger.source);
                                                trigger.source.chooseToDiscard('he', 2, true);
                                                break;
                                            case 'spade':
                                                player.line(trigger.source);
                                                trigger.source.turnOver();
                                                break;
                                        }
                                    }
                                },
                                ai: { expose: 0.25 },
                            },

                            // 曹昂
                            hpp_kangkai: {
                                audio: 'kaikang',
                                trigger: { global: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && get.distance(player, event.target) <= 1;
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    if (trigger.target != player && player.countMark('hpp_kangkai') < 2) {
                                        player.chooseCard('he', '慷忾：是否交给' + get.translation(trigger.target) + '一张牌？').set('ai', function (card) {
                                            if (get.position(card) == 'e') return -1;
                                            if (card.name == 'shan' && get.attitude(player, trigger.target) > 0) return 1;
                                            if (get.type(card) == 'equip' && get.attitude(player, trigger.target) > 0) return 0.5;
                                            if (card.name == 'du' && get.attitude(player, trigger.target) < 0) return 5;
                                            return 0;
                                        });
                                    }
                                    else event.finish();
                                    'step 1'
                                    if (result.bool) {
                                        player.addTempSkill('hpp_kangkai2');
                                        player.addMark('hpp_kangkai2', 1, false);
                                        trigger.target.gain(result.cards, player, 'give');
                                        game.delayx();
                                        event.card = result.cards[0];
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (trigger.target.getCards('h').contains(card) && get.type(card) == 'equip') trigger.target.chooseUseTarget(card);
                                },
                            },
                            hpp_kangkai2: {
                                charlotte: true,
                                onremove: true,
                            },

                            // 曹操
                            hpp_jianxiong: {
                                audio: "rejianxiong",
                                audioname: ['shen_caopi'],
                                trigger: {
                                    player: "damageEnd",
                                },
                                content: function () {
                                    'step 0'
                                    event.count = trigger.num;
                                    'step 1'
                                    event.count--;
                                    player.chooseControl('摸一张牌并获得造成伤害的牌', '摸两张').set('prompt').set('ai', function (event, player) {
                                        var value = 0;
                                        if (get.itemtype(trigger.cards) == 'cards' && get.position(trigger.cards[0], true) == 'o') {
                                            for (i of trigger.cards) {
                                                value += get.value(i);
                                            }
                                        }
                                        if (value > 3) {
                                            return '摸一张牌并获得造成伤害的牌';
                                        } else {
                                            return '摸两张';
                                        }
                                    });
                                    "step 2"
                                    if (result.control == '摸一张牌并获得造成伤害的牌') {
                                        if (get.itemtype(trigger.cards) == 'cards' && get.position(trigger.cards[0], true) == 'o') {
                                            player.gain(trigger.cards, "gain2");
                                        }
                                        player.draw('nodelay');
                                    } else {
                                        player.draw(2, 'nodelay');
                                    }
                                    'step 3'
                                    if (event.count > 0) {
                                        event.goto(1);
                                    }
                                },
                                ai: {
                                    maixie: true,
                                    "maixie_hp": true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player.hasSkillTag('jueqing', false, target)) return [1, -1];
                                            if (get.tag(card, 'damage') && player != target) {
                                                var cards = card.cards, evt = _status.event;
                                                if (evt.player == target && card.name == 'damage' && evt.getParent().type == 'card') cards = evt.getParent().cards.filterInD();
                                                if (target.hp <= 1) return;
                                                if (get.itemtype(cards) != 'cards') return;
                                                for (var i of cards) {
                                                    if (get.name(i, target) == 'tao') return [1, 5];
                                                }
                                                if (get.value(cards, target) >= (7 + target.getDamagedHp())) return [1, 3];
                                                return [1, 0.6];
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_hujia: {
                                audio: 'hujia',
                                inherit: 'hujia',
                                filter: function (event, player) {
                                    if (event.responded) return false;
                                    if (player.storage.hujiaing) return false;
                                    if (!player.hasZhuSkill('hpp_hujia')) return false;
                                    if (!event.filterCard({ name: 'shan' }, player, event)) return false;
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.group == 'wei';
                                    });
                                },
                                ai: {
                                    respondShan: true,
                                    skillTagFilter: function (player) {
                                        if (player.storage.hujiaing) return false;
                                        if (!player.hasZhuSkill('hpp_hujia')) return false;
                                        return game.hasPlayer(function (current) {
                                            return current != player && current.group == 'wei';
                                        });
                                    },
                                },
                                group: 'hpp_hujia_draw',
                                subSkill: {
                                    draw: {
                                        trigger: { global: ['useCard', 'respond'] },
                                        usable: 1,
                                        direct: true,
                                        filter: function (event, player) {
                                            return event.getParent(2).name == 'hpp_hujia' && event.card.name == 'shan' && event.player != player &&
                                                event.player.group == 'wei' && event.player.isIn() && player.hasZhuSkill('hpp_hujia');
                                        },
                                        content: function () {
                                            'step 0'
                                            trigger.player.chooseBool('护驾：是否令' + get.translation(player) + '摸一张牌？').set('ai', function () {
                                                var evt = _status.event;
                                                return get.attitude(evt.player, evt.getParent().player) > 0;
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_hujia');
                                                trigger.player.line(player, 'fire');
                                                player.draw();
                                            }
                                            else player.storage.counttrigger.hpp_hujia_draw--;
                                        },
                                    },
                                },
                            },

                            // 曹冲
                            hpp_chengxiang: {
                                trigger: { player: 'damageEnd' },
                                forced: true,
                                audio: 'chengxiang',
                                content: function () {
                                    "step 0"
                                    event.cards = get.cards(4);
                                    game.cardsGotoOrdering(event.cards);
                                    event.videoId = lib.status.videoId++;
                                    game.broadcastAll(function (player, id, cards, num) {
                                        var str;
                                        if (player == game.me && !_status.auto) {
                                            str = '称象：选择任意张点数不大于' + num + '的牌';
                                        }
                                        else {
                                            str = '称象';
                                        }
                                        var dialog = ui.create.dialog(str, cards);
                                        dialog.videoId = id;
                                    }, player, event.videoId, event.cards, event.name == 'hpp_chengxiang' ? 13 : 12);
                                    event.time = get.utc();
                                    game.addVideo('showCards', player, ['称象', get.cardsInfo(event.cards)]);
                                    game.addVideo('delay', null, 2);
                                    "step 1"
                                    var next = player.chooseButton([0, 4]);
                                    next.set('dialog', event.videoId);
                                    next.set('filterButton', function (button) {
                                        var num = 0
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            num += get.number(ui.selected.buttons[i].link);
                                        }
                                        return (num + get.number(button.link) <= _status.event.maxNum);
                                    });
                                    next.set('maxNum', event.name == 'hpp_chengxiang' ? 13 : 12);
                                    next.set('ai', function (button) {
                                        return get.value(button.link, _status.event.player);
                                    });
                                    "step 2"
                                    if (result.bool && result.links) {
                                        var cards2 = [];
                                        for (var i = 0; i < result.links.length; i++) {
                                            cards2.push(result.links[i]);
                                            cards.remove(result.links[i]);
                                        }
                                        event.cards2 = cards2;
                                    }
                                    else {
                                        event.finish();
                                    }
                                    var time = 1000 - (get.utc() - event.time);
                                    if (time > 0) {
                                        game.delay(0, time);
                                    }
                                    "step 3"
                                    game.broadcastAll('closeDialog', event.videoId);
                                    var cards2 = event.cards2;
                                    player.gain(cards2, 'log', 'gain2');
                                },
                                ai: {
                                    maixie: true,
                                    maixie_hp: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'damage')) {
                                                if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                if (!target.hasFriend()) return;
                                                if (target.hp >= 4) return [1, 2];
                                                if (target.hp == 3) return [1, 1.5];
                                                if (target.hp == 2) return [1, 0.5];
                                            }
                                        }
                                    }
                                }
                            },

                            // 曹华
                            hpp_caiyi: {
                                audio: 'caiyi',
                                zhuanhuanji: true,
                                trigger: { player: 'phaseJieshuBegin' },
                                direct: true,
                                onremove: function (player) {
                                    delete player.storage.hpp_caiyi;
                                    delete player.storage.hpp_caiyi_info;
                                },
                                filter: function (event, player) {
                                    if (player.storage.hpp_caiyi_info) {
                                        if (player.storage.hpp_caiyi_info[player.storage.hpp_caiyi ? 1 : 0].length >= 4) return false;
                                    }
                                    return true;
                                },
                                choices: [[
                                    '回复X点体力',
                                    '摸X张牌',
                                    '复原武将牌',
                                    '随机执行一个已经移除过的选项',
                                ], [
                                    '受到X点伤害',
                                    '弃置X张牌',
                                    '翻面并横置',
                                    '随机执行一个已经移除过的选项',
                                ]],
                                filterx: [[
                                    (player) => player.isDamaged(),
                                    () => true,
                                    (player) => player.isTurnedOver() || player.isLinked(),
                                    () => true,
                                ], [
                                    () => true,
                                    (player) => player.hasCard(function (card) {
                                        return lib.filter.cardDiscardable(card, player, 'hpp_caiyi');
                                    }, 'he'),
                                    (player) => !player.isTurnedOver() || !player.isLinked(),
                                    () => true,
                                ]],
                                content: function () {
                                    'step 0'
                                    if (!player.storage.hpp_caiyi_info) player.storage.hpp_caiyi_info = [[], []];
                                    var index = player.storage.hpp_caiyi ? 1 : 0;
                                    event.index = index;
                                    var list = player.storage.hpp_caiyi_info[index], choices = lib.skill.hpp_caiyi.choices[index], numbers = ['⒈', '；⒉', '；⒊', '；⒋'];
                                    event.num = 4 - list.length;
                                    var str = '令一名角色选择执行其中一项：';
                                    for (var i = 0; i < 4; i++) {
                                        if (list.contains(i)) continue;
                                        if (i == 3 && !list.length) continue;
                                        str += numbers.shift();
                                        str += choices[i];
                                    }
                                    str += '。';
                                    str = str.replace(/X/g, get.cnNumber(event.num));
                                    player.chooseTarget(get.prompt('hpp_caiyi') + '（当前状态：' + (index ? '阴' : '阳') + '）', str).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return (player.storage.hpp_caiyi ? -1 : 1) * get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_caiyi', target);
                                        player.changeZhuanhuanji('hpp_caiyi');
                                        event.goto(event.index == 1 ? 5 : 2);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var list = [], str = get.cnNumber(num);
                                    var choiceList = [
                                        '回复' + str + '点体力。',
                                        '摸' + str + '张牌。',
                                        '将武将牌翻至正面且重置。',
                                        '随机执行一个已经被移除的选项。',
                                    ];
                                    var storage = player.storage.hpp_caiyi_info[event.index];
                                    for (var i = 0; i < 4; i++) {
                                        if (storage.contains(i)) {
                                            choiceList[i] = ('<span style="text-decoration:line-through; opacity:0.5; ">' + choiceList[i] + '</span>');
                                        }
                                        else if (!lib.skill.hpp_caiyi.filterx[event.index][i](target) || (i == 3 && !storage.length)) {
                                            choiceList[i] = ('<span style="opacity:0.5;">' + choiceList[i] + '</span>');
                                        }
                                        else list.push('选项' + get.cnNumber(i + 1, true))
                                    }
                                    if (!list.length) {
                                        event.finish();
                                        return;
                                    }
                                    target.chooseControl(list).set('choiceList', choiceList).set('ai', function () {
                                        var evt = _status.event, player = evt.player;
                                        var list = evt.controls.slice(0);
                                        var gett = function (choice) {
                                            if (choice == 'cancel2') return 0.1;
                                            var max = 0, func = {
                                                选项一: function (current) {
                                                    max = get.recoverEffect(current, player, player) * Math.min(evt.getParent().num, player.getDamagedHp());
                                                },
                                                选项二: function (target) {
                                                    max = get.effect(target, { name: 'wuzhong' }, player, player) / 2 * evt.getParent().num;
                                                },
                                                选项三: function (target) {
                                                    if (player.isTurnedOver()) max += 25;
                                                    if (player.isLinked()) max += get.effect(player, { name: 'tiesuo' }, player, player);
                                                },
                                                选项四: function (target) {
                                                    max = 3;
                                                },
                                            }[choice];
                                            func(player);
                                            return max;
                                        };
                                        return list.sort(function (a, b) {
                                            return gett(b) - gett(a);
                                        })[0];
                                    });
                                    'step 3'
                                    var index2 = ['选项一', '选项二', '选项三', '选项四'].indexOf(result.control);
                                    player.storage.hpp_caiyi_info[event.index].push(index2);
                                    if (index2 == 3) {
                                        var list = player.storage.hpp_caiyi_info[event.index].filter(function (i) {
                                            return i != 3 && lib.skill.hpp_caiyi.filterx[event.index][i](target);
                                        });
                                        if (!list.length) {
                                            event.finish();
                                            return;
                                        }
                                        index2 = list.randomGet();
                                    }
                                    switch (index2) {
                                        case 0:
                                            target.recover(num);
                                            break;
                                        case 1:
                                            target.draw(num);
                                            break;
                                        case 2:
                                            !target.isTurnedOver() || target.turnOver();
                                            break;
                                    }
                                    if (index2 != 2) event.finish();
                                    'step 4'
                                    !target.isLinked() || target.link();
                                    event.finish();
                                    'step 5'
                                    var list = [], str = get.cnNumber(num);
                                    var choiceList = [
                                        '受到' + str + '点伤害。',
                                        '弃置' + str + '张牌。',
                                        '将武将牌翻至背面并横置。',
                                        '随机执行一个已经被移除的选项。',
                                    ];
                                    var storage = player.storage.hpp_caiyi_info[event.index];
                                    for (var i = 0; i < 4; i++) {
                                        if (storage.contains(i)) {
                                            choiceList[i] = ('<span style="text-decoration:line-through; opacity:0.5; ">' + choiceList[i] + '</span>');
                                        }
                                        else if (!lib.skill.hpp_caiyi.filterx[event.index][i](target) || (i == 3 && !storage.length)) {
                                            choiceList[i] = ('<span style="opacity:0.5;">' + choiceList[i] + '</span>');
                                        }
                                        else list.push('选项' + get.cnNumber(i + 1, true))
                                    }
                                    if (!list.length) {
                                        event.finish();
                                        return;
                                    }
                                    target.chooseControl(list).set('choiceList', choiceList).set('ai', function () {
                                        var evt = _status.event, player = evt.player;
                                        var list = evt.controls.slice(0);
                                        var gett = function (choice) {
                                            if (choice == 'cancel2') return 0.1;
                                            var max = 0, func = {
                                                选项一: function (current) {
                                                    max = get.effect(current, { name: 'damage' }, player, player) * evt.getParent().num;
                                                },
                                                选项二: function (target) {
                                                    max = get.effect(target, { name: 'guohe_copy2' }, player, player) * Math.min(player.countCards('he'), evt.getParent().num);
                                                },
                                                选项三: function (target) {
                                                    if (!player.isTurnedOver()) max -= 5;
                                                    if (!player.isLinked()) max += get.effect(player, { name: 'tiesuo' }, player, player);
                                                },
                                                选项四: function (target) {
                                                    max = -3;
                                                },
                                            }[choice];
                                            func(player);
                                            return max;
                                        };
                                        return list.sort(function (a, b) {
                                            return gett(b) - gett(a);
                                        })[0];
                                    });
                                    'step 6'
                                    var index2 = ['选项一', '选项二', '选项三', '选项四'].indexOf(result.control);
                                    player.storage.hpp_caiyi_info[event.index].push(index2);
                                    if (index2 == 3) {
                                        var list = player.storage.hpp_caiyi_info[event.index].filter(function (i) {
                                            return i != 3 && lib.skill.hpp_caiyi.filterx[event.index][i](target);
                                        });
                                        if (!list.length) {
                                            event.finish();
                                            return;
                                        }
                                        index2 = list.randomGet();
                                    }
                                    switch (index2) {
                                        case 0:
                                            target.damage(num);
                                            break;
                                        case 1:
                                            target.chooseToDiscard(num, true, 'he');
                                            break;
                                        case 2:
                                            target.isTurnedOver() || target.turnOver();
                                            break;
                                    }
                                    if (index2 != 2) event.finish();
                                    'step 7'
                                    target.isLinked() || target.link();
                                    event.finish();
                                },
                                mark: true,
                                marktext: '☯',
                                intro: {
                                    content: function (storage) {
                                        if (storage) return '转换技。结束阶段，你可以令一名角色选择一项并移除该选项：⒈受到X点伤害；⒉弃置X张牌；⒊翻面并横置；⒋随机执行该状态一个已移除的选项。（X为当前状态剩余选项数）。';
                                        return '转换技。结束阶段，你可以令一名角色选择一项并移除该选项：⒈回复X点体力；⒉摸X张牌；⒊复原武将牌；⒋随机执行一个已经移除过的阳选项。⒋随机执行该状态一个已移除的选项。（X为当前状态剩余选项数）。';
                                    },
                                },
                            },
                            hpp_guili: {
                                audio: 'guili',
                                trigger: { player: 'phaseBegin' },
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    return player.phaseNumber == 1 && game.hasPlayer((current) => current != player);
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(lib.filter.notMe, true, '请选择【归离】的目标', lib.translate.hpp_guili_info).set('ai', function (target) {
                                        return -get.threaten(target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'green');
                                        game.log(player, '选择了', target);
                                        player.storage.hpp_guili_insert = target;
                                        player.addSkill('hpp_guili_insert');
                                        game.delayx();
                                    }
                                },
                                onremove: true,
                                subSkill: {
                                    insert: {
                                        trigger: { global: 'phaseAfter' },
                                        forced: true,
                                        charlotte: true,
                                        logTarget: 'player',
                                        filter: function (event, player) {
                                            if (event.player != player.storage.hpp_guili_insert) return false;
                                            if (event.player.getHistory('sourceDamage').length > 0) return false;
                                            var history = event.player.actionHistory;
                                            if (history[history.length - 1].isRound) return true;
                                            for (var i = history.length - 2; i >= 0; i--) {
                                                if (history[i].isMe) return false;
                                                if (history[i].isRound) return true;
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            player.insertPhase();
                                        },
                                    },
                                },
                            },

                            //曹节
                            hpp_shouxi: {
                                audio: 'shouxi',
                                trigger: { target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    var list = lib.inpile.filter(function (i) {
                                        if (player.getStorage('hpp_shouxi').contains(i)) return false;
                                        var type = get.type2(i);
                                        return type == 'basic' || type == 'trick';
                                    });
                                    if (!list.length) return false;
                                    return event.card.name == 'sha' && event.player.isIn();
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var list = lib.inpile.filter(function (i) {
                                        if (player.getStorage('hpp_shouxi').contains(i)) return false;
                                        var type = get.type2(i);
                                        return type == 'basic' || type == 'trick';
                                    });
                                    for (var i = 0; i < list.length; i++) {
                                        list[i] = [get.type(list[i]), '', list[i]];
                                    }
                                    player.chooseButton([get.prompt('hpp_shouxi', trigger.player), [list, 'vcard']]).set('ai', function (button) {
                                        return 1 + Math.random();
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_shouxi');
                                        var name = result.links[0][2];
                                        event.vcard = result.links;
                                        event.name = name;
                                        player.markAuto('hpp_shouxi', [name]);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var name = event.name;
                                    trigger.player.chooseToDiscard(function (card) {
                                        return card.name == _status.event.name;
                                    }).set('ai', function (card) {
                                        if (_status.event.att < 0) {
                                            return 10 - get.value(card);
                                        }
                                        return 0;
                                    }).set('att', get.attitude(trigger.player, player)).set('name', name).set('dialog', ['守玺：请弃置一张【' + get.translation(name) + '】，否则此【杀】对' + get.translation(player) + '无效且' + get.translation(player) + '从牌堆中获得一张【' + get.translation(name) + '】', [event.vcard, 'vcard']]);
                                    'step 3'
                                    if (result.bool) trigger.player.gainPlayerCard(player);
                                    else {
                                        trigger.excluded.push(player);
                                        var card = get.cardPile2(function (card) {
                                            return card.name == event.name;
                                        });
                                        if (card) player.gain(card, 'gain2');
                                    }
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            var list = lib.inpile.filter(function (i) {
                                                if (target.getStorage('hpp_shouxi').contains(i)) return false;
                                                var type = get.type2(i);
                                                return type == 'basic' || type == 'trick';
                                            });
                                            if (card.name == 'sha' && get.attitude(player, target) < 0 && !player.countCards('h', function (card) {
                                                return list.contains(card.name);
                                            })) return 0.2;
                                        },
                                    },
                                },
                            },
                            hpp_huimin: {
                                group: 'hpp_huimin_log',
                                audio: 'huimin',
                                subSkill: {
                                    log: {
                                        trigger: { player: 'phaseJieshuBegin' },
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.countCards('h') <= current.hp;
                                            });
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            var num = 1, sum = 0;
                                            for (var target of game.filterPlayer()) {
                                                if (target.countCards('h') > target.hp) continue;
                                                sum++;
                                                var att = get.attitude(player, target);
                                                if (att > 0) num++;
                                                if (att < 0) num--;
                                            }
                                            var info = '摸' + get.cnNumber(sum) + '张牌';
                                            if (sum > 1) info += '，然后展示' + get.cnNumber(sum - 1) + '张手牌，然后你选择一名手牌数小于等于体力值的角色，从该角色开始，所有手牌数小于等于体力值的角色依次选择并获得其中一张';
                                            player.chooseBool(get.prompt('hpp_huimin'), info).set('choice', num >= 0);
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_huimin');
                                                var next = game.createEvent('hpp_huimin');
                                                next.player = player;
                                                next.setContent(lib.skill.hpp_huimin.content);
                                            }
                                        },
                                    },
                                },
                                content: function () {
                                    'step 0'
                                    event.list = game.filterPlayer(function (current) {
                                        return current.countCards('h') <= current.hp;
                                    }).sortBySeat();
                                    player.draw(event.list.length);
                                    if (event.list.length == 1) event.finish();
                                    'step 1'
                                    player.chooseTarget(true, function (card, player, target) {
                                        var list = _status.event.list;
                                        return list.contains(target);
                                    }, '惠民：请选择一名角色作为分牌起点').set('ai', function (target) {
                                        var player = _status.event.player;
                                        var list = _status.event.list;
                                        var att = get.attitude(player, target);
                                        var getNum = function (target) {
                                            var num = 0, targets = list.slice(0);
                                            for (var i = 0; i < targets.length; i++) {
                                                if (att > 0) num += (targets.length - i);
                                                if (att < 0) num -= (targets.length - i);
                                            }
                                            return num;
                                        };
                                        return getNum(target);
                                    }).set('list', event.list);
                                    'step 2'
                                    if (result.bool) {
                                        player.line(result.targets, 'green');
                                        var index = event.list.indexOf(result.targets[0]);
                                        if (index < 0) index = 0;
                                        var tmp = event.list.splice(index);
                                        event.list = tmp.concat(event.list);
                                        var yuanzhong = event.list[event.list.length - 1];//掉队的冤种[doge]
                                        game.log(player, '选择了', result.targets, '作为分牌起点'/*+'，',yuanzhong,'被',player,'落下'*/);
                                        yuanzhong.chat(['我成冤种了', '555没我份', '怎能如此对我', '太狠心啦2333'].randomGet());
                                        event.list.remove(yuanzhong);
                                        if (event.list.length > 0) player.chooseCard('h', '选择要分配的手牌', event.list.length, true);
                                        else event.finish();
                                    }
                                    'step 3'
                                    var cards = result.cards;
                                    player.lose(cards, ui.ordering);
                                    event.togain = cards;
                                    if (result.bool && cards.length) {
                                        var dialog = ui.create.dialog('惠民', cards, true);
                                        _status.dieClose.push(dialog);
                                        dialog.videoId = lib.status.videoId++;
                                        event.dialogID = dialog.videoId;
                                        game.addVideo('cardDialog', null, ['惠民', get.cardsInfo(cards), dialog.videoId]);
                                        game.broadcast(function (cards, id) {
                                            var dialog = ui.create.dialog('惠民', cards, true);
                                            _status.dieClose.push(dialog);
                                            dialog.videoId = id;
                                        }, cards, dialog.videoId);
                                    }
                                    else event.finish();
                                    'step 4'
                                    game.delay();
                                    'step 5'
                                    if (event.list.length && event.togain.length) {
                                        event.current = event.list.shift();
                                        var next = event.current.chooseButton(true, function (button) {
                                            return get.value(button.link, _status.event.player);
                                        });
                                        next.set('dialog', event.dialogID);
                                        next.set('closeDialog', false);
                                        next.set('dialogdisplay', true);
                                        next.set('cardFilter', event.togain.slice(0));
                                        next.set('filterButton', function (button) {
                                            return _status.event.cardFilter.contains(button.link);
                                        })
                                    }
                                    else {
                                        for (var i = 0; i < ui.dialogs.length; i++) {
                                            if (ui.dialogs[i].videoId == event.dialogID) {
                                                var dialog = ui.dialogs[i];
                                                dialog.close();
                                                _status.dieClose.remove(dialog);
                                                break;
                                            }
                                        }
                                        if (event.togain.length) {
                                            game.cardsDiscard(event.togain);
                                        }
                                        game.broadcast(function (id) {
                                            var dialog = get.idDialog(id);
                                            if (dialog) {
                                                dialog.close();
                                                _status.dieClose.remove(dialog);
                                            }
                                        }, event.dialogID);
                                        game.addVideo('cardDialog', null, event.dialogID);
                                        event.finish();
                                    }
                                    'step 6'
                                    var card = result.links[0], target = event.current;
                                    if (card) {
                                        target.gain(card, 'gain2');
                                        event.togain.remove(card);
                                    }
                                    var capt = get.translation(target) + '选择了' + get.translation(card);
                                    game.broadcastAll(function (card, id, name, capt) {
                                        var dialog = get.idDialog(id);
                                        if (dialog) {
                                            dialog.content.firstChild.innerHTML = capt;
                                            for (var i = 0; i < dialog.buttons.length; i++) {
                                                if (dialog.buttons[i].link == card) {
                                                    dialog.buttons[i].querySelector('.info').innerHTML = name;
                                                    break;
                                                }
                                            }
                                            game.addVideo('dialogCapt', null, [dialog.videoId, dialog.content.firstChild.innerHTML]);
                                        }
                                    }, card, event.dialogID, function (target) {
                                        if (target._tempTranslate) return target._tempTranslate;
                                        var name = target.name;
                                        if (lib.translate[name + '_ab']) return lib.translate[name + '_ab'];
                                        return get.translation(name);
                                    }(target), capt);
                                    if (event.togain.length) event.goto(5);
                                    else {
                                        for (var i = 0; i < ui.dialogs.length; i++) {
                                            if (ui.dialogs[i].videoId == event.dialogID) {
                                                var dialog = ui.dialogs[i];
                                                dialog.close();
                                                _status.dieClose.remove(dialog);
                                                break;
                                            }
                                        }
                                        if (event.togain.length) {
                                            game.cardsDiscard(event.togain);
                                        }
                                        game.broadcast(function (id) {
                                            var dialog = get.idDialog(id);
                                            if (dialog) {
                                                dialog.close();
                                                _status.dieClose.remove(dialog);
                                            }
                                        }, event.dialogID);
                                        game.addVideo('cardDialog', null, event.dialogID);
                                        event.finish();
                                    }
                                },
                            },

                            // 曹丕
                            hpp_xingshang: {
                                audio: 'xingshang',
                                audioname2: { WEI_caoying: 'lingren_xingshang' },
                                trigger: { global: 'die' },
                                preHidden: true,
                                content: function () {
                                    if (trigger.player.countCards('he')) player.gain(trigger.player.getCards('he'), trigger.player, 'giveAuto');
                                    player.draw();
                                },
                            },
                            hpp_fangzhu: {
                                audio: 'fangzhu',
                                trigger: { player: 'damageEnd' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_fangzhu'), '令一名其他角色将武将牌翻面并摸一张牌', lib.filter.notMe).ai = function (target) {
                                        if (target.hasSkillTag('noturn')) return 0;
                                        var player = _status.event.player, att = get.attitude(player, target);
                                        if (att < 0 && target.isTurnedOver()) return 0;
                                        if (att > 2 && target.isTurnedOver()) return att * 10;
                                        return -att;
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_fangzhu', result.targets[0]);
                                        result.targets[0].turnOver();
                                        result.targets[0].draw();
                                    }
                                    else event.finish();
                                },
                                ai: {
                                    maixie: true,
                                    maixie_hp: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'damage')) {
                                                if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                if (target.hp <= 1) return;
                                                if (!target.hasFriend()) return;
                                                var hastarget = false;
                                                var turnfriend = false;
                                                var players = game.filterPlayer();
                                                for (var i = 0; i < players.length; i++) {
                                                    if (get.attitude(target, players[i]) < 0 && !players[i].isTurnedOver()) {
                                                        hastarget = true;
                                                    }
                                                    if (get.attitude(target, players[i]) > 0 && players[i].isTurnedOver()) {
                                                        hastarget = true;
                                                        turnfriend = true;
                                                    }
                                                }
                                                if (get.attitude(player, target) > 0 && !hastarget) return;
                                                if (turnfriend || target.hp == target.maxHp) return [0.5, 1];
                                                if (target.hp > 1) return [1, 0.5];
                                            }
                                        }
                                    }
                                },
                            },

                            // 曹仁
                            hpp_caoren_jushou: {
                                audio: 'xinjushou',
                                trigger: { player: 'phaseJieshuBegin' },
                                content: function () {
                                    'step 0'
                                    player.turnOver();
                                    player.draw(4);
                                    'step 1'
                                    player.chooseToUse(function (card) {
                                        if (!lib.filter.cardEnabled(card, _status.event.player, _status.event)) return false;
                                        return get.type(card) == 'equip';
                                    }, '据守：是否使用一张装备牌？');
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (card.name == 'guiyoujie') return [0, 1];
                                        },
                                    },
                                },
                            },

                            // 曹叡
                            hpp_mingjian: {
                                audio: 'mingjian',
                                enable: 'phaseUse',
                                usable: 1,
                                filterTarget: lib.filter.notMe,
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                filterCard: true,
                                selectCard: [1, Infinity],
                                check: () => 1,
                                discard: false,
                                lose: false,
                                delay: false,
                                content: function () {
                                    target.gain(cards, player, 'giveAuto');
                                    target.addTempSkill('hpp_mingjian2', { player: 'phaseAfter' });
                                    target.storage.hpp_mingjian2++;
                                    target.updateMarks('hpp_mingjian2');
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        target: function (player, target) {
                                            if (target.hasSkillTag('nogain')) return 0;
                                            if (player.countCards('h') == player.countCards('h', 'du')) return -1;
                                            if (target.hasJudge('lebu')) return 0;
                                            if (get.attitude(player, target) > 3) {
                                                var basis = get.threaten(target);
                                                if (player == get.zhu(player) && player.hp <= 2 && player.countCards('h', 'shan') && !game.hasPlayer(function (current) {
                                                    return get.attitude(current, player) > 3 && current.countCards('h', 'tao') > 0;
                                                })) return 0;
                                                if (target.countCards('h') + player.countCards('h') > target.hp + 2) return basis * 0.8;
                                                return basis;
                                            }
                                            return 0;
                                        },
                                    },
                                },
                            },
                            hpp_mingjian2: {
                                charlotte: true,
                                mark: true,
                                marktext: '鉴',
                                intro: { content: '手牌上限+#，出杀次数+#' },
                                init: function (player, skill) {
                                    if (!player.storage[skill]) player.storage[skill] = 0;
                                },
                                onremove: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.storage.hpp_mingjian2;
                                    },
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.storage.hpp_mingjian2;
                                    },
                                },
                            },
                            hpp_xingshuai: {
                                skillAnimation: true,
                                animationColor: 'thunder',
                                audio: 'xingshuai',
                                trigger: { player: 'dying' },
                                zhuSkill: true,
                                filter: function (event, player) {
                                    if (player.storage.hpp_xingshuai) return false;
                                    if (player.hp > 0) return false;
                                    if (!player.hasZhuSkill('hpp_xingshuai')) return false;
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.group == 'wei';
                                    });
                                },
                                init: function (player) {
                                    if (player.hasZhuSkill('hpp_xingshuai')) {
                                        player.markSkill('hpp_xingshuai');
                                        player.storage.hpp_xingshuai = false;
                                    }
                                },
                                intro: { content: 'limited' },
                                unique: true,
                                limited: true,
                                mark: false,
                                content: function () {
                                    'step 0'
                                    player.storage.hpp_xingshuai = true;
                                    player.awakenSkill('hpp_xingshuai');
                                    var targets = game.filterPlayer();
                                    targets.remove(player);
                                    event.targets = targets;
                                    event.damages = [];
                                    'step 1'
                                    if (event.targets.length) {
                                        var current = event.targets.shift();
                                        if (current.group == 'wei') {
                                            current.chooseBool('是否令' + get.translation(player) + '回复1点体力？').set('ai', function () {
                                                return get.attitude(_status.event.player, _status.event.target) > 2;
                                            }).set('target', player);
                                            event.current = current;
                                        }
                                        else event.redo();
                                    }
                                    else event.goto(3);
                                    'step 2'
                                    if (result.bool) {
                                        event.damages.push(event.current);
                                        event.current.line(player, 'green');
                                        game.log(event.current, '令', player, '回复1点体力');
                                        player.recover();
                                    }
                                    if (event.targets.length) event.goto(1);
                                    'step 3'
                                    if (event.damages.length) {
                                        var next = game.createEvent('hpp_xingshuai_next');
                                        event.next.remove(next);
                                        trigger.after.push(next);
                                        next.targets = event.damages;
                                        next.setContent(function () {
                                            for (var target of targets) {
                                                target.damage();
                                                target.draw();
                                            }
                                        });
                                    }
                                },
                            },

                            // 曹性
                            hpp_liushi: {
                                audio: 'cxliushi',
                                inherit: 'cxliushi',
                                group: 'hpp_liushi_damage',
                                subSkill: {
                                    damage: {
                                        audio: 'cxliushi',
                                        trigger: { source: 'damageSource' },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha';
                                        },
                                        logTarget: 'player',
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            trigger.player.addMark('cxliushi2', 1);
                                            trigger.player.addSkill('cxliushi2');
                                        },
                                    },
                                },
                            },

                            // 曹休
                            hpp_qingxi: {
                                audio: 'qingxi',
                                inherit: 'reqingxi',
                            },
                            _hpp_qingxi_draw: {
                                charlotte: true,
                                trigger: { global: 'judgeAfter' },
                                filter: function (event, player) {
                                    return event.result.color == 'black' && event.getParent().name == 'hpp_qingxi' && event.getParent().player == player;
                                },
                                lastDo: true,
                                direct: true,
                                content: function () {
                                    player.draw(2);
                                },
                            },

                            // 曹婴
                            hpp_lingren: {
                                derivation: ['hpp_jianxiong', 'hpp_xingshang'],
                                audio: 'xinfu_lingren',
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    if (!player.isPhaseUsing()) return false;
                                    if (!['basic', 'trick'].contains(get.type(event.card))) return false;
                                    if (get.tag(event.card, 'damage')) return true;
                                    return false;
                                },
                                usable: 1,
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_lingren'), '选择一名目标角色并猜测其手牌构成', function (card, player, target) {
                                        return _status.event.targets.contains(target);
                                    }).set('ai', function (target) {
                                        return 2 - get.attitude(_status.event.player, target);
                                    }).set('targets', trigger.targets);
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_lingren', target);
                                        var list = ['hpp_lingren_basic', 'hpp_lingren_trick', 'hpp_lingren_equip'];
                                        player.chooseButton(['###' + '凌人：猜测' + get.translation(target) + '的手牌组成类型' + '###' + '请选出你认为' + get.translation(target) + '有的手牌类型', [list, 'vcard']], [0, 3]).set('ai', function (button) {
                                            var name = button.link[2];
                                            switch (name) {
                                                case 'hpp_lingren_basic':
                                                    var A = 0.95;
                                                    if (!target.countCards('h', { type: ['basic'] })) A = 0.05;
                                                    if (!target.countCards('h')) A = 0;
                                                    return Math.random() < A ? 1 : -1;
                                                    break;
                                                case 'hpp_lingren_trick':
                                                    var B = 0.9;
                                                    if (!target.countCards('h', { type: ['trick', 'delay'] })) B = 0.1;
                                                    if (!target.countCards('h')) B = 0;
                                                    return Math.random() < B ? 1 : -1;
                                                    break;
                                                case 'hpp_lingren_equip':
                                                    var C = 0.75;
                                                    if (!target.countCards('h', { type: ['equip'] })) C = 0.25;
                                                    if (!target.countCards('h')) C = 0;
                                                    return Math.random() < C ? 1 : -1;
                                                    break;
                                            }
                                        });
                                    }
                                    else {
                                        player.storage.counttrigger.hpp_lingren--;
                                        event.finish();
                                    }
                                    'step 2'
                                    event.num = 0;
                                    var list1 = [], list2 = [];
                                    if (result.links) for (var name of result.links) list1.push(name[2].slice(12));
                                    if (target.countCards('h')) for (var card of target.getCards('h')) if (!list2.contains(get.type2(card))) list2.push(get.type2(card));
                                    for (var type of ['basic', 'trick', 'equip']) if ((list1.contains(type) && list2.contains(type)) || (!list1.contains(type) && !list2.contains(type))) event.num++;
                                    if (!event.isMine() && !event.isOnline()) game.delayx();
                                    'step 3'
                                    player.popup('猜对' + get.cnNumber(event.num) + '项');
                                    game.log(player, '猜对了' + get.cnNumber(event.num) + '项');
                                    if (event.num > 0) {
                                        target.addTempSkill('hpp_lingren_adddamage');
                                        target.storage.hpp_lingren = {
                                            card: trigger.card,
                                        };
                                    }
                                    if (event.num > 1) player.draw(2);
                                    if (event.num > 2) {
                                        player.addTempSkill('hpp_jianxiong', { player: 'phaseBegin' });
                                        player.addTempSkill('hpp_xingshang', { player: 'phaseBegin' });
                                    }
                                },
                            },
                            hpp_lingren_adddamage: {
                                charlotte: true,
                                onremove: true,
                                trigger: { player: 'damageBegin3' },
                                filter: function (event, player) {
                                    var info = player.storage.hpp_lingren;
                                    return event.card && event.card == info.card;
                                },
                                silent: true,
                                popup: false,
                                forced: true,
                                content: function () {
                                    trigger.num++;
                                },
                            },
                            hpp_fujian: {
                                audio: 'xinfu_fujian',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countCards('h');
                                    });
                                },
                                direct: true,
                                locked: true,
                                content: function () {
                                    var target = game.filterPlayer(function (target) {
                                        return player != target && target.countCards('h');
                                    }).randomGet();
                                    var cards = target.getCards('h').randomGets(1);
                                    player.logSkill('hpp_fujian', target);
                                    var content = [get.translation(target) + '的一张手牌', cards];
                                    game.log(player, '观看了', target, '的一张手牌');
                                    player.chooseControl('ok').set('dialog', content);
                                },
                            },

                            // 曹彰
                            hpp_jiangchi: {
                                audio: 'jiangchi',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var list = [
                                        '摸三张牌，本回合内不能使用或打出【杀】且手牌上限+2',
                                        '摸一张牌，直到你的下个回合开始，受到伤害后摸一张牌',
                                        '本回合可以多使用一张【杀】且无距离限制',
                                    ];
                                    player.chooseControl('cancel2').set('prompt', get.prompt('xinjiangchi')).set('choiceList', list).set('ai', function () {
                                        var player = _status.event.player;
                                        var num = player.countCards('hs', function (card) {
                                            return get.name(card) == 'sha' && player.hasValueTarget(card, false);
                                        });
                                        if (num == 0) return 0;
                                        if (num > 1) return 2;
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_jiangchi');
                                        switch (result.index) {
                                            case 0: {
                                                player.draw(3);
                                                player.addTempSkill('xinjiangchi_less');
                                                player.addTempSkill('hpp_jiangchi_hand');
                                                break;
                                            }
                                            case 1: {
                                                player.draw();
                                                player.addTempSkill('hpp_jiangchi_draw', { player: 'phaseBegin' });
                                                break;
                                            }
                                            case 2: {
                                                player.addTempSkill('xinjiangchi_more');
                                                break;
                                            }
                                        }
                                    }
                                },
                                subSkill: {
                                    draw: {
                                        charlotte: true,
                                        audio: 'jiangchi',
                                        trigger: { player: 'damageEnd' },
                                        forced: true,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                    hand: {
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + 2;
                                            },
                                        },
                                    },
                                },
                            },

                            // 曹真
                            hpp_sidi: {
                                audio: 'sidi',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return player.countCards('he', function (card) {
                                        if (_status.connectMode) return true;
                                        return get.type(card) != 'basic';
                                    }) > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCard('he', get.prompt('hpp_sidi'), [1, 2], '将至多两张非基本牌置于武将牌上作为“司”', function (card, player) {
                                        return get.type(card) != 'basic';
                                    }).set('ai', function (card) {
                                        if (get.position(card) == 'e') return 5 + player.hp - get.value(card);
                                        return 7 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_sidi');
                                        player.addToExpansion(result.cards, 'give', player).gaintag.add('hpp_sidi');
                                    }
                                },
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                group: 'hpp_sidi_push',
                                ai: { notemp: true },
                                subSkill: {
                                    push: {
                                        trigger: { global: 'phaseUseBegin' },
                                        direct: true,
                                        filter: function (event, player) {
                                            return event.player != player && player.getExpansions('hpp_sidi').length > 0;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseButton([get.prompt('hpp_sidi', trigger.player), player.getExpansions('hpp_sidi')]).set('ai', function (button) {
                                                var player = _status.event.player;
                                                var target = _status.event.getTrigger().player;
                                                if (get.attitude(player, target) > -1) return 0;
                                                var card = button.link;
                                                var color = get.color(button.link, false);
                                                var eff = target.countCards('h', function (card) {
                                                    return get.color(card, target) == color && target.hasValueTarget(card);
                                                });
                                                if (!target.countCards('h', function (card) {
                                                    return get.color(card, target) == color && get.name(card, target) == 'sha' && target.hasValueTarget(card);
                                                })) eff += 1.5;
                                                if (!target.countCards('h', function (card) {
                                                    return get.color(card, target) == color && get.type2(card, target) == 'trick' && target.hasValueTarget(card);
                                                })) eff += 1.5;
                                                return eff - 1;
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                if (!trigger.residi) trigger.residi = [];
                                                trigger.residi.push(player);
                                                var card = result.links[0];
                                                var target = trigger.player;
                                                player.logSkill('hpp_sidi', target);
                                                player.loseToDiscardpile(card);
                                                var color = get.color(card, false);
                                                if (!target.storage.residi2) target.storage.residi2 = [];
                                                target.storage.residi2.add(color);
                                                target.addTempSkill('residi2', 'phaseUseAfter');
                                                target.markSkill('residi2');
                                                player.addTempSkill('residi3', 'phaseUseAfter');
                                            }
                                        },
                                    },
                                },
                            },

                            // 曹植
                            hpp_luoying: {
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (get.suit(card) == 'club') return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && get.suit(card) == 'club') return false;
                                    },
                                },
                                audio: 'reluoying',
                                group: ['hpp_luoying_discard', 'hpp_luoying_judge'],
                                subfrequent: ['judge'],
                                subSkill: {
                                    discard: {
                                        trigger: { global: 'loseAfter' },
                                        filter: function (event, player) {
                                            if (event.type != 'discard') return false;
                                            if (event.player == player) return false;
                                            for (var i = 0; i < event.cards2.length; i++) {
                                                if (get.suit(event.cards2[i], event.player) == 'club' && get.position(event.cards2[i], true) == 'd') return true;
                                            }
                                            return false;
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            if (trigger.delay == false) game.delay();
                                            'step 1'
                                            var cards = [];
                                            for (var i = 0; i < trigger.cards2.length; i++) {
                                                if (get.suit(trigger.cards2[i], trigger.player) == 'club' && get.position(trigger.cards2[i], true) == 'd') {
                                                    cards.push(trigger.cards2[i]);
                                                }
                                            }
                                            if (cards.length) {
                                                player.chooseButton(['落英：选择要获得的牌', cards], [1, cards.length]).set('ai', function (button) {
                                                    return get.value(button.link, _status.event.player, 'raw');
                                                });
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (result.bool) {
                                                player.logSkill('hpp_luoying');
                                                player.gain(result.links, 'gain2');
                                            }
                                        },
                                    },
                                    judge: {
                                        trigger: { global: 'cardsDiscardAfter' },
                                        filter: function (event, player) {
                                            var evt = event.getParent().relatedEvent;
                                            if (!evt || evt.name != 'judge') return;
                                            if (evt.player == player) return false;
                                            if (get.position(event.cards[0], true) != 'd') return false;
                                            return (get.suit(event.cards[0]) == 'club');
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseButton(['落英：选择要获得的牌', trigger.cards], [1, trigger.cards.length]).set('ai', function (button) {
                                                return get.value(button.link, _status.event.player, 'raw');
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_luoying');
                                                player.gain(result.links, 'gain2');
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_jiushi: {
                                audio: 'rejiushi',
                                group: ['hpp_jiushi1', 'hpp_jiushi2', 'hpp_jiushi3', 'hpp_jiushi_gain'],
                                subfrequent: ['gain'],
                                subSkill: {
                                    gain: {
                                        audio: 'rejiushi',
                                        trigger: { player: 'turnOverAfter' },
                                        frequent: true,
                                        prompt: '是否发动【酒诗】，获得牌堆中的一张锦囊牌？',
                                        content: function () {
                                            var card = get.cardPile2(function (card) {
                                                return get.type2(card) == 'trick';
                                            });
                                            if (card) player.gain(card, 'gain2', 'log');
                                        },
                                    },
                                },
                            },
                            hpp_jiushi1: {
                                hiddenCard: function (player, name) {
                                    if (name == 'jiu') return !player.isTurnedOver();
                                    return false;
                                },
                                audio: 'rejiushi',
                                enable: 'chooseToUse',
                                filter: function (event, player) {
                                    if (player.classList.contains('turnedover')) return false;
                                    return event.filterCard({ name: 'jiu', isCard: true }, player, event);
                                },
                                content: function () {
                                    if (_status.event.getParent(2).type == 'dying') {
                                        event.dying = player;
                                        event.type = 'dying';
                                    }
                                    player.turnOver();
                                    player.useCard({ name: 'jiu', isCard: true }, player);
                                },
                                ai: {
                                    order: 5,
                                    result: {
                                        player: function (player) {
                                            if (_status.event.parent.name == 'phaseUse') {
                                                if (player.countCards('h', 'jiu') > 0) return 0;
                                                if (player.getEquip('zhuge') && player.countCards('h', 'sha') > 1) return 0;
                                                if (!player.countCards('h', 'sha')) return 0;
                                                var targets = [];
                                                var target;
                                                var players = game.filterPlayer();
                                                for (var i = 0; i < players.length; i++) {
                                                    if (get.attitude(player, players[i]) < 0) {
                                                        if (player.canUse('sha', players[i], true, true)) {
                                                            targets.push(players[i]);
                                                        }
                                                    }
                                                }
                                                if (targets.length) {
                                                    target = targets[0];
                                                }
                                                else {
                                                    return 0;
                                                }
                                                var num = get.effect(target, { name: 'sha' }, player, player);
                                                for (var i = 1; i < targets.length; i++) {
                                                    var num2 = get.effect(targets[i], { name: 'sha' }, player, player);
                                                    if (num2 > num) {
                                                        target = targets[i];
                                                        num = num2;
                                                    }
                                                }
                                                if (num <= 0) return 0;
                                                var e2 = target.getEquip(2);
                                                if (e2) {
                                                    if (e2.name == 'tengjia') {
                                                        if (!player.countCards('h', { name: 'sha', nature: 'fire' }) && !player.getEquip('zhuque')) return 0;
                                                    }
                                                    if (e2.name == 'renwang') {
                                                        if (!player.countCards('h', { name: 'sha', color: 'red' })) return 0;
                                                    }
                                                    if (e2.name == 'baiyin') return 0;
                                                }
                                                if (player.getEquip('guanshi') && player.countCards('he') > 2) return 1;
                                                return target.countCards('h') > 3 ? 0 : 1;
                                            }
                                            if (player == _status.event.dying || player.isTurnedOver()) return 3;
                                        }
                                    },
                                    effect: {
                                        target: function (card, player, target) {
                                            if (card.name == 'guiyoujie') return [0, 0.5];
                                            if (target.isTurnedOver()) {
                                                if (get.tag(card, 'damage')) {
                                                    if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                    if (target.hp == 1) return;
                                                    return [1, target.countCards('h') / 2];
                                                }
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_jiushi2: {
                                trigger: { player: 'damageBegin3' },
                                silent: true,
                                firstDo: true,
                                filter: function (event, player) {
                                    return player.classList.contains('turnedover');
                                },
                                content: function () {
                                    trigger.hpp_jiushi = true;
                                },
                            },
                            hpp_jiushi3: {
                                audio: 'rejiushi',
                                trigger: { player: 'damageEnd' },
                                check: function (event, player) {
                                    return player.isTurnedOver();
                                },
                                filter: function (event, player) {
                                    return event.hpp_jiushi;
                                },
                                prompt: '是否发动【酒诗】，将武将牌翻面？',
                                content: function () {
                                    delete trigger.hpp_jiushi;
                                    player.turnOver();
                                },
                            },

                            // 陈到
                            hpp_wanglie: {
                                mod: {
                                    targetInRange: function (card, player, target, now) {
                                        if (player.isPhaseUsing()) return true;
                                    },
                                },
                                audio: 'drlt_wanglie',
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    return player.isPhaseUsing() && (event.card.name == 'sha' || get.type(event.card) == 'trick');
                                },
                                preHidden: true,
                                check: function (event, player) {
                                    if (['wuzhong', 'kaihua', 'dongzhuxianji'].contains(event.card.name)) return false;
                                    player._wanglie_temp = true;
                                    var eff = 0;
                                    for (var i of event.targets) {
                                        eff += get.effect(i, event.card, player, player);
                                    }
                                    delete player._wanglie_temp;
                                    if (eff < 0) return true;
                                    if (!player.countCards('h', function (card) {
                                        return player.hasValueTarget(card, null, true);
                                    })) return true;
                                    if (get.tag(event.card, 'damage') && !player.needsToDiscard() && !player.countCards('h', function (card) {
                                        return get.tag(card, 'damage') && player.hasValueTarget(card, null, true);
                                    })) return true;
                                    return false;
                                },
                                prompt2: function (event) {
                                    return '令' + get.translation(event.card) + '不能被响应，回合结束时摸等同于此牌造成的伤害数的牌，然后本回合不能再使用牌';
                                },
                                locked: false,
                                content: function () {
                                    trigger.nowuxie = true;
                                    trigger.directHit.addArray(game.players);
                                    player.addTempSkill('hpp_wanglie2');
                                    trigger.card.hpp_wanglie = true;
                                },
                                ai: {
                                    pretao: true,
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (tag == 'pretao') return true;
                                        if (player._wanglie_temp) return false;
                                        player._wanglie_temp = true;
                                        var bool = function () {
                                            if (['wuzhong', 'kaihua', 'dongzhuxianji'].contains(arg.card.name)) return false;
                                            if (get.attitude(player, arg.target) > 0 || !player.isPhaseUsing()) return false;
                                            var cards = player.getCards('h', function (card) {
                                                return card != arg.card && (!arg.card.cards || !arg.card.cards.contains(card));
                                            });
                                            var sha = player.getCardUsable('sha');
                                            if (arg.card.name == 'sha') sha--;
                                            cards = cards.filter(function (card) {
                                                if (card.name == 'sha' && sha <= 0) return false;
                                                return player.hasValueTarget(card, null, true);
                                            });
                                            if (!cards.length) return true;
                                            if (!get.tag(arg.card, 'damage')) return false;
                                            if (!player.needsToDiscard() && !cards.filter(function (card) {
                                                return get.tag(card, 'damage');
                                            }).length) return true;
                                            return false;
                                        }();
                                        delete player._wanglie_temp;
                                        return bool;
                                    },
                                },
                            },
                            hpp_wanglie2: {
                                charlotte: true,
                                group: 'drlt_wanglie2',
                                getNum: function (player) {
                                    var num = 0;
                                    player.getHistory('sourceDamage', function (evt) {
                                        if (evt.card && evt.card.hpp_wanglie) num += evt.num;
                                    });
                                    return num;
                                },
                                trigger: { player: 'phaseEnd' },
                                filter: function (event, player) {
                                    return lib.skill.hpp_wanglie2.getNum(player) > 0;
                                },
                                forced: true,
                                content: function () {
                                    player.draw(lib.skill.hpp_wanglie2.getNum(player));
                                },
                            },

                            // 陈宫
                            hpp_mingce: {
                                audio: 'mingce',
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return target != player && game.hasPlayer(function (current) {
                                            return target.canUse({ name: 'sha' }, current, false) && target.inRange(current);
                                        });
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCardTarget({
                                        prompt: get.prompt2('hpp_mingce'),
                                        filterTarget: function (card, player, target) {
                                            if (ui.selected.targets.length) return ui.selected.targets[0].canUse({ name: 'sha' }, target, false) && ui.selected.targets[0].inRange(target);
                                            return target != player;
                                        },
                                        selectTarget: 2,
                                        filterCard: () => false,
                                        selectCard: -1,
                                        targetprompt: ['出杀者', '出杀目标'],
                                        ai2: function (target) {
                                            var player = _status.event.player, list = [];
                                            for (var i of game.filterPlayer()) {
                                                if (i == player) continue;
                                                for (var j of game.filterPlayer()) {
                                                    if (j == i || j == player) continue;
                                                    list.push([get.effect(j, { name: i.inRange(j) ? 'sha' : 'juedou', isCard: true }, i, player), i, j]);
                                                }
                                            }
                                            list.sort(function (a, b) {
                                                return b[0] - a[0];
                                            });
                                            if (!ui.selected.targets.length) return target == list[0][1] ? 10 : 0;
                                            return target == list[0][2] ? 10 : 0;
                                        },
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_mingce');
                                        player.line2(result.targets);
                                        result.targets[0].useCard({ name: 'sha', isCard: true }, result.targets[1], false, 'noai');
                                    }
                                },
                            },

                            // 程普
                            hpp_lihuo: {
                                group: ['hpp_lihuo_target', 'hpp_lihuo_draw'],
                                trigger: { player: 'useCard1' },
                                filter: function (event, player) {
                                    if (event.card.name == 'sha' && !event.card.nature) return true;
                                    return false;
                                },
                                audio: 'lihuo',
                                check: function (event, player) {
                                    if (player.hp > 2) return true;
                                    return false;
                                },
                                content: function () {
                                    trigger.card.nature = 'fire';
                                    var next = game.createEvent('hpp_lihuo_clear');
                                    next.player = player;
                                    next.card = trigger.card;
                                    event.next.remove(next);
                                    next.forceDie = true;
                                    trigger.after.push(next);
                                    next.setContent(function () {
                                        var num = 0;
                                        player.getHistory('sourceDamage', function (evt) {
                                            if (evt.card == card) num += evt.num;
                                        });
                                        if (num > 1) player.loseHp();
                                        delete card.nature;
                                    });
                                },
                                subSkill: {
                                    target: {
                                        trigger: { player: 'useCard2' },
                                        filter: function (event, player) {
                                            if (event.card.name != 'sha' || get.nature(event.card) != 'fire') return false;
                                            return game.hasPlayer(function (current) {
                                                return !event.targets.contains(current) && player.canUse(event.card, current);
                                            });
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('hpp_lihuo'), '为' + get.translation(trigger.card) + '增加一个目标', function (card, player, target) {
                                                return !_status.event.sourcex.contains(target) && player.canUse(_status.event.card, target);
                                            }).set('sourcex', trigger.targets).set('card', trigger.card).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.effect(target, _status.event.card, player, player);
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                if (!event.isMine() && !_status.connectMode) game.delayx();
                                                event.target = result.targets[0];
                                            }
                                            else event.finish();
                                            'step 2'
                                            player.logSkill('hpp_lihuo', event.target);
                                            trigger.targets.push(event.target);
                                        },
                                    },
                                    draw: {
                                        audio: 'lihuo',
                                        trigger: { source: 'damageSource' },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha' && get.nature(event.card) == 'fire';
                                        },
                                        forced: true,
                                        locked: false,
                                        usable: 1,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },
                            hpp_chunlao: {
                                audio: 'chunlao',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return player.countCards('h') > 0 && (_status.connectMode || player.countCards('h', 'sha') > 0) && !player.getExpansions('hpp_chunlao').length;
                                },
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCard([1, Math.max(1, player.countCards('h', 'sha'))], get.prompt('hpp_chunlao'), '将任意张【杀】置于武将牌上作为“醇”', { name: 'sha' }).set('ai', function () {
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_chunlao');
                                        player.addToExpansion('gain2', result.cards).gaintag.add('hpp_chunlao');
                                    }
                                },
                                group: 'hpp_chunlao2'
                            },
                            hpp_chunlao2: {
                                enable: 'chooseToUse',
                                filter: function (event, player) {
                                    return event.type == 'dying' && event.dying && event.dying.hp <= 0 && player.getExpansions('hpp_chunlao').length > 0;
                                },
                                filterTarget: function (card, player, target) {
                                    return target == _status.event.dying;
                                },
                                direct: true,
                                delay: false,
                                selectTarget: -1,
                                content: function () {
                                    'step 0'
                                    player.chooseCardButton(get.translation('hpp_chunlao'), player.getExpansions('hpp_chunlao'), true);
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_chunlao');
                                        event.type = 'dying';
                                        player.loseToDiscardpile(result.links);
                                        target.useCard({ name: 'jiu', isCard: true }, target);
                                        var nature = get.color(result.links[0]);
                                        if (nature == 'red') player.recover();
                                        if (nature == 'black') player.draw(2);
                                    }
                                },
                                ai: {
                                    order: 6,
                                    skillTagFilter: function (player) {
                                        return player.getExpansions('hpp_chunlao').length > 0;
                                    },
                                    save: true,
                                    result: {
                                        target: 3
                                    },
                                },
                            },

                            // 陈群
                            hpp_faen: {
                                audio: 'faen',
                                trigger: { global: ['turnOverAfter', 'linkAfter', 'damageBegin4'] },
                                filter: function (event, player) {
                                    if (event.name == 'damage' && !player.countCards('he')) return false;
                                    return event.name == 'turnOver' || event.player.isLinked();
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var target = trigger.player;
                                    event.target = target;
                                    if (trigger.name == 'damage') {
                                        player.chooseToDiscard(get.prompt('hpp_faen', target), '弃置一张牌，防止即将对' + get.translation(target) + '造成的伤害', 'he').set('ai', function (card) {
                                            if (!_status.event.check()) return -1;
                                            return 7 - get.value(card);
                                        }).set('check', function () {
                                            if (get.attitude(player, target) <= 0) return false;
                                            if (player.countCards('h', function (card) {
                                                var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                                                if (mod2 != 'unchanged') return mod2;
                                                var mod = game.checkMod(card, player, target, 'unchanged', 'cardSavable', player);
                                                if (mod != 'unchanged') return mod;
                                                var savable = get.info(card).savable;
                                                if (typeof savable == 'function') savable = savable(card, player, target);
                                                return savable;
                                            }) >= 1 + trigger.num - target.hp) return false;
                                            if (target == player || target == get.zhu(player)) return true;
                                            return !player.hasUnknown();
                                        }).logSkill = ['hpp_faen', target];
                                    }
                                    else player.chooseBool(get.prompt('hpp_faen', target), '令' + get.translation(target) + '摸一张牌').set('choice', get.attitude(player, target) > 0);
                                    'step 1'
                                    if (result.bool) {
                                        if (trigger.name != 'damage') {
                                            player.logSkill('hpp_faen', target);
                                            target.draw();
                                        }
                                        else trigger.cancel();
                                    }
                                },
                                ai: { expose: 0.2 },
                            },

                            // 淳于琼
                            hpp_cangchu: {
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('hpp_cangchu');
                                    },
                                },
                                group: ['hpp_cangchu2', 'hpp_cangchu3'],
                                audio: 'cangchu',
                                trigger: { global: 'phaseBefore', player: 'enterGame' },
                                marktext: '粮',
                                forced: true,
                                filter: function (event, player) {
                                    if (event.name == 'phase' && game.phaseNumber != 0) return false;
                                    return player.countMark('hpp_cangchu') < game.countPlayer();
                                },
                                forced: true,
                                content: function () {
                                    player.addMark('hpp_cangchu', Math.min(3, game.countPlayer() - player.countMark('hpp_cangchu')));
                                },
                                intro: { content: 'mark', name: '粮' },
                            },
                            hpp_cangchu2: {
                                audio: 'cangchu',
                                trigger: { player: ['gainAfter', 'recoverEnd'], global: 'loseAsyncAfter' },
                                filter: function (event, player) {
                                    return player != _status.currentPhase && player.countMark('hpp_cangchu') < game.countPlayer() && (event.name == 'recover' || event.getg(player).length);
                                },
                                forced: true,
                                usable: 1,
                                content: function () {
                                    player.addMark('hpp_cangchu', 1);
                                },
                            },
                            hpp_cangchu3: {
                                audio: 'cangchu',
                                trigger: { global: 'die' },
                                filter: function (event, player) {
                                    return player.countMark('hpp_cangchu') > game.countPlayer();
                                },
                                forced: true,
                                content: function () {
                                    player.removeMark('hpp_cangchu', player.countMark('hpp_cangchu') - game.countPlayer());
                                },
                            },
                            hpp_liangying: {
                                audio: 'reliangying',
                                trigger: { player: 'phaseDiscardBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var map = {};
                                    var list = [];
                                    for (var i = 1; i <= player.countMark('hpp_cangchu'); i++) {
                                        var cn = get.cnNumber(i, true);
                                        map[cn] = i;
                                        list.push(cn);
                                    }
                                    list.push('cancel2');
                                    event.map = map;
                                    player.chooseControl(list).set('prompt', get.prompt('hpp_liangying')).set('prompt2', '摸至多' + get.cnNumber(player.countMark('hpp_cangchu')) + '张牌，然后交给等量的角色各一张牌').set('ai', function () {
                                        var player = _status.event.player;
                                        var num = Math.min(player.countMark('hpp_cangchu'), game.countPlayer(function (current) {
                                            return get.attitude(player, current) > 0;
                                        }));
                                        if (num > 0) return get.cnNumber(num, true);
                                        return 'cancel2';
                                    });
                                    'step 1'
                                    event.list = [];
                                    if (result.control == 'cancel2') { event.finish(); return; }
                                    player.logSkill('hpp_liangying');
                                    var num = event.map[result.control] || 1;
                                    event.num = num;
                                    player.draw(num);
                                    'step 2'
                                    var num = Math.min(event.num, player.countCards('he'), game.players.length - 1);
                                    var next = player.chooseCardTarget({
                                        prompt: '粮营：将' + get.cnNumber(num - 1) + '至' + get.cnNumber(num) + '张牌交给其他角色',
                                        position: 'he',
                                        animate: false,
                                        filterCard: function (card) {
                                            for (var CT of _status.event.list) {
                                                if (CT.card == card) return false;
                                            }
                                            return true;
                                        },
                                        filterTarget: function (card, player, target) {
                                            for (var CT of _status.event.list) {
                                                if (CT.target == target) return false;
                                            }
                                            return target != player;
                                        },
                                        ai1: function (card) {
                                            if (card.name == 'shan') return 1;
                                            return Math.random();
                                        },
                                        ai2: function (target) {
                                            var player = _status.event.player;
                                            return get.attitude(player, target);
                                        },
                                    });
                                    next.set('list', event.list);
                                    if (num - event.list.length > 1) next.set('forced', true);
                                    'step 3'
                                    if (result.bool) {
                                        var num = Math.min(event.num, player.countCards('he'), game.players.length - 1);
                                        var CT = {
                                            target: result.targets[0],
                                            card: result.cards[0],
                                        };
                                        player.addGaintag(result.cards, 'olsujian_given');
                                        event.list.push(CT);
                                        if (num - event.list.length >= 1) event.goto(2);
                                    }
                                    else if (!event.list.length > 0) event.finish();
                                    'step 4'
                                    var list = [];
                                    var cards = [];
                                    for (var obj of event.list) {
                                        cards.push(obj.card);
                                        list.push([obj.target, obj.card]);
                                        player.line(obj.target);
                                    }
                                    game.loseAsync({
                                        gain_list: list,
                                        player: player,
                                        cards: cards,
                                        giver: player,
                                        animate: 'giveAuto',
                                    }).setContent('gaincardMultiple');
                                },
                            },
                            hpp_shishou: {
                                audio: 'reshishou',
                                trigger: { player: ['useCard', 'damageEnd'] },
                                filter: function (event, player) {
                                    if (!player.countMark('hpp_cangchu')) return false;
                                    return (event.name == 'damage') ? (event.nature == 'fire') : (event.card && event.card.name == 'jiu');
                                },
                                forced: true,
                                content: function () {
                                    player.removeMark('hpp_cangchu', 1);
                                },
                            },

                            // 大乔
                            hpp_wanrong: {
                                enable: 'phaseUse',
                                usable: 1,
                                discard: false,
                                lose: false,
                                delay: false,
                                filter: function (event, player) {
                                    return player.countCards('hes', { suit: 'diamond' }) > 0;
                                },
                                position: 'hes',
                                filterCard: { suit: 'diamond' },
                                filterTarget: function (card, player, target) {
                                    if (get.position(ui.selected.cards[0]) != 's' && lib.filter.cardDiscardable(ui.selected.cards[0], player, 'reguose') && target.hasJudge('lebu')) return true;
                                    if (player == target) return false;
                                    if (!game.checkMod(ui.selected.cards[0], player, 'unchanged', 'cardEnabled2', player)) return false;
                                    return player.canUse({ name: 'lebu', cards: ui.selected.cards }, target);
                                },
                                check: function (card) {
                                    return 7 - get.value(card);
                                },
                                content: function () {
                                    if (target.hasJudge('lebu')) {
                                        player.discard(cards);
                                        target.discard(target.getJudge('lebu'));
                                    }
                                    else player.useCard({ name: 'lebu' }, target, cards).audio = false;
                                },
                                ai: {
                                    result: {
                                        target: function (player, target) {
                                            if (target.hasJudge('lebu')) return -get.effect(target, { name: 'lebu' }, player, target);
                                            return get.effect(target, { name: 'lebu' }, player, target);
                                        },
                                    },
                                    order: 9,
                                },
                            },
                            hpp_guose: {
                                audio: 'reguose',
                                trigger: { player: 'loseEnd' },
                                filter: function (event, player) {
                                    for (var card of event.cards2) {
                                        if (get.suit(card) == 'diamond') return true;
                                    }
                                    return false;
                                },
                                forced: true,
                                locked: true,
                                content: function () {
                                    player.draw();
                                },
                            },
                            hpp_liuli: {
                                audio: 'liuli',
                                audioname: ['re_daqiao', 'daxiaoqiao'],
                                trigger: { target: 'useCardToTarget' },
                                direct: true,
                                preHidden: true,
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    if (player.countCards('he') == 0) return false;
                                    return game.hasPlayer(function (current) {
                                        return player.inRange(current) && current != event.player &&
                                            current != player && lib.filter.targetEnabled(event.card, event.player, current);
                                    });
                                },
                                content: function () {
                                    "step 0"
                                    var next = player.chooseCardTarget({
                                        position: 'he',
                                        filterCard: lib.filter.cardDiscardable,
                                        filterTarget: function (card, player, target) {
                                            var trigger = _status.event;
                                            if (player.inRange(target) && target != trigger.source) {
                                                if (lib.filter.targetEnabled(trigger.card, trigger.source, target)) return true;
                                            }
                                            return false;
                                        },
                                        ai1: function (card) {
                                            return get.unuseful(card) + 9;
                                        },
                                        ai2: function (target) {
                                            if (_status.event.player.countCards('h', 'shan')) {
                                                return -get.attitude(_status.event.player, target);
                                            }
                                            if (get.attitude(_status.event.player, target) < 5) {
                                                return 6 - get.attitude(_status.event.player, target);
                                            }
                                            if (_status.event.player.hp == 1 && player.countCards('h', 'shan') == 0) {
                                                return 10 - get.attitude(_status.event.player, target);
                                            }
                                            if (_status.event.player.hp == 2 && player.countCards('h', 'shan') == 0) {
                                                return 8 - get.attitude(_status.event.player, target);
                                            }
                                            return -1;
                                        },
                                        prompt: get.prompt('hpp_liuli'),
                                        prompt2: '弃置一张牌，将此【杀】转移给攻击范围内的一名其他角色',
                                        source: trigger.player,
                                        card: trigger.card,
                                    }).setHiddenSkill(event.name);
                                    "step 1"
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill(event.name, target);
                                        player.discard(result.cards);
                                        var evt = trigger.getParent();
                                        evt.triggeredTargets2.remove(player);
                                        evt.targets.remove(player);
                                        evt.targets.push(target);
                                    }
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (target.countCards('he') == 0) return;
                                            if (card.name != 'sha') return;
                                            var min = 1;
                                            var friend = get.attitude(player, target) > 0;
                                            var vcard = { name: 'shacopy', nature: card.nature, suit: card.suit };
                                            var players = game.filterPlayer();
                                            for (var i = 0; i < players.length; i++) {
                                                if (player != players[i] &&
                                                    get.attitude(target, players[i]) < 0 &&
                                                    target.canUse(card, players[i])) {
                                                    if (!friend) return 0;
                                                    if (get.effect(players[i], vcard, player, player) > 0) {
                                                        if (!player.canUse(card, players[0])) {
                                                            return [0, 0.1];
                                                        }
                                                        min = 0;
                                                    }
                                                }
                                            }
                                            return min;
                                        }
                                    }
                                }
                            },

                            // 邓艾
                            hpp_tuntian: {
                                audio: 'tuntian',
                                subSkill: {
                                    tuntian: {
                                        audio: 'tuntian',
                                        inherit: 'tuntian',
                                    },
                                },
                                group: ['hpp_tuntian_tuntian', 'tuntian_dist'],
                                trigger: { player: 'phaseEnd' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('h', get.prompt('hpp_tuntian'), '弃置一张牌并进行“田”判定').set('ai', function (card) {
                                        var player = _status.event.player;
                                        return 7 - get.value(card, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_tuntian');
                                        var next = game.createEvent('hpp_tuntian');
                                        next.player = player;
                                        next.setContent(lib.skill.tuntian.content);
                                    }
                                },
                            },

                            // 典韦
                            hpp_qiangxi: {
                                group: 'hpp_qiangxi_qiangxi',
                                audio: 'qiangxi',
                                trigger: { global: 'damageBegin2' },
                                filter: function (event, player) {
                                    return event.player != player && player.countCards('he', { type: 'equip' }) > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('he', get.prompt('hpp_qiangxi', trigger.player), '弃置一张装备牌并令此伤害+1', function (card) {
                                        return get.type(card) == 'equip';
                                    }).set('goon', get.damageEffect(trigger.player, player, player) > 0).set('ai', function (card) {
                                        if (trigger.player.getEquip(2) != undefined && trigger.player.getEquip(2) == 'baiyin') {
                                            return 0;
                                        }
                                        if (_status.event.goon) return 12 - get.value(card);
                                        return 0;
                                    }).logSkill = ['hpp_qiangxi', trigger.player];
                                    'step 1'
                                    if (result.bool) trigger.num++;
                                },
                                ai: { expose: 0.25 },
                                subSkill: {
                                    qiangxi: {
                                        audio: 'qiangxi',
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (target) {
                                                return player.inRange(target) && !target.hasSkill('hpp_qiangxi_off');
                                            });
                                        },
                                        filterTarget: function (card, player, target) {
                                            if (player == target) return false;
                                            if (target.hasSkill('hpp_qiangxi_off')) return false;
                                            return player.inRange(target);
                                        },
                                        prompt: '失去1点体力并摸一张牌，对一名其他角色造成1点伤害',
                                        content: function () {
                                            'step 0'
                                            player.loseHp();
                                            player.draw();
                                            'step 1'
                                            target.addTempSkill('hpp_qiangxi_off');
                                            target.damage();
                                        },
                                        ai: {
                                            order: 8.5,
                                            result: {
                                                target: function (player, target) {
                                                    var bool = (lib.translate[player.identity] == '主' || lib.translate[player.identity] == '内' || (get.mode() == 'identity' && player.hasSkill('olzaowang2') && lib.translate[player.identity] != 'nei'));
                                                    if (bool && target.hp - player.hp > 1) return 0;
                                                    if (!bool && player.hp < 2 && !player.countCards('hs', { name: ['tao', 'jiu'] })) return 0;
                                                    return -1;
                                                },
                                            },
                                        },
                                    },
                                    off: { charlotte: true },
                                },
                            },

                            // 貂蝉
                            hpp_lijian: {
                                onChooseToUse: function (event) {
                                    if (event.type == 'phase' && !game.online) {
                                        var evtx = event.getParent('phaseUse');
                                        var list = [], player = event.player;
                                        for (var target of game.filterPlayer2()) {
                                            if (target.getHistory('damage', function (evt) {
                                                return evt.card && evt.card.name == 'juedou' && evt.getParent(3).name == 'hpp_lijian' && evt.getParent(3).player == player;
                                            }).length) list.push(target);
                                        }
                                        event.set('hpp_lijian_targets', list);
                                    }
                                },
                                audio: 'lijian',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        if (event.hpp_lijian_targets.contains(target)) return false;
                                        return game.hasPlayer(function (current) {
                                            if (event.hpp_lijian_targets.contains(current)) return false;
                                            return current != target && current.canUse({ name: 'juedou' }, target);
                                        });
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    if (_status.event.hpp_lijian_targets.contains(target)) return false;
                                    if (ui.selected.targets.length) return target.canUse({ name: 'juedou' }, ui.selected.targets[0]);
                                    return game.hasPlayer(function (current) {
                                        return current.canUse({ name: 'juedou' }, target);
                                    });
                                },
                                selectTarget: 2,
                                targetprompt: ['先出杀', '后出杀'],
                                multitarget: true,
                                filterCard: true,
                                check: function (card) {
                                    return 10 - get.value(card);
                                },
                                position: 'he',
                                usable: 2,
                                content: function () {
                                    targets[1].useCard({ name: 'juedou', isCard: true }, 'nowuxie', targets[0], 'noai').animate = false;
                                    game.delay(0.5);
                                },
                                ai: {
                                    order: 8,
                                    expose: 0.4,
                                    threaten: 4.8,
                                    result: {
                                        target: function (player, target) {
                                            if (!ui.selected.targets.length) return -3;
                                            return get.effect(target, { name: 'juedou' }, ui.selected.targets[0], target);
                                        },
                                    },
                                },
                            },
                            hpp_biyue: {
                                audio: 'biyue',
                                trigger: { player: 'phaseJieshuBegin' },
                                forced: true,
                                locked: false,
                                content: function () {
                                    player.draw(1 + player.getHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_lijian';
                                    }).length);
                                },
                            },

                            // 丁奉
                            hpp_duanbing: {
                                audio: 'duanbing',
                                group: 'hpp_duanbing_sha',
                                preHidden: ['hpp_duanbing_sha'],
                                inherit: 'reduanbing',
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_duanbing'), '为' + get.translation(trigger.card) + '增加一个目标', function (card, player, target) {
                                        return !_status.event.sourcex.includes(target) && get.distance(player, target) <= 1 && player.canUse(_status.event.card, target);
                                    }).set('sourcex', trigger.targets).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, _status.event.card, player, player);
                                    }).set('card', trigger.card).setHiddenSkill(event.name);
                                    'step 1'
                                    if (result.bool) {
                                        if (!event.isMine() && !event.isOnline()) game.delayx();
                                        event.targets = result.targets;
                                    }
                                    else event.finish();
                                    'step 2'
                                    player.logSkill('hpp_duanbing', targets);
                                    trigger.targets.addArray(targets);
                                },
                                subSkill: {
                                    sha: {
                                        audio: 'duanbing',
                                        trigger: { player: 'useCardToPlayered' },
                                        forced: true,
                                        filter: function (event, player) {
                                            if (player.getHistory('useCard', evt => evt.card.name == 'sha').indexOf(event.getParent()) != 0) return false;
                                            return event.card.name == 'sha' && !event.getParent().directHit.includes(event.target) && get.distance(player, event.target) <= 1;
                                        },
                                        logTarget: 'target',
                                        content: function () {
                                            var id = trigger.target.playerid;
                                            var map = trigger.getParent().customArgs;
                                            if (!map[id]) map[id] = {};
                                            if (typeof map[id].shanRequired == 'number') map[id].shanRequired++;
                                            else map[id].shanRequired = 2;
                                        },
                                        ai: {
                                            directHit_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg.card.name != 'sha' || arg.target.countCards('h', 'shan') > 1 || player.getHistory('useCard', evt => evt.card.name == 'sha').length || get.distance(player, arg.target) > 1) return false;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_fenxun: {
                                group: 'hpp_fenxun_draw',
                                audio: 'fenxun',
                                inherit: 'refenxun',
                                content: function () {
                                    player.addTempSkill('hpp_fenxun2');
                                    player.markAuto('hpp_fenxun2', targets);
                                },
                                subSkill: {
                                    draw: {
                                        audio: 'fenxun',
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return game.hasPlayer(current => get.distance(player, current) <= 1 && current.getHistory('damage').length);
                                        },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            player.draw(game.countPlayer(current => get.distance(player, current) <= 1 && current.getHistory('damage').length));
                                        },
                                    },
                                },
                            },
                            hpp_fenxun2: {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    globalFrom: function (from, to) {
                                        if (from.getStorage('hpp_fenxun2').includes(to)) return -Infinity;
                                    },
                                },
                            },

                            // 董白
                            hpp_lianzhu: {
                                audio: 'lianzhu',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('he');
                                },
                                filterTarget: lib.filter.notMe,
                                filterCard: true,
                                check: function (card) {
                                    var num = get.value(card);
                                    if (get.color(card) == 'black') {
                                        if (num >= 6) return 0;
                                        return 9 - num;
                                    }
                                    else return 7 - num;
                                },
                                usable: 1,
                                discard: false,
                                lose: false,
                                delay: false,
                                position: 'he',
                                content: function () {
                                    'step 0'
                                    player.showCards(cards, '连珠展示的牌');
                                    game.delay();
                                    player.give(cards, target);
                                    'step 1'
                                    if (get.color(cards[0], player) == 'red') {
                                        player.chooseDrawRecover(2, true);
                                        event.finish();
                                    }
                                    else {
                                        target.chooseToDiscard('he', 2, '弃置两张牌，或令' + get.translation(player) + '摸两张牌').set('ai', function (card) {
                                            if (!_status.event.goon) return -get.value(card);
                                            return 6 - get.value(card);
                                        }).set('goon', get.attitude(target, player) <= 0);
                                    }
                                    'step 2'
                                    if (!result.bool) player.draw(2);
                                },
                                ai: {
                                    order: 3,
                                    expose: 0.2,
                                    result: {
                                        target: function (player, target) {
                                            if (ui.selected.cards.length && get.color(ui.selected.cards[0]) == 'red') {
                                                var att = get.attitude(player, target);
                                                return 2 + get.sgn(att) + att / 114514;
                                            }
                                            return -1;
                                        },
                                    },
                                },
                            },
                            hpp_xiahui: {
                                audio: 'xiahui',
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (get.color(card, player) == 'black') return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && get.color(card, player) == 'black') return false;
                                    },
                                },
                                trigger: { global: 'phaseEnd' },
                                forced: true,
                                logTarget: 'player',
                                filter: function (event, player) {
                                    var target = event.player;
                                    return target != player && target.getHistory('lose', function (evt) {
                                        for (var i in evt.gaintag_map) {
                                            if (evt.gaintag_map[i].contains('hpp_xiahui')) return true;
                                        }
                                    }).length;
                                },
                                content: function () {
                                    trigger.player.loseHp();
                                },
                                group: 'hpp_xiahui_gain',
                                subSkill: {
                                    gain: {
                                        trigger: { global: 'gainEnd' },
                                        forced: true,
                                        popup: false,
                                        filter: function (event, player) {
                                            if (player == event.player) return false;
                                            var evt = event.getl(player);
                                            return evt && evt.cards2 && evt.cards2.filter(function (card) {
                                                return get.color(card, player) == 'black';
                                            }).length > 0;
                                        },
                                        content: function () {
                                            trigger.player.addSkill('hpp_xiahui_block');
                                            var cards = trigger.getl(player).cards2.filter(function (card) {
                                                return get.color(card, player) == 'black';
                                            });
                                            trigger.player.addGaintag(cards, 'hpp_xiahui');
                                        },
                                    },
                                    block: {
                                        mod: {
                                            cardEnabled2: function (card) {
                                                if (get.itemtype(card) == 'card' && card.hasGaintag('hpp_xiahui')) return false;
                                            },
                                            cardDiscardable: function (card) {
                                                if (card.hasGaintag('hpp_xiahui')) return false;
                                            },
                                        },
                                        charlotte: true,
                                        forced: true,
                                        popup: false,
                                        trigger: { player: 'changeHp' },
                                        filter: function (event, player) {
                                            return event.num < 0;
                                        },
                                        content: function () {
                                            player.removeSkill('hpp_xiahui_block');
                                        },
                                        onremove: function (player) {
                                            player.removeGaintag('hpp_xiahui');
                                        },
                                    },
                                },
                            },

                            // 董允
                            hpp_bingzheng: {
                                audio: 'bingzheng',
                                trigger: { player: 'phaseUseEnd' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_bingzheng')).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        var nh = target.countCards('h');
                                        if (att > 0) {
                                            if (nh == target.hp - 1) {
                                                if (player == target) return att + 1;
                                                return att + 2;
                                            }
                                            if (player == target && player.needsToDiscard()) return att / 3;
                                            return att;
                                        }
                                        else {
                                            if (nh == target.hp + 1) return -att;
                                            if (nh == 0) return 0;
                                            return -att / 2;
                                        }
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_bingzheng', target);
                                        if (target.countCards('h')) {
                                            player.chooseControl().set('choiceList', [
                                                '令' + get.translation(target) + '摸一张牌',
                                                '令' + get.translation(target) + '弃置一张手牌'
                                            ]).set('ai', function () {
                                                return get.attitude(player, target) > 0 ? 0 : 1;
                                            });
                                        }
                                        else event._result = { index: 0 };
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.index == 0) target.draw();
                                    else target.chooseToDiscard('h', true);
                                    'step 3'
                                    if (target.countCards('h') == target.hp) {
                                        player.draw();
                                        if (target == player) { event.finish(); return; }
                                        var next = player.chooseCard('是否交给' + get.translation(target) + '一张牌？', 'he');
                                        next.set('ai', function (card) {
                                            if (_status.event.du && card.name == 'du') return 114514 + 1919810;
                                            if (get.position(card) != 'h') return 0;
                                            if (_status.event.shan && card.name == 'shan') return 11;
                                            if (_status.event.goon) return 10 - get.value(card);
                                            return -get.value(card);
                                        });
                                        if (get.attitude(player, target) > 1 && player.countCards('h', 'shan') > 1 && player.countCards('h') > target.countCards('h')) next.set('shan', true);
                                        if (get.attitude(player, target) > 0 && player.needsToDiscard()) next.set('goon', true);
                                        if (get.attitude(player, target) <= 0) next.set('du', true);
                                    }
                                    else event.finish();
                                    'step 4'
                                    if (result.bool) target.gain(result.cards, player, 'giveAuto');
                                },
                            },

                            // 董卓
                            hpp_jiuchi: {
                                audio: 'jiuchi',
                                enable: 'chooseToUse',
                                filterCard: function (card) {
                                    return get.color(card) == 'black';
                                },
                                viewAs: { name: 'jiu' },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hs', { color: 'black' })) return false;
                                    return true;
                                },
                                prompt: '将一张黑色手牌当酒使用',
                                check: function (card) {
                                    if (_status.event.type == 'dying') return 1 / Math.max(0.1, get.value(card));
                                    return 4 - get.value(card);
                                },
                            },
                            hpp_roulin: {
                                audio: 'roulin',
                                trigger: { player: 'useCardToPlayered', target: 'useCardToTargeted' },
                                forced: true,
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    if (player == event.player) {
                                        return event.target.hasSex('female');
                                    }
                                    return event.player.hasSex('female');
                                },
                                check: function (event, player) {
                                    return player == event.player;
                                },
                                content: function () {
                                    var id = (player == trigger.player ? trigger.target : player).playerid;
                                    var map = trigger.getParent().customArgs;
                                    if (!map[id]) map[id] = {};
                                    if (typeof map[id].shanRequired == 'number') {
                                        map[id].shanRequired++;
                                    }
                                    else {
                                        map[id].shanRequired = 2;
                                    }
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (arg.card.name != 'sha' || !arg.target.hasSex('female') || arg.target.countCards('h', 'shan') > 1) return false;
                                    },
                                },
                            },
                            hpp_benghuai: {
                                audio: 'benghuai',
                                trigger: { player: 'phaseJieshuBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseControl('hpp_benghuai_hp', 'hpp_benghuai_maxHp', function (event, player) {
                                        if (player.isDamaged()) return 'hpp_benghuai_maxHp';
                                        return 'hpp_benghuai_hp';
                                    }).set('prompt', '崩坏：失去1点体力或减1点体力上限，并摸一张牌');
                                    'step 1'
                                    if (result.control == 'hpp_benghuai_hp') player.loseHp();
                                    else player.loseMaxHp();
                                    player.draw();
                                },
                                ai: {
                                    threaten: 0.7,
                                    neg: true,
                                },
                            },
                            hpp_baonue: {
                                unique: true,
                                group: 'hpp_baonue2',
                                audioname: ['re_dongzhuo'],
                                audio: 'baonue2',
                                zhuSkill: true,
                            },
                            hpp_baonue2: {
                                audio: 'baonue2',
                                audioname: ['re_dongzhuo'],
                                trigger: { global: 'damageSource' },
                                filter: function (event, player) {
                                    if (player == event.source || !event.source || event.source.group != 'qun') return false;
                                    return player.hasZhuSkill('hpp_baonue', event.source);
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    trigger.source.chooseBool('是否对' + get.translation(player) + '发动【暴虐】？').set('choice', get.attitude(trigger.source, player) > 0);
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_baonue');
                                        trigger.source.line(player, 'green')
                                        trigger.source.judge(function (card) {
                                            if (get.suit(card) == 'spade') return 4;
                                            return 0;
                                        }).judge2 = function (result) {
                                            return result.bool ? true : false;
                                        };
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 2'
                                    if (result.suit == 'spade') {
                                        player.recover();
                                    }
                                }
                            },

                            // 杜夫人
                            hpp_yise: {
                                audio: 'yise',
                                trigger: { global: 'gainAfter', player: 'loseAsyncAfter' },
                                filter: function (event, player) {
                                    if (event.name == 'loseAsync') {
                                        if (event.type != 'gain') return false;
                                    }
                                    var cards = event.getl(player).cards2;
                                    return game.hasPlayer(function (current) {
                                        if (current == player) return false;
                                        var cardsx = event.getg(current);
                                        for (var i of cardsx) {
                                            if (cards.contains(i)) return true;
                                        }
                                        return false;
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var cards = trigger.getl(player).cards2;
                                    event.cards = cards;
                                    event.targets = game.filterPlayer(function (current) {
                                        if (current == player) return false;
                                        var cardsx = trigger.getg(current);
                                        for (var i of cardsx) {
                                            if (cards.contains(i)) return true;
                                        }
                                        return false;
                                    }).sortBySeat();
                                    'step 1'
                                    var target = targets.shift();
                                    var cardsx = trigger.getg(target);
                                    var next = game.createEvent('hpp_yise_insert');
                                    next.player = player;
                                    next.target = target;
                                    next.cards = cardsx;
                                    next.setContent(lib.skill.hpp_yise.contentx);
                                    if (targets.length > 0) event.redo();
                                },
                                contentx: function () {
                                    'step 0'
                                    event.logged = false;
                                    for (var i of cards) {
                                        event[get.color(i, player)] = true;
                                        if (event.red && event.black) break;
                                    }
                                    if (event.red) {
                                        var list = ['摸牌'], choiceList = [
                                            '令自己摸一张牌',
                                            '令' + get.translation(target) + '回复1点体力'
                                        ];
                                        if (target.isDamaged()) list.push('回复体力');
                                        else choiceList[1] = '<span style="opacity:0.5">' + choiceList[1] + '</span>';
                                        list.push('cancel2');
                                        player.chooseControl(list).set('prompt', get.prompt('hpp_yise', target)).set('ai', function () {
                                            if (list.contains('回复体力') && get.recoverEffect(_status.event.getParent().target, _status.event.player, _status.event.player) > 0) return '回复体力';
                                            return '摸牌';
                                        }).set('choiceList', choiceList);
                                    }
                                    'step 1'
                                    if (event.red && result.control != 'cancel2') {
                                        event.logged = true;
                                        player.logSkill('hpp_yise', target);
                                        if (result.control == '摸牌') player.draw();
                                        else target.recover();
                                    }
                                    if (!event.black) event.finish();
                                    'step 2'
                                    player.chooseBool(get.prompt('hpp_yise', target), '令' + get.translation(target) + '下次受到【杀】造成的伤害+1').set('choice', get.attitude(player, target) < 0);
                                    'step 3'
                                    if (result.bool) {
                                        if (!event.logged) player.logSkill('hpp_yise', target);
                                        else player.line(target);
                                        target.addMark('yise_damage', 1, false);
                                        target.addSkill('yise_damage');
                                    }
                                },
                            },
                            hpp_shunshi: {
                                audio: 'shunshi',
                                trigger: { player: ['damageEnd', 'phaseZhunbeiBegin'] },
                                filter: function (event, player) {
                                    if (event.name == 'damage' && player == _status.currentPhase) {
                                        return false;
                                    }
                                    return player.countCards('he');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCardTarget({
                                        prompt: get.prompt2('hpp_shunshi'),
                                        filterTarget: lib.filter.notMe,
                                        filterCard: true,
                                        position: 'he',
                                        ai1: function (card) {
                                            var player = _status.event.player;
                                            if (player.hasSkill('hpp_yise')) {
                                                if (get.color(card, player) == 'red' && game.hasPlayer(function (current) {
                                                    return current != player && current.isDamaged() && get.recoverEffect(current, player, player) > 0;
                                                })) return 10 - get.value(card);
                                                if (get.color(card, player) == 'black') return 4 - get.value(card);
                                            }
                                            return 8 - get.value(card);
                                        },
                                        ai2: function (target) {
                                            var player = _status.event.player, card = ui.selected.cards[0];
                                            var att = get.attitude(player, target);
                                            if (player.hasSkill('hpp_yise')) {
                                                if (get.color(card) == 'red' && target.isDamaged()) return 2 * get.recoverEffect(target, player, player) + get.sgn(att);
                                                if (get.color(card) == 'black') return -att;
                                            }
                                            if (get.value(card, target) < 0) return -att;
                                            if (get.value(card, target) < 1) return 0.01 * -att;
                                            return Math.max(1, get.value(card, target) - get.value(card, player)) * att;
                                        },
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_shunshi', target);
                                        player.give(result.cards, target);
                                        for (var phase of ['phaseDraw', 'phaseUse', 'phaseDiscard']) {
                                            player.addTempSkill('hpp_shunshi_' + phase, { player: phase + 'After' });
                                            player.addMark('hpp_shunshi_' + phase, 1, false);
                                        }
                                    }
                                },
                                subSkill: {
                                    phaseDraw: {
                                        charlotte: true,
                                        onremove: true,
                                        mark: true,
                                        marktext: '摸',
                                        intro: { content: '下个摸牌阶段多摸#张牌' },
                                        trigger: { player: 'phaseDrawBegin2' },
                                        filter: function (event, player) {
                                            return !event.numFixed;
                                        },
                                        direct: true,
                                        content: function () {
                                            trigger.num += player.countMark('hpp_shunshi_phaseDraw');
                                        },
                                    },
                                    phaseUse: {
                                        charlotte: true,
                                        onremove: true,
                                        mark: true,
                                        marktext: '出',
                                        intro: { content: '下个出牌阶段使用【杀】的次数上限+#，且使用【杀】无视防具' },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (player.isPhaseUsing() && card.name == 'sha') return num + player.countMark('hpp_shunshi_phaseUse');
                                            },
                                        },
                                        ai: {
                                            unequip: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (!arg || !arg.card || arg.card.name != 'sha' || !player.isPhaseUsing()) return false;
                                            },
                                        },
                                    },
                                    phaseDiscard: {
                                        charlotte: true,
                                        onremove: true,
                                        mark: true,
                                        marktext: '弃',
                                        intro: { content: '下个弃牌阶段手牌上限+#' },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                if (player.hasSkill('hpp_shunshi_phaseDiscard2')) return num + player.countMark('hpp_shunshi_phaseDiscard');
                                            },
                                        },
                                        trigger: { player: 'phaseDiscardBefore' },
                                        direct: true,
                                        content: function () {
                                            player.addTempSkill('hpp_shunshi_phaseDiscard2', { player: 'phaseDiscardAfter' });
                                        },
                                    },
                                    phaseDiscard2: { charlotte: true },
                                },
                            },

                            // 法正
                            hpp_enyuan: {
                                group: 'hpp_enyuan_draw',
                                subfrequent: ['draw'],
                                audio: 'xinenyuan2',
                                trigger: { player: 'gainEnd' },
                                filter: function (event, player) {
                                    return event.source && event.source.isIn() && event.source != player;
                                },
                                logTarget: 'source',
                                check: function (event, player) {
                                    return get.attitude(player, event.source) > 0;
                                },
                                content: function () {
                                    trigger.source.draw();
                                },
                                subSkill: {
                                    draw: {
                                        audio: 'xinenyuan',
                                        trigger: { global: 'gainAfter' },
                                        frequent: true,
                                        prompt: '是否发动【恩怨】摸一张牌？',
                                        filter: function (event, player) {
                                            if (event.player != player) {
                                                var evt = event.getl(player);
                                                return evt && evt.hs && evt.hs.length > 0;
                                            }
                                            return false;
                                        },
                                        preHidden: true,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },
                            hpp_xuanhuo: {
                                audio: 'xinxuanhuo',
                                trigger: { player: 'phaseDrawBegin1' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_xuanhuo'), function (card, player, target) {
                                        return player != target;
                                    }).set('ai', function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (target.countCards('he') == 0) return 0;
                                        if (att < 0) return -att * 2;
                                        return att / 3;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_xuanhuo', result.targets);
                                        event.target = result.targets[0];
                                    }
                                    else event.finish();
                                    'step 2'
                                    player.chooseTarget('眩惑：请选择' + get.translation(target) + '出杀的目标', true, function (card, player, target) {
                                        return _status.event.target.canUse('sha', target);
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (!_status.event.target.canUse('sha', target) && get.attitude(player, _status.event.target) < 0) return 8 + get.attitude(player, target);
                                        if (!_status.event.target.inRange(target) && get.attitude(player, _status.event.target) < 0) return 5 + get.attitude(player, target);
                                        return get.effect(target, { name: 'sha' }, _status.event.target, player);
                                    }).set('target', event.target);
                                    'step 3'
                                    if (result.bool && result.targets.length) {
                                        game.log(player, '指定的出杀目标为', result.targets[0]);
                                        event.target.line(result.targets[0]);
                                        target.chooseToUse(function (card, player, event) {
                                            if (get.name(card) != 'sha') return false;
                                            return lib.filter.filterCard.apply(this, arguments);
                                        }, '眩惑：对' + get.translation(result.targets[0]) + '使用一张杀，或令' + get.translation(player) + '获得你的一张牌').set('targetRequired', true).set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                            if (target != _status.event.sourcex && !ui.selected.targets.contains(_status.event.sourcex)) return false;
                                            return lib.filter.filterTarget.apply(this, arguments);
                                        }).set('sourcex', result.targets[0]);
                                    }
                                    else event.bool = true;
                                    'step 4'
                                    if (event.bool || result.bool == false) player.gainPlayerCard('he', event.target, true);
                                },
                            },

                            // 伏皇后
                            hpp_zhuikong: {
                                audio: 'rezhuikong',
                                trigger: { global: 'phaseBegin' },
                                check: function (event, player) {
                                    if (get.attitude(player, event.player) < -2) {
                                        var cards = player.getCards('h');
                                        if (cards.length > player.hp) return true;
                                        for (var i = 0; i < cards.length; i++) {
                                            var useful = get.useful(cards[i]);
                                            if (useful < 5) return true;
                                            if (get.number(cards[i]) > 9 && useful < 7) return true;
                                        }
                                    }
                                    return false;
                                },
                                filter: function (event, player) {
                                    return player.canCompare(event.player);
                                },
                                logTarget: 'player',
                                content: function () {
                                    'step 0'
                                    player.chooseToCompare(trigger.player);
                                    'step 1'
                                    if (result.bool) trigger.player.addTempSkill('zishou2');
                                    else {
                                        trigger.player.addTempSkill('hpp_zhuikong_distance');
                                        trigger.player.storage.hpp_zhuikong_distance.push(player);
                                    }
                                },
                                subSkill: {
                                    distance: {
                                        init: function (player) {
                                            player.storage.hpp_zhuikong_distance = [];
                                        },
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            globalFrom: function (from, to, distance) {
                                                if (from.storage.hpp_zhuikong_distance.contains(to)) return -Infinity;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_qiuyuan: {
                                audio: 'qiuyuan',
                                trigger: { target: 'useCardToTarget' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && game.players.length > 2;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_qiuyuan'), [1, 3], function (card, player, target) {
                                        return target != player && !_status.event.targets.contains(target) && _status.event.playerx.canUse('sha', target, false);
                                    }).set('ai', function (target) {
                                        var trigger = _status.event.getTrigger();
                                        var player = _status.event.player;
                                        return get.effect(target, trigger.card, trigger.player, player);
                                    }).set('targets', trigger.targets).set('playerx', trigger.player);
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        event.targets = targets;
                                        player.logSkill('hpp_qiuyuan', targets);
                                        event.num = 0;
                                        event.list = [];
                                    }
                                    else event.finish();
                                    'step 2'
                                    var target = targets[num];
                                    event.target = target;
                                    target.chooseCard({ name: 'shan' }, '交给' + get.translation(player) + '一张【闪】，或成为' + get.translation(trigger.card) + '的额外目标并弃置一张牌');
                                    'step 3'
                                    if (result.bool) player.gain(result.cards, target, 'giveAuto');
                                    else {
                                        trigger.getParent().targets.push(target);
                                        trigger.getParent().triggeredTargets2.push(target);
                                        game.log(target, '成为了', trigger.card, '的额外目标');
                                        target.chooseToDiscard('he', true);
                                    }
                                    if (event.num < event.targets.length - 1) {
                                        event.num++;
                                        event.goto(2);
                                    }
                                    'step 4'
                                    game.delayx();
                                },
                                ai: {
                                    expose: 0.2,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (card.name != 'sha') return;
                                            var players = game.filterPlayer();
                                            if (get.attitude(player, target) <= 0) {
                                                for (var i = 0; i < players.length; i++) {
                                                    var target2 = players[i];
                                                    if (player != target2 && target != target2 && player.canUse(card, target2, false) &&
                                                        get.effect(target2, { name: 'shacopy', nature: card.nature, suit: card.suit }, player, target) > 0 &&
                                                        get.effect(target2, { name: 'shacopy', nature: card.nature, suit: card.suit }, player, player) < 0) {
                                                        if (target.hp == target.maxHp) return 0.3;
                                                        return 0.6;
                                                    }
                                                }
                                            }
                                            else {
                                                for (var i = 0; i < players.length; i++) {
                                                    var target2 = players[i];
                                                    if (player != target2 && target != target2 && player.canUse(card, target2, false) &&
                                                        get.effect(target2, { name: 'shacopy', nature: card.nature, suit: card.suit }, player, player) > 0) {
                                                        if (player.canUse(card, target2)) return;
                                                        if (target.hp == target.maxHp) return [0, 1];
                                                        return [0, 0];
                                                    }
                                                }
                                            }
                                        },
                                    },
                                },
                            },

                            // 甘夫人
                            hpp_shushen: {
                                group: 'hpp_shushen_draw',
                                audio: 'shushen',
                                inherit: 'jsrgjishan',
                                usable: Infinity,
                                content: function () {
                                    'step 0'
                                    trigger.cancel();
                                    player.loseHp();
                                    'step 1'
                                    if (player.isIn() && trigger.player.isIn()) {
                                        var targets = [player, trigger.player];
                                        targets.sortBySeat(_status.currentPhase);
                                        targets[0].draw('nodelay');
                                        targets[1].draw();
                                    }
                                },
                                ai: { threaten: 0.8 },
                                subSkill: {
                                    draw: {
                                        trigger: { player: 'recoverAfter' },
                                        direct: true,
                                        preHidden: true,
                                        content: function () {
                                            'step 0'
                                            event.num = trigger.num || 1;
                                            'step 1'
                                            player.chooseTarget(get.prompt2('hpp_shushen'), lib.filter.notMe).set('ai', function (target) {
                                                return get.attitude(_status.event.player, target);
                                            }).setHiddenSkill('hpp_shushen');
                                            'step 2'
                                            if (result.bool) {
                                                player.logSkill('hpp_shushen', result.targets);
                                                result.targets[0].draw();
                                                if (event.num > 1) {
                                                    event.num--;
                                                    event.goto(1);
                                                }
                                            }
                                        },
                                        ai: { expose: 0.1 },
                                    },
                                },
                            },
                            hpp_huangsi: {
                                audio: 'shenzhi',
                                unique: true,
                                enable: 'chooseToUse',
                                mark: true,
                                limited: true,
                                skillAnimation: true,
                                animationColor: 'fire',
                                filter: function (event, player) {
                                    if (event.type != 'dying') return false;
                                    return event.dying == player;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_huangsi');
                                    if (player.hp < 1) player.recover(1 - player.hp);
                                    event.num = player.countCards('h') + 2;
                                    player.discard(player.getCards('h'));
                                    'step 1'
                                    player.chooseTarget('皇思：是否令一名角色摸' + get.cnNumber(num) + '张牌？').set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        player.line('hpp_shushen', result.targets);
                                        result.targets[0].draw(num);
                                    }
                                },
                                ai: {
                                    order: 0.5,
                                    skillTagFilter: function (player, tag, target) {
                                        if (player != target || player.storage.hpp_huangsi) return false;
                                    },
                                    save: true,
                                    result: {
                                        player: function (player) {
                                            if (player.hp <= 0) return 10;
                                            if (player.hp <= 1 && player.countCards('he') <= 1) return 10;
                                            return 0;
                                        },
                                    },
                                    threaten: function (player, target) {
                                        if (!target.storage.hpp_huangsi) return 0.6;
                                    },
                                },
                            },

                            // 甘宁
                            hpp_qixi: {
                                group: 'qixi',
                                audio: 'qixi',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return target.countDiscardableCards(player, 'he');
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_qixi'), '弃置一名角色的一张牌', function (card, player, target) {
                                        return target.countDiscardableCards(player, 'he');
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_qixi', result.targets);
                                        player.discardPlayerCard(result.targets[0], 'he', true);
                                    }
                                },
                            },
                            hpp_fenwei: {
                                audio: 'fenwei',
                                skillAnimation: true,
                                animationColor: 'wood',
                                unique: true,
                                mark: true,
                                limited: true,
                                trigger: { global: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    if (get.type(event.card) != 'trick') return false;
                                    if (get.info(event.card).multitarget) return false;
                                    if (event.targets.length < 2) return false;
                                    return true;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_fenwei'), '令' + get.translation(trigger.card) + '对任意名角色无效', [1, trigger.targets.length], function (card, player, target) {
                                        return _status.event.targets.contains(target);
                                    }).set('ai', function (target) {
                                        var trigger = _status.event.getTrigger();
                                        return -get.effect(target, trigger.card, trigger.player, _status.event.player);
                                    }).set('targets', trigger.targets);
                                    'step 1'
                                    if (result.bool) {
                                        player.addSkill('hpp_fenwei_huifu');
                                        player.logSkill('hpp_fenwei', result.targets);
                                        player.awakenSkill('hpp_fenwei');
                                        trigger.getParent().excluded.addArray(result.targets);
                                    }
                                    else event.finish();
                                    'step 2'
                                    player.draw();
                                },
                                subSkill: {
                                    huifu: {
                                        charlotte: true,
                                        trigger: {
                                            player: 'loseAfter',
                                            global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                        },
                                        filter: function (event, player) {
                                            if (player.countCards('h')) return false;
                                            if (!player.awakenedSkills.contains('hpp_fenwei')) return false;
                                            var evt = event.getl(player);
                                            return evt && evt.player == player && evt.hs && evt.hs.length > 0;
                                        },
                                        direct: true,
                                        firstDo: true,
                                        content: function () {
                                            player.removeSkill('hpp_fenwei_huifu');
                                            player.restoreSkill('hpp_fenwei');
                                            game.log(player, '复原了技能', '#g【奋威】');
                                        },
                                    },
                                },
                            },

                            // 高顺
                            hpp_xianzhen: {
                                group: 'hpp_xianzhen_miss',
                                audio: 'xianzhen',
                                usable: 1,
                                trigger: { source: 'damageBegin1' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && event.notLink();
                                },
                                forced: true,
                                content: function () {
                                    trigger.num++;
                                },
                                subSkill: {
                                    miss: {
                                        audio: 'xianzhen',
                                        usable: 1,
                                        trigger: { player: 'shaMiss' },
                                        filter: function (event, player) {
                                            return player.countUsed('sha', true) == 1;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },
                            hpp_jinjiu: {
                                mod: {
                                    cardname: function (card, player) {
                                        if (card.name == 'jiu') return 'sha';
                                    },
                                },
                                ai: {
                                    respondSha: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('h', 'jiu')) return false;
                                    },
                                },
                                group: 'hpp_jinjiu_gain',
                                global: 'hpp_jinjiu_usejiu',
                                audio: 'jinjiu',
                                popup: false,
                                silent: true,
                                firstDo: true,
                                trigger: { player: 'useCard1' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && event.addCount !== false && event.cards &&
                                        event.cards.length == 1 && event.cards[0].name == 'jiu';
                                },
                                forced: true,
                                content: function () {
                                    trigger.addCount = false;
                                    if (player.stat[player.stat.length - 1].card.sha > 0) {
                                        player.stat[player.stat.length - 1].card.sha--;
                                    }
                                },
                                subSkill: {
                                    gain: {
                                        trigger: { global: 'useCardAfter' },
                                        forced: true,
                                        audio: 'jinjiu',
                                        filter: function (event, player) {
                                            return event.player != player && event.card.isCard && event.card.name == 'jiu' && event.cards.filterInD().length > 0;
                                        },
                                        logTarget: 'player',
                                        content: function () {
                                            player.gain(trigger.cards.filterInD(), 'gain2');
                                        },
                                    },
                                    usejiu: {
                                        mod: {
                                            cardEnabled: function (card, player) {
                                                if (card.name == 'jiu' && _status.currentPhase && _status.currentPhase != player && _status.currentPhase.hasSkill('hpp_jinjiu')) return false;
                                            },
                                            cardSavable: function (card, player) {
                                                if (card.name == 'jiu' && _status.currentPhase && _status.currentPhase != player && _status.currentPhase.hasSkill('hpp_jinjiu')) return false;
                                            },
                                        },
                                    },
                                },
                            },

                            // 公孙瓒
                            hpp_yicong: {
                                mod: {
                                    globalFrom: function (from, to, current) {
                                        return current - Math.max(0, from.hp);
                                    },
                                    globalTo: function (from, to, current) {
                                        return current + Math.max(0, to.getDamagedHp());
                                    },
                                },
                                ai: { threaten: 0.8 },
                            },
                            hpp_qiaomeng: {
                                audio: 'qiaomeng',
                                trigger: { source: 'damageBegin1' },
                                direct: true,
                                filter: function (event, player) {
                                    if (event._notrigger.contains(event.player)) return false;
                                    return event.card && event.card.name == 'sha' && event.player.countGainableCards(player, 'hej');
                                },
                                content: function () {
                                    'step 0'
                                    player.gainPlayerCard(get.prompt('hpp_qiaomeng', trigger.player), 'hej', trigger.player).set('logSkill', ['hpp_qiaomeng', trigger.player]);
                                    'step 1'
                                    if (result.bool) {
                                        var card = result.cards[0];
                                        if (get.subtype(card) == 'equip3' || get.subtype(card) == 'equip4') trigger.num++;
                                    }
                                },
                            },

                            // 关银屏
                            hpp_xuehen: {
                                audio: 'xueji',
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('he', { color: 'red' }) > 0;
                                },
                                filterTarget: true,
                                selectTarget: function () {
                                    var player = _status.event.player
                                    return [1, Math.max(1, player.getDamagedHp())];
                                },
                                position: 'he',
                                filterCard: { color: 'red' },
                                check: function (card) {
                                    return 8 - get.value(card);
                                },
                                multitarget: true,
                                multiline: true,
                                line: 'fire',
                                content: function () {
                                    'step 0'
                                    event.delay = false;
                                    for (var i = 0; i < targets.length; i++) {
                                        if (!targets[i].isLinked()) {
                                            targets[i].link(true);
                                            event.delay = true;
                                        }
                                    }
                                    'step 1'
                                    if (event.delay) {
                                        game.delay();
                                    }
                                    'step 2'
                                    targets[0].damage('fire', 'nocard');
                                },
                                ai: {
                                    damage: true,
                                    fireAttack: true,
                                    threaten: 1.5,
                                    order: 7,
                                    result: {
                                        target: function (player, target) {
                                            var eff = get.damageEffect(target, player, target, 'fire');
                                            if (target.isLinked()) {
                                                return eff / 10;
                                            }
                                            else {
                                                return eff;
                                            }
                                        }
                                    },
                                }
                            },
                            hpp_huxiao: {
                                audio: 'huxiao',
                                trigger: { source: 'damageSource' },
                                forced: true,
                                filter: function (event, player) {
                                    if (event._notrigger.contains(event.player)) return false;
                                    return event.nature == 'fire';
                                },
                                logTarget: 'player',
                                content: function () {
                                    player.addTempSkill('hpp_huxiao3');
                                    player.markAuto('hpp_huxiao3', [trigger.player]);
                                },
                            },
                            hpp_huxiao3: {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    cardUsableTarget: function (card, player, target) {
                                        if (player.getStorage('hpp_huxiao3').contains(target)) return true;
                                    },
                                },
                                intro: { content: 'players' },
                            },
                            hpp_wuji: {
                                skillAnimation: true,
                                animationColor: 'orange',
                                audio: 'wuji',
                                trigger: { player: 'phaseJieshuBegin' },
                                forced: true,
                                unique: true,
                                juexingji: true,
                                filter: function (event, player) {
                                    return player.getStat('damage') >= 3;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_wuji');
                                    player.gainMaxHp();
                                    player.recover();
                                    'step 1'
                                    var card = get.cardPile('qinglong', 'field');
                                    if (card) player.gain(card, 'gain2', 'log');
                                },
                            },

                            // 关平
                            hpp_longyin: {
                                audio: 'relongyin',
                                shaRelated: true,
                                trigger: { global: 'useCard' },
                                direct: true,
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && player.countCards('he') && event.player.isPhaseUsing();
                                },
                                content: function () {
                                    'step 0'
                                    game.delayx();
                                    var go = false;
                                    if (get.attitude(player, trigger.player) > 0) {
                                        if (get.color(trigger.card) == 'red') {
                                            go = true;
                                        }
                                        else if (trigger.addCount === false || !trigger.player.isPhaseUsing()) go = false;
                                        else if (!trigger.player.hasSkill('paoxiao') &&
                                            !trigger.player.hasSkill('tanlin3') &&
                                            !trigger.player.hasSkill('zhaxiang2') &&
                                            !trigger.player.hasSkill('fengnu') &&
                                            !trigger.player.getEquip('zhuge')) {
                                            var nh = trigger.player.countCards('h');
                                            if (player == trigger.player) {
                                                go = (player.countCards('h', 'sha') > 0);
                                            }
                                            else if (nh >= 4) {
                                                go = true;
                                            }
                                            else if (player.countCards('h', 'sha')) {
                                                if (nh == 3) {
                                                    go = Math.random() < 0.8;
                                                }
                                                else if (nh == 2) {
                                                    go = Math.random() < 0.5;
                                                }
                                            }
                                            else if (nh >= 3) {
                                                if (nh == 3) {
                                                    go = Math.random() < 0.5;
                                                }
                                                else if (nh == 2) {
                                                    go = Math.random() < 0.2;
                                                }
                                            }
                                        }
                                    }
                                    var next = player.chooseToDiscard(get.prompt('hpp_longyin'), '弃置一张牌' + (get.color(trigger.card) == 'red' ? '并摸一张牌' : '') + '，令' + get.translation(trigger.player) + '本次使用的【杀】不计入使用次数', 'he');
                                    next.logSkill = ['hpp_longyin', trigger.player];
                                    next.set('ai', function (card) {
                                        if (_status.event.go) {
                                            return 6 - get.value(card);
                                        }
                                        return 0;
                                    });
                                    next.set('go', go);
                                    'step 1'
                                    if (result.bool) {
                                        if (trigger.addCount !== false) {
                                            trigger.addCount = false;
                                            trigger.player.getStat().card.sha--;
                                        }
                                        if (get.color(trigger.card) == 'red') {
                                            player.draw();
                                        }
                                        if (get.suit(result.cards[0], player) == get.suit(trigger.card)) player.restoreSkill('jiezhong');
                                    }
                                },
                                ai: { expose: 0.2 },
                            },

                            // 关羽
                            old_hpp_wusheng: {
                                forced: true,
                                audio: 'wusheng',
                                group: 'hpp_wusheng_damage',
                                audioname2: { hpp_guansuo: 'wusheng_guansuo' },
                                trigger: { player: 'phaseBegin' },
                                content: function () {
                                    var card = get.cardPile(function (card) {
                                        return card.name == 'sha' && get.color(card) == 'red';
                                    });
                                    if (card) player.gain(card, 'gain2');
                                },
                                subSkill: {
                                    damage: {
                                        forced: true,
                                        audio: 'wusheng',
                                        audioname2: { hpp_guansuo: 'wusheng_guansuo' },
                                        trigger: { source: 'damageBegin1' },
                                        filter: function (event) {
                                            return event.card && event.card.name == 'sha' && get.color(event.card) == 'red' && event.notLink();
                                        },
                                        mod: {
                                            aiOrder: function (player, card, num) {
                                                if (get.itemtype(card) == 'card' && card.name == 'sha' && get.color(card) == 'red') return num + 0.1;
                                            },
                                        },
                                        content: function () {
                                            trigger.num++;
                                        },
                                    },
                                },
                            },
                            hpp_wusheng: {
                                group: ['hpp_wusheng_wusheng', 'hpp_wusheng_effect'],
                                audio: 'wusheng',
                                audioname2: {
                                    Mbaby_jsp_guanyu: 'wusheng_jsp_guanyu',
                                    Mbaby_guansuo: 'wusheng_guansuo',
                                },
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                locked: false,
                                content: function () {
                                    var card = get.cardPile(function (card) {
                                        return get.color(card) == 'red';
                                    });
                                    if (card) player.gain(card, 'gain2');
                                },
                                subSkill: {
                                    wusheng: {
                                        audio: 'wusheng',
                                        audioname2: {
                                            Mbaby_jsp_guanyu: 'wusheng_jsp_guanyu',
                                            Mbaby_guansuo: 'wusheng_guansuo',
                                        },
                                        enable: ['chooseToRespond', 'chooseToUse'],
                                        filterCard: function (card, player) {
                                            return get.color(card) == 'red';
                                        },
                                        position: 'hes',
                                        viewAs: { name: 'sha' },
                                        viewAsFilter: function (player) {
                                            if (!player.countCards('hes', { color: 'red' })) return false;
                                        },
                                        prompt: '武圣：将一张红色牌当作【杀】使用或打出',
                                        check: function (card) {
                                            var val = get.value(card);
                                            if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                                            return 5 - val;
                                        },
                                        ai: {
                                            respondSha: true,
                                            skillTagFilter: function (player) {
                                                if (!player.countCards('hes', { color: 'red' })) return false;
                                            },
                                        },
                                    },
                                    effect: {
                                        mod: {
                                            aiOrder: function (player, card, num) {
                                                if (get.itemtype(card) == 'card' && card.name == 'sha' && get.color(card) == 'red') return num + 0.1;
                                            },
                                        },
                                        audio: 'wusheng',
                                        audioname2: {
                                            Mbaby_jsp_guanyu: 'wusheng_jsp_guanyu',
                                            Mbaby_guansuo: 'wusheng_guansuo',
                                        },
                                        inherit: 'jie',
                                    },
                                },
                            },
                            hpp_tuodao: {
                                audio: 'hpptuodao',
                                trigger: { player: ['useCard', 'respond'] },
                                filter: function (event, player) {
                                    return event.card.name == 'shan';
                                },
                                forced: true,
                                content: function () {
                                    player.addSkill('hpp_tuodao_mark');
                                    player.addMark('hpp_tuodao_mark', 1, false);
                                    player.when('useCard')
                                        .filter((event, player) => event.card.name == 'sha')
                                        .then(() => {
                                            trigger.baseDamage += player.countMark('hpp_tuodao_mark');
                                            player.removeSkill('hpp_tuodao_mark');
                                        });
                                },
                                subSkill: {
                                    mark: {
                                        charlotte: true,
                                        onremove: true,
                                        intro: { content: '下一张【杀】的伤害基数+#' },
                                    },
                                },
                            },

                            // 郭淮
                            hpp_jingce: {
                                audio: 'jingce',
                                trigger: { player: 'phaseJieshuBegin' },
                                frequent: true,
                                content: function () {
                                    var list = [];
                                    player.getHistory('useCard', function (evt) {
                                        list.add(get.suit(evt.card));
                                    });
                                    player.getHistory('respond', function (evt) {
                                        list.add(get.suit(evt.card));
                                    });
                                    player.draw(Math.min(list.length + 1, 3));
                                },
                            },

                            // 郭皇后
                            hpp_jiaozhao: {
                                derivation: ['hpp_jiaozhao_2', 'hpp_jiaozhao_3'],
                                audio: 'jiaozhao',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (!player.countCards('h', function (card) {
                                        return lib.skill.hpp_jiaozhao.filterCard(card, player);
                                    })) return false;
                                    var num = player.getStat('skill').hpp_jiaozhao;
                                    return !num || num < player.countMark('hpp_danxin') + 1;
                                },
                                filterCard: function (card, player) {
                                    if (!player.hasSkill('hpp_jiaozhao_1')) return true;
                                    return !player.storage.hpp_jiaozhao_1[0].contains(card);
                                },
                                discard: false,
                                lose: false,
                                delay: false,
                                check: function (card) {
                                    return 7 - get.value(card);
                                },
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('hpp_jiaozhao_1', { player: 'phaseUseAfter' });
                                    player.showCards(cards, get.translation(player) + '发动了【矫诏】');
                                    'step 1'
                                    var list = [];
                                    var storage1 = player.storage.hpp_jiaozhao_1[2];
                                    var storage2 = player.storage.hpp_jiaozhao_1[3];
                                    for (var name of lib.inpile) {
                                        var card = { name: name };
                                        if (get.type(card) != 'basic' && get.type(card) != 'trick') continue;
                                        if (player.countMark('hpp_danxin') == 1 && storage1.contains(get.type(card))) continue;
                                        if (player.countMark('hpp_danxin') == 2 && storage2.contains(name)) continue;
                                        list.push([get.type(card), '', name]);
                                        if (name == 'sha') {
                                            for (var nature of lib.inpile_nature) list.push([get.type(card), '', name, nature]);
                                        }
                                    }
                                    var list2 = list.filter(function (link) {
                                        return player.hasUseTarget({ name: link[2], nature: link[3], storage: { hpp_jiaozhao_1: true } });
                                    });
                                    if (!list2.length) {
                                        player.chat('无牌可用了吗？');
                                        game.log('但是', player, '没有可以转化使用的牌了！');
                                        event.finish();
                                        return;
                                    }
                                    var str = '###矫诏(' + (player.countMark('hpp_danxin') + 1) + '级)';
                                    str += '###请选择并声明' + get.translation(cards[0]) + '视为的牌';
                                    if (player.countMark('hpp_danxin') < 2) str += '，且此牌不能指定你为目标';
                                    player.chooseButton([str, [list2, 'vcard']], true).set('ai', function (button) {
                                        var player = _status.event.player;
                                        return player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                    }).set('list2', list2);
                                    'step 2'
                                    var card = { name: result.links[0][2], nature: result.links[0][3] };
                                    player.storage.hpp_jiaozhao_1[0].push(cards[0]);
                                    player.storage.hpp_jiaozhao_1[1].push(card);
                                    if (player.hasMark('hpp_danxin')) player.storage.hpp_jiaozhao_1[player.countMark('hpp_danxin') + 1].push(get[player.countMark('hpp_danxin') < 2 ? 'type' : 'name'](card));
                                    var chosen = result.links[0][2];
                                    var nature = result.links[0][3];
                                    player.addGaintag(cards, 'hpp_jiaozhao_1');
                                    player.showCards(game.createCard({
                                        name: chosen,
                                        nature: nature,
                                        suit: cards[0].suit,
                                        number: cards[0].number,
                                    }), get.translation(player) + '声明了' + (get.translation(nature) || '') + get.translation(chosen));
                                },
                                ai: {
                                    order: 8,
                                    result: { player: 1 },
                                },
                            },
                            hpp_jiaozhao_1: {
                                init: function (player) {
                                    if (!player.storage.hpp_jiaozhao_1) player.storage.hpp_jiaozhao_1 = [[], [], [], []];
                                },
                                onremove: function (player) {
                                    player.removeGaintag('hpp_jiaozhao_1');
                                    delete player.storage.hpp_jiaozhao_1;
                                },
                                getOriginalCard: function (player, card) {
                                    var storage = player.storage.hpp_jiaozhao_1;
                                    return storage[0][storage[1].indexOf(storage[1].filter(function (cardx) {
                                        return get.name(cardx) == get.name(card) && (!get.nature(cardx) || get.nature(cardx) == get.nature(card));
                                    })[0])];
                                },
                                mod: {
                                    playerEnabled: function (card, player, target) {
                                        if (target != player || player.countMark('hpp_danxin') >= 2) return;
                                        if (card.storage && card.storage.hpp_jiaozhao_1) return false;
                                    },
                                    /*
                                    cardname:function(card,player,name){
                                    var storage=player.storage.hpp_jiaozhao_1;
                                    if(storage[0].contains(card)) return get.name(storage[1][storage[0].indexOf(card)]);
                                    },
                                    cardnature:function(card,player){
                                    var storage=player.storage.hpp_jiaozhao_1;
                                    if(storage[0].contains(card)) return get.nature(storage[1][storage[0].indexOf(card)]);
                                    },
                                    */
                                },
                                charlotte: true,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h', function (card) {
                                        return player.storage.hpp_jiaozhao_1[0].contains(card);
                                    });
                                },
                                chooseButton: {
                                    dialog: function (event, player) {
                                        var storage = player.storage.hpp_jiaozhao_1;
                                        var cards = player.getCards('h').slice(0).filter(function (card) {
                                            return storage[0].contains(card);
                                        }), list = [];
                                        for (var card of cards) {
                                            var cardx = storage[1][storage[0].indexOf(card)];
                                            list.push([get.translation(get.type2(cardx)), '', get.name(cardx), get.nature(cardx)]);
                                        }
                                        return ui.create.dialog('矫诏', [list, 'vcard'], 'hidden');
                                    },
                                    filter: function (button, player) {
                                        return lib.filter.filterCard({ name: button.link[2], nature: button.link[3] }, player, _status.event.getParent());
                                    },
                                    check: function (button) {
                                        return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                    },
                                    backup: function (links, player) {
                                        return {
                                            audio: 'jiaozhao',
                                            filterCard: lib.skill.hpp_jiaozhao_1.getOriginalCard(player, { name: links[0][2], nature: links[0][3] }),
                                            selectCard: -1,
                                            popname: true,
                                            viewAs: { name: links[0][2], nature: links[0][3], storage: { hpp_jiaozhao_1: true } },
                                        }
                                    },
                                    prompt: function (links, player) {
                                        var name = links[0][2], nature = links[0][3];
                                        var card = lib.skill.hpp_jiaozhao_1.getOriginalCard(player, { name: links[0][2], nature: links[0][3] });
                                        return '将' + get.translation(card) + '当作' + (get.translation(nature) || '') + get.translation(name) + '使用';
                                    }
                                },
                                ai: {
                                    order: 7.9,
                                    result: { player: 1 },
                                },
                                subSkill: { backup: {} },
                            },
                            hpp_danxin: {
                                audio: 'danxin',
                                trigger: { player: 'damageEnd' },
                                frequent: true,
                                content: function () {
                                    player.draw();
                                    if (player.countMark('hpp_danxin') < 2) {
                                        player.addMark('hpp_danxin', 1, false);
                                        game.log(player, '升级了技能', '#g【矫诏】')
                                    }
                                },
                            },

                            // 郭嘉
                            tiandu_re_guojia: { audio: 2 },
                            tiandu_xizhicai: { audio: 2 },
                            hpp_tiandu: {
                                audio: 'tiandu',
                                audioname2: {
                                    hpp_guojia: 'tiandu_re_guojia',
                                    hpp_xizhicai: 'tiandu_xizhicai',
                                },
                                trigger: { player: 'judgeEnd' },
                                preHidden: true,
                                frequent: function (event) {
                                    if (event.result.card.name == 'du') return false;
                                    return true;
                                },
                                check: function (event) {
                                    if (event.result.card.name == 'du') return false;
                                    return true;
                                },
                                filter: function (event, player) {
                                    return get.position(event.result.card, true) == 'o';
                                },
                                content: function () {
                                    player.gain(trigger.result.card, 'gain2');
                                }
                            },
                            hpp_yiji: {
                                audio: "reyiji",
                                trigger: {
                                    player: "damageEnd",
                                },
                                frequent: true,
                                filter: function (event) {
                                    return (event.num > 0)
                                },
                                content: function () {
                                    'step 0'
                                    event.count = trigger.num;
                                    'step 1'
                                    player.draw(2);
                                    event.count--;
                                    if (_status.connectMode) game.broadcastAll(function () { _status.noclearcountdown = true });
                                    event.given_map = {};
                                    event.num = 2;
                                    'step 2'
                                    player.chooseCardTarget({
                                        filterCard: function (card) {
                                            return get.itemtype(card) == 'card' && !card.hasGaintag('reyiji_tag');
                                        },
                                        filterTarget: lib.filter.notMe,
                                        selectCard: [1, event.num],
                                        prompt: '请选择要分配的卡牌和目标',
                                        ai1: function (card) {
                                            if (!ui.selected.cards.length) return 1;
                                            return 0;
                                        },
                                        ai2: function (target) {
                                            var player = _status.event.player, card = ui.selected.cards[0];
                                            var val = target.getUseValue(card);
                                            if (val > 0) return val * get.attitude(player, target) * 2;
                                            return get.value(card, target) * get.attitude(player, target);
                                        },
                                    });
                                    'step 3'
                                    if (result.bool) {
                                        var res = result.cards, target = result.targets[0].playerid;
                                        player.addGaintag(res, 'reyiji_tag');
                                        event.num -= res.length
                                        if (!event.given_map[target]) event.given_map[target] = [];
                                        event.given_map[target].addArray(res);
                                        if (event.num > 0) event.goto(2);
                                    }
                                    else if (event.num == 2) {
                                        if (_status.connectMode) {
                                            game.broadcastAll(function () { delete _status.noclearcountdown; game.stopCountChoose() });
                                        }
                                        event.goto(5);
                                    }
                                    'step 4'
                                    if (_status.connectMode) {
                                        game.broadcastAll(function () { delete _status.noclearcountdown; game.stopCountChoose() });
                                    }
                                    var map = [], cards = [];
                                    for (var i in event.given_map) {
                                        var source = (_status.connectMode ? lib.playerOL : game.playerMap)[i];
                                        player.line(source, 'green');
                                        map.push([source, event.given_map[i]]);
                                        cards.addArray(event.given_map[i]);
                                    }
                                    game.loseAsync({
                                        gain_list: map,
                                        player: player,
                                        cards: cards,
                                        giver: player,
                                        animate: 'giveAuto',
                                    }).setContent('gaincardMultiple');
                                    'step 5'
                                    if (event.count > 0 && player.hasSkill('hpp_yiji')) {
                                        player.chooseBool(get.prompt2('hpp_yiji'));
                                    }
                                    else event.finish();
                                    'step 6'
                                    if (result.bool) {
                                        player.logSkill('hpp_yiji');
                                        event.goto(1);
                                    }
                                },
                                ai: {
                                    maixie: true,
                                    "maixie_hp": true,
                                    result: {
                                        effect: function (card, player, target) {
                                            if (get.tag(card, 'damage')) {
                                                if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                if (!target.hasFriend()) return;
                                                var num = 1;
                                                if (get.attitude(player, target) > 0) {
                                                    if (player.needsToDiscard()) {
                                                        num = 0.7;
                                                    }
                                                    else {
                                                        num = 0.5;
                                                    }
                                                }
                                                if (player.hp >= 4) return [1, num * 2];
                                                if (target.hp == 3) return [1, num * 1.5];
                                                if (target.hp == 2) return [1, num * 0.5];
                                            }
                                        },
                                    },
                                    threaten: 0.6,
                                },
                            },
                            bug_hpp_shenglun: {
                                audio: 'hppshenglun',
                                enable: 'phaseUse',
                                filterTarget: lib.filter.notMe,
                                selectTarget: [1, 2],
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    targets.sortBySeat();
                                    'step 1'
                                    var list = [
                                        player.hp - target.hp,
                                        player.countCards('h') - target.countCards('h'),
                                        player.countCards('e', card => get.subtype(card) == 'equip1') - target.countCards('e', card => get.subtype(card) == 'equip1'),
                                        player.countCards('e', card => get.subtype(card) == 'equip2') - target.countCards('e', card => get.subtype(card) == 'equip2'),
                                        player.countCards('e', card => ['equip3', 'equip4'].includes(get.subtype(card))) - target.countCards('e', card => ['equip3', 'equip4'].includes(get.subtype(card))),
                                    ], num = 0;
                                    while (num < 5) {
                                        game.log('第' + get.cnNumber(num + 1, true) + '局', list[num] > 0 ? '#g成功' : '#y失败');
                                        player.addMark('hpp_shenglun_' + (list[num] > 0 ? 'win' : 'lose'), 1, false);
                                        if (player.countMark('hpp_shenglun_win') >= 10 || player.countMark('hpp_shenglun_lose') >= 10) {
                                            var next = game.createEvent('hpp_shenglun_result');
                                            next.player = player;
                                            next.setContent(lib.skill.hpp_shenglun.contentx);
                                        }
                                        ++num;
                                    }

                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        target: function (player, target) {
                                            var att = get.attitude(player, target);
                                            var num = get.sgn(att);
                                            var ref = get.recoverEffect(player, player, player);
                                            var def = game.filterPlayer.reduce((list, current) => {
                                                return list.push(get.damageEffect(current, player, player));
                                            }, []).sort((a, b) => b - a)[0];
                                            var sum = get.sgn(player.hp - target.hp) + get.sgn(player.countCards('h') - target.countCards('h')) +
                                                get.sgn(player.countCards('e', card => get.subtype(card) == 'equip1') - target.countCards('e', card => get.subtype(card) == 'equip1')) +
                                                get.sgn(player.countCards('e', card => get.subtype(card) == 'equip2') - target.countCards('e', card => get.subtype(card) == 'equip2')) +
                                                get.sgn(player.countCards('e', card => ['equip3', 'equip4'].includes(get.subtype(card))) - target.countCards('e', card => ['equip3', 'equip4'].includes(get.subtype(card))));
                                            if (((ref - def) * sum) > 0) return 2 * num;
                                            return num;
                                        },
                                    },
                                },
                                contentx: function () {
                                    'step 0'
                                    if (player.countMark('hpp_shenglun_win') > player.countMark('hpp_shenglun_lose')) {
                                        player.recover();
                                        event.goto(2);
                                    }
                                    else player.chooseTarget('请选择【胜论】的目标', '对一名角色造成1点伤害', true).set('ai', target => get.damageEffect(target, _status.event.player, _status.event.player));
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target);
                                        target.damage();
                                    }
                                    'step 2'
                                    player.logSkill('hpp_yiji');
                                    player.draw(2);
                                    if (_status.connectMode) game.broadcastAll(function () { _status.noclearcountdown = true });
                                    event.given_map = {};
                                    event.num = 2;
                                    'step 3'
                                    player.chooseCardTarget({
                                        filterCard: function (card) {
                                            return get.itemtype(card) == 'card' && !card.hasGaintag('reyiji_tag');
                                        },
                                        filterTarget: lib.filter.notMe,
                                        selectCard: [1, event.num],
                                        prompt: '请选择要分配的卡牌和目标',
                                        ai1: function (card) {
                                            if (!ui.selected.cards.length) return 1;
                                            return 0;
                                        },
                                        ai2: function (target) {
                                            var player = _status.event.player, card = ui.selected.cards[0];
                                            var val = target.getUseValue(card);
                                            if (val > 0) return val * get.attitude(player, target) * 2;
                                            return get.value(card, target) * get.attitude(player, target);
                                        },
                                    });
                                    'step 4'
                                    if (result.bool) {
                                        var res = result.cards, target = result.targets[0].playerid;
                                        player.addGaintag(res, 'reyiji_tag');
                                        event.num -= res.length
                                        if (!event.given_map[target]) event.given_map[target] = [];
                                        event.given_map[target].addArray(res);
                                        if (event.num > 0) event.goto(3);
                                    }
                                    else if (event.num == 2) {
                                        if (_status.connectMode) game.broadcastAll(function () { delete _status.noclearcountdown; game.stopCountChoose() });
                                        event.goto(6);
                                    }
                                    'step 5'
                                    if (_status.connectMode) game.broadcastAll(function () { delete _status.noclearcountdown; game.stopCountChoose() });
                                    var map = [], cards = [];
                                    for (var i in event.given_map) {
                                        var source = (_status.connectMode ? lib.playerOL : game.playerMap)[i];
                                        player.line(source, 'green');
                                        map.push([source, event.given_map[i]]);
                                        cards.addArray(event.given_map[i]);
                                    }
                                    game.loseAsync({
                                        gain_list: map,
                                        player: player,
                                        cards: cards,
                                        giver: player,
                                        animate: 'giveAuto',
                                    }).setContent('gaincardMultiple');
                                    'step 6'
                                    if (player.countMark('hpp_shenglun_win') > player.countMark('hpp_shenglun_lose')) {
                                        player.removeMark('hpp_shenglun_win', player.countMark('hpp_shenglun_win'), false);
                                    } else {
                                        player.removeMark('hpp_shenglun_lose', player.countMark('hpp_shenglun_lose'), false);
                                    }
                                },
                                subSkill: {
                                    win: {
                                        charlotte: true,
                                        onremove: true,
                                        marktext: '胜',
                                        intro: { content: '已胜利#次' },
                                    },
                                    lose: {
                                        charlotte: true,
                                        onremove: true,
                                        marktext: '败',
                                        intro: { content: '已失败#次' },
                                    },
                                },
                            },

                            // 郭图逢纪
                            hpp_jigong: {
                                audio: 'jigong',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseControl('一张', '两张', '三张', 'cancel2').set('prompt', get.prompt2('hpp_jigong')).set('ai', () => '三张');
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_jigong');
                                        player.addTempSkill('hpp_jigong2');
                                        player.draw(1 + result.index);
                                    }
                                },
                            },
                            hpp_jigong2: {
                                charlotte: true,
                                mod: {
                                    maxHandcardBase: function (player) {
                                        if (game.online) return (player.getStat('damage') || 0) + 1;
                                        var num = 0;
                                        player.getHistory('sourceDamage', function (evt) {
                                            num += evt.num;
                                        });
                                        return num + 1;
                                    },
                                },
                                audio: 'jigong',
                                trigger: { player: 'phaseDiscardBegin' },
                                filter: function (event, player) {
                                    if (player.isHealthy()) return false;
                                    var num = 0;
                                    player.getHistory('sourceDamage', function (evt) {
                                        num += evt.num;
                                    });
                                    if (!num) return false;
                                    var num2 = 0;
                                    player.getHistory('gain', function (evt) {
                                        var evtx = evt.getParent(2);
                                        if (evtx.name == 'hpp_jigong' && evtx.player == player) num2 += evt.cards.length;
                                    });
                                    return num >= num2;
                                },
                                forced: true,
                                content: function () {
                                    player.recover();
                                },
                            },
                            hpp_shifei: {
                                audio: 'shifei',
                                enable: ['chooseToUse', 'chooseToRespond'],
                                filter: function (event, player) {
                                    if (!_status.currentPhase || event.hpp_shifei) return false;
                                    if (!event.filterCard({ name: 'shan', isCard: true }, player, event)) return false;
                                    if (event.name != 'chooseToUse' && !lib.filter.cardRespondable({ name: 'shan', isCard: true }, player, event)) return false;
                                    return true;
                                },
                                checkx: function (event, player) {
                                    if (get.attitude(player, _status.currentPhase) > 0) return true;
                                    var num = (event.shanRequired || 1);
                                    if (player.countCards('hs', { name: 'shan' }) - num > 1) return false;
                                    return game.hasPlayer(function (current) {
                                        if (current == _status.currentPhase) return false;
                                        return _status.currentPhase.countCards('h') + 1 <= current.countCards('h');
                                    });
                                },
                                delay: false,
                                content: function () {
                                    'step 0'
                                    player.line(_status.currentPhase, 'green');
                                    _status.currentPhase.draw();
                                    'step 1'
                                    if (_status.currentPhase.isMaxHandcard(true)) {
                                        var evt = event.getParent(2);
                                        evt.set('hpp_shifei', true);
                                        evt.goto(0);
                                        event.finish();
                                        return;
                                    }
                                    if (game.hasPlayer(current => current.countCards('he'))) {
                                        player.chooseTarget('选择一名角色弃置其一张牌', true, function (card, player, target) {
                                            return target.countCards('he');
                                        }).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                        });
                                    }
                                    else event._result = { bool: false };
                                    'step 2'
                                    var evt = event.getParent(2);
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'green');
                                        player.discardPlayerCard(target, 'he', true);
                                        evt.result = { bool: true, card: { name: 'shan', isCard: true }, cards: [] };
                                        evt.redo();
                                    }
                                    else {
                                        evt.set('hpp_shifei', true);
                                        evt.goto(0);
                                    }
                                },
                                ai: {
                                    order: 8,
                                    respondShan: true,
                                    result: {
                                        player: function (player) {
                                            return lib.skill.hpp_shifei.checkx(_status.event, player) ? 1 : 0;
                                        },
                                    },
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') && current < 0) {
                                                if (!player.isMaxHandcard()) return 0;
                                            }
                                        },
                                    },
                                },
                            },

                            // 何太后
                            hpp_zhendu: {
                                audio: 'zhendu',
                                trigger: { global: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return event.player.isIn() && player.countCards('h') && event.player.hasUseTarget({ name: 'jiu' }, null, true);
                                },
                                direct: true,
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    var nono = (Math.abs(get.attitude(player, trigger.player)) < 3);
                                    if (player == trigger.player || get.damageEffect(trigger.player, player, player) <= 0 || !trigger.player.hasUseTarget({ name: 'jiu' }, null, true)) nono = true;
                                    if (trigger.player.hp > 2) nono = true;
                                    if (trigger.player.hp > 1 && player.countCards('h') < 3 && (trigger.player.canUse('sha', player) && !player.countCards('h', 'shan') && trigger.player.countCards('h') >= 3)) nono = true;
                                    var next = player.chooseToDiscard(get.prompt2('hpp_zhendu', trigger.player));
                                    next.set('ai', function (card) {
                                        if (_status.event.nono) return -1;
                                        return 7 - get.useful(card);
                                    });
                                    next.set('logSkill', ['hpp_zhendu', trigger.player]);
                                    next.set('nono', nono);
                                    next.setHiddenSkill('hpp_zhendu');
                                    'step 1'
                                    if (result.bool) trigger.player.chooseUseTarget({ name: 'jiu' }, true, 'noTargetDelay', 'nodelayx');
                                    else event.finish();
                                    'step 2'
                                    if (result.bool && trigger.player != player) {
                                        trigger.player.damage();
                                        trigger.player.addTempSkill('hpp_zhendu2');
                                        trigger.player.addMark('hpp_zhendu2', 1, false);
                                    }
                                },
                                ai: { expose: 0.3 },
                            },
                            hpp_zhendu2: {
                                mark: true,
                                marktext: '毒',
                                charlotte: true,
                                onremove: true,
                                intro: { content: '计算与其他角色的距离+#' },
                                mod: {
                                    globalFrom: function (from, to, distance) {
                                        return distance + from.countMark('hpp_zhendu2');
                                    },
                                },
                            },
                            hpp_qiluan: {
                                group: 'hpp_qiluan_draw',
                                audio: 'qiluan2',
                                trigger: { global: 'dying' },
                                prompt: '是否发动【戚乱】摸一张牌？',
                                preHidden: true,
                                frequent: true,
                                content: function () {
                                    player.draw();
                                },
                                subfrequent: ['use'],
                                subSkill: {
                                    draw: {
                                        audio: 'qiluan2',
                                        trigger: { source: 'dieAfter' },
                                        prompt: '是否发动【戚乱】摸两张牌？',
                                        forced: true,
                                        locked: false,
                                        preHidden: true,
                                        content: function () {
                                            player.draw(2);
                                        },
                                    },
                                },
                            },

                            // 花鬘
                            hpp_souying: {
                                audio: 'souying',
                                trigger: { player: 'useCardToPlayered', target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    if (!player.countCards('he')) return false;
                                    if (!event.targets || event.targets.length != 1 || event.player == event.target) return false;
                                    return event.player != event.target;
                                },
                                direct: true,
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    var next = player.chooseToDiscard('he'), prompt;
                                    if (event.triggername == 'useCardToTargeted') {
                                        event.target = trigger.player;
                                        prompt = '令' + get.translation(trigger.card) + '对你无效';
                                        next.set('goon', -get.effect(player, trigger.card, trigger.player, player));
                                    }
                                    else {
                                        event.target = trigger.targets[0];
                                        prompt = '弃置一张牌，并获得' + get.translation(trigger.cards.filterInD());
                                        next.set('goon', get.value(trigger.cards.filterInD()));
                                    }
                                    next.set('prompt', get.prompt('hpp_souying', event.target));
                                    next.set('prompt2', prompt)
                                    next.set('ai', function (card) {
                                        return _status.event.goon - get.value(card);
                                    });
                                    next.set('logSkill', ['hpp_souying', event.target]);
                                    'step 1'
                                    if (result.bool) {
                                        if (event.triggername == 'useCardToPlayered') player.gain(trigger.cards.filterInD(), 'gain2');
                                        else trigger.excluded.add(player);
                                    }
                                    else player.storage.counttrigger.hpp_souying--;
                                },
                            },
                            hpp_zhanyuan: {
                                unique: true,
                                derivation: 'hmxili',
                                audio: 'zhanyuan',
                                trigger: { player: 'mansiAfter' },
                                filter: function (event, player) {
                                    return _status.currentPhase && _status.currentPhase == player && player.countMark('mansi') > 7;
                                },
                                skillAnimation: true,
                                animationColor: 'soil',
                                forced: true,
                                juexingji: true,
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_zhanyuan');
                                    'step 1'
                                    player.chooseTarget('战缘：是否选择一名其他角色？', '令一名其他角色和自己一同获得技能〖系力〗，然后失去技能〖蛮嗣〗', lib.filter.notMe).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.attitude(player, target);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'fire');
                                        player.addSkillLog('hmxili');
                                        target.addSkillLog('hmxili');
                                        player.removeSkill('mansi');
                                    }
                                },
                            },

                            // 黄盖
                            hpp_zhaxiang: {
                                mod: {
                                    targetInRange: function (card, player, target, now) {
                                        if (card.name == 'sha' && get.color(card) == 'red') return true;
                                    },
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + 1;
                                    }
                                },
                                audio: 'zhaxiang',
                                trigger: { player: 'useCard' },
                                forced: true,
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && get.color(event.card) == 'red';
                                },
                                content: function () {
                                    trigger.directHit.addArray(game.players);
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        return arg.card.name == 'sha' && get.color(arg.card) == 'red';
                                    },
                                },
                            },

                            // 黄月英
                            hpp_jizhi: {
                                audio: 'rejizhi',
                                audioname2: { WU_lukang: 'rejizhi_lukang' },
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    return get.type2(event.card) == 'trick';
                                },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    'step 1'
                                    var card = result[0];
                                    event.card = card;
                                    if (['basic', 'trick', 'equip'].contains(get.type2(card))) {
                                        if (['basic', 'trick'].contains(get.type2(card))) {
                                            player.addTempSkill('hpp_jizhi_' + get.type2(card));
                                            player.addMark('hpp_jizhi_' + get.type2(card), 1, false);
                                            event.finish();
                                        }
                                        else player.chooseTarget('集智：是否将' + get.translation(card) + '置入一名其他角色的装备栏？', function (card, player, target) {
                                            return target != player && target.isEmpty(get.subtype(_status.event.card));
                                        }).set('card', card).set('ai', function (target) {
                                            var player = _status.event.player;
                                            var card = _status.event.card;
                                            if ((player.isEmpty(get.subtype(_status.event.card)) || get.equipValue(player.getEquip(get.subtype(_status.event.card))) < 0) && get.equipValue(card) > 0) return 0;
                                            return get.attitude(player, target);
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target);
                                        player.$give(card, target, false);
                                        game.delay(0.5);
                                        target.equip(card);
                                    }
                                },
                                ai: { noautowuxie: true },
                                subSkill: {
                                    basic: {
                                        mark: true,
                                        marktext: '集',
                                        intro: { content: '手牌上限+#' },
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + player.countMark('hpp_jizhi_basic');
                                            },
                                        },
                                    },
                                    trick: {
                                        mark: true,
                                        marktext: '智',
                                        intro: { content: '使用【杀】的额定次数+#' },
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + player.countMark('hpp_jizhi_trick');
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_qicai: {
                                mod: {
                                    targetInRange: function (card, player, target, now) {
                                        var type = get.type(card);
                                        if (type == 'trick' || type == 'delay') return true;
                                    },
                                    canBeDiscarded: function (card) {
                                        if (get.position(card) == 'e' && ['equip1', 'equip2'].contains(get.subtype(card))) return false;
                                    },
                                },
                            },

                            // 黄忠
                            hpp_liegong: {
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (card.name == 'sha') return true;
                                    },
                                },
                                shaRelated: true,
                                audio: 'liegong',
                                trigger: { player: 'useCardToPlayered' },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) <= 0;
                                },
                                forced: true,
                                locked: false,
                                logTarget: 'target',
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    return event.target.countCards('h') <= player.countCards('h') || event.target.hp >= player.hp;
                                },
                                preHidden: true,
                                content: function () {
                                    if (trigger.target.countCards('h') <= player.countCards('h')) trigger.getParent().directHit.push(trigger.target);
                                    if (trigger.target.hp >= player.hp) {
                                        var id = trigger.target.playerid;
                                        var map = trigger.getParent().customArgs;
                                        if (!map[id]) map[id] = {};
                                        if (typeof map[id].extraDamage != 'number') {
                                            map[id].extraDamage = 0;
                                        }
                                        map[id].extraDamage++;
                                    }
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (arg.card.name != 'sha') return false;
                                        return arg.target.countCards('h') <= player.countCards('h');
                                    },
                                },
                            },

                            // 华佗
                            hpp_jijiu: {
                                mod: {
                                    aiValue: function (player, card, num) {
                                        if (get.name(card) != 'tao' && get.color(card) != 'red') return;
                                        var cards = player.getCards('hs', function (card) {
                                            return get.name(card) == 'tao' || get.color(card) == 'red';
                                        });
                                        cards.sort(function (a, b) {
                                            return (get.name(a) == 'tao' ? 1 : 2) - (get.name(b) == 'tao' ? 1 : 2);
                                        });
                                        var geti = function () {
                                            if (cards.contains(card)) {
                                                return cards.indexOf(card);
                                            }
                                            return cards.length;
                                        };
                                        return Math.max(num, [6.5, 4, 3, 2][Math.min(geti(), 2)]);
                                    },
                                    aiUseful: function () {
                                        return lib.skill.hpp_jijiu.mod.aiValue.apply(this, arguments);
                                    },
                                },
                                locked: false,
                                audio: 'jijiu',
                                enable: 'chooseToUse',
                                viewAsFilter: function (player) {
                                    return player != _status.currentPhase && player.countCards('hes', { color: 'red' }) > 0;
                                },
                                filterCard: function (card) {
                                    return get.color(card) == 'red';
                                },
                                position: 'hes',
                                viewAs: { name: 'tao' },
                                prompt: '将一张红色牌当作【桃】使用，然后你可以弃置一名其他角色的一张手牌',
                                check: function (card) {
                                    return 1 / (get.value(card) || 0.5);
                                },
                                onuse: function (result, player) {
                                    player.addTempSkill('hpp_jijiu_qixi');
                                },
                                subSkill: {
                                    qixi: {
                                        charlotte: true,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            return event.skill == 'hpp_jijiu' && game.hasPlayer(function (target) {
                                                return target != player && target.countDiscardableCards(player, 'h');
                                            });
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('hpp_jijiu'), '弃置一名其他角色的一张手牌', function (card, player, target) {
                                                return target != player && target.countDiscardableCards(player, 'h');
                                            }).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                player.line(result.targets);
                                                player.discardPlayerCard(result.targets[0], 'h', true);
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_qingnang: {
                                audio: 'qingnang',
                                enable: 'phaseUse',
                                filterTarget: true,
                                selectTarget: [1, Infinity],
                                multitarget: true,
                                multiline: true,
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    targets.forEach(target => {
                                        target.gainMaxHp();
                                        target.recover();
                                    });
                                    player.when('phaseBegin').vars({ targets: targets }).then(() => targets.forEach(target => target.loseMaxHp()));
                                    'step 1'
                                    if (targets.length > 1) player.chooseToDiscard(targets.length - 1, 'he', true);
                                },
                                ai: {
                                    order: 1,
                                    result: { target: 1 },
                                },
                            },
                            old_hpp_qingnang: {
                                audio: 'qingnang',
                                enable: 'phaseUse',
                                filterTarget: true,
                                selectTarget: [1, Infinity],
                                multitarget: true,
                                multiline: true,
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    player.addSkill('hpp_qingnang_lose');
                                    for (var target of targets.sortBySeat(player)) {
                                        target.gainMaxHp();
                                        target.recover();
                                        if (!player.storage.hpp_qingnang_lose[target.playerid]) player.storage.hpp_qingnang_lose[target.playerid] = 0;
                                        player.storage.hpp_qingnang_lose[target.playerid]++;
                                    }
                                    'step 1'
                                    if (targets.length - 1 > 0) player.chooseToDiscard(targets.length - 1, 'he', true);
                                },
                                ai: {
                                    order: 1,
                                    result: { target: 1 },
                                },
                                subSkill: {
                                    lose: {
                                        charlotte: true,
                                        onremove: true,
                                        init: function (player) {
                                            if (!player.storage.hpp_qingnang_lose) player.storage.hpp_qingnang_lose = {};
                                        },
                                        trigger: { player: 'phaseBegin' },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            var targets = game.filterPlayer(function (target) {
                                                return player.storage.hpp_qingnang_lose[target.playerid];
                                            });
                                            if (targets.length) {
                                                for (var target of targets) target.loseMaxHp();
                                            }
                                            'step 1'
                                            player.removeSkill('hpp_qingnang_lose');
                                        },
                                    },
                                },
                            },

                            // 华雄
                            hpp_yaowu: {
                                audio: 'new_reyaowu',
                                trigger: { player: 'damageBegin3' },
                                filter: function (event, player) {
                                    if (!event.card || event.card.name != 'sha') return false;
                                    return ['red', 'black'].contains(get.color(event.card)) || (get.itemtype(event.cards) == 'cards' && get.position(event.cards[0], true) == 'o');
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    if (get.color(trigger.card) == 'red') trigger.source.draw();
                                    else if (get.color(trigger.card) == 'black') player.draw();
                                    'step 1'
                                    if (get.itemtype(trigger.cards) == 'cards' && get.position(trigger.cards[0], true) == 'o') player.gain(trigger.cards, 'gain2', 'log');
                                },
                            },
                            hpp_yangwei: {
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (typeof card == 'object' && player == _status.currentPhase) {
                                            var cardx = player.storage.hpp_yangwei_mark;
                                            if (cardx && cardx.name == 'sha' && get.name(card) == 'sha' && get.color(cardx) != 'none' && get.color(card) != 'none' && get.color(cardx) != get.color(card)) {
                                                return Infinity;
                                            }
                                        }
                                    },
                                    aiOrder: function (player, card, num) {
                                        if (typeof card == 'object' && player == _status.currentPhase) {
                                            var evt = player.getLastUsed();
                                            if (evt && evt.card && evt.card.name == 'sha' && card.name == 'sha' && get.color(evt.card) != 'none' && get.color(card) != 'none' && get.color(evt.card) != get.color(card)) {
                                                return num + 10;
                                            }
                                        }
                                    },
                                },
                                group: ['hpp_yangwei_phase', 'hpp_yangwei_count'],
                                audio: 'yangwei',
                                audioname2: { hpp_huaxiong: 'sbyangwei' },
                                trigger: { player: 'phaseUseEnd' },
                                forced: true,
                                filter: function (event, player) {
                                    return player.isDamaged() && player.getHistory('useCard', function (evt) {
                                        return evt.card && evt.card.name == 'sha';
                                    }).length > 2;
                                },
                                locked: false,
                                content: function () {
                                    player.recover();
                                },
                                subSkill: {
                                    mark: { charlotte: true, onremove: true },
                                    count: {
                                        trigger: { player: 'useCard1' },
                                        filter: function (event, player) {
                                            var card = player.storage.hpp_yangwei_mark;
                                            return card && card.name == 'sha' && get.name(event.card) == 'sha' && get.color(card) != 'none' && get.color(event.card) != 'none' && get.color(card) != get.color(event.card);
                                        },
                                        direct: true,
                                        firstDo: true,
                                        content: function () {
                                            trigger.addCount = false;
                                            if (player.stat[player.stat.length - 1].card.sha > 0) player.stat[player.stat.length - 1].card.sha--;
                                        },
                                    },
                                    phase: {
                                        charlotte: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return player.isPhaseUsing() && event.card.name == 'sha';
                                        },
                                        direct: true,
                                        priority: -15,
                                        content: function () {
                                            player.addTempSkill('hpp_yangwei_mark', 'phaseUseAfter');
                                            player.storage.hpp_yangwei_mark = trigger.card;
                                        },
                                    },
                                },
                            },

                            // 姜维
                            tiaoxin_ol_jiangwei: { audio: 2 },
                            tiaoxin_sp_jiangwei: { audio: 2 },
                            tiaoxin_xiahouba: { audio: 2 },
                            guanxing_ol_jiangwei: { audio: 2 },
                            hpp_tiaoxin: {
                                audio: 'tiaoxin_ol_jiangwei',
                                audioname2: {
                                    hpp_sp_jiangwei: 'tiaoxin_sp_jiangwei',
                                    hpp_xiahouba: 'tiaoxin_xiahouba',
                                },
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current.countCards('h') && current != _status.event.player;
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_tiaoxin'), function (card, player, target) {
                                        return target.countCards('h') && target != _status.event.player;
                                    }, function (target) {
                                        var player = _status.event.player;
                                        if (target.countDiscardableCards(player, 'h') >= 2) return get.effect(target, { name: 'guohe_copy2' }, player, player) * 2;
                                        return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_tiaoxin', target);
                                        player.discardPlayerCard(target, 'h', [1, 2], true);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var bool = false;
                                    for (var i of result.cards) {
                                        if (i.name == 'sha') bool = true;
                                    }
                                    if (bool && player.countCards('he')) player.chooseToDiscard(true, 'he');
                                },
                            },
                            hpp_zhiji: {
                                derivation: 'hpp_guanxing',
                                audio: 'olzhiji',
                                unique: true,
                                juexingji: true,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return player.countCards('h') == 0;
                                },
                                skillAnimation: true,
                                animationColor: 'fire',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_zhiji');
                                    player.chooseDrawRecover(2, true);
                                    'step 1'
                                    player.loseMaxHp();
                                    player.addSkill('hpp_guanxing');
                                },
                            },

                            // 简雍
                            hpp_qiaoshui: {
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (get.type2(card) == 'trick') return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && get.type2(card) == 'trick') return false;
                                    },
                                },
                                audio: 'qiaoshui',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h') && game.hasPlayer(function (target) {
                                        return player.canCompare(target);
                                    }) && !player.hasSkill('hpp_qiaoshui_silent');
                                },
                                filterTarget: function (card, player, target) {
                                    return player.canCompare(target);
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseToCompare(target);
                                    'step 1'
                                    if (result.bool) player.addTempSkill('qiaoshui3');
                                    else player.addTempSkill('hpp_qiaoshui_silent');
                                },
                                subSkill: { silent: { charlotte: true } },
                                ai: {
                                    order: function (item, player) {
                                        if (player.countCards('h', function (card) {
                                            return player.hasValueTarget(card);
                                        })) return 10;
                                        return 1;
                                    },
                                    result: {
                                        target: function (player, target) {
                                            if (player.countCards('h', function (card) {
                                                return player.hasValueTarget(card);
                                            })) {
                                                if (player.hasSkill('qiaoshui3')) return 0;
                                                var nd = !player.needsToDiscard();
                                                if (player.hasCard(function (card) {
                                                    if (get.position(card) != "h") return false;
                                                    var val = get.value(card)
                                                    if (nd && val < 0) return true;
                                                    if (val <= 5) {
                                                        return get.number(card) >= 12;
                                                    }
                                                    if (val <= 6) {
                                                        return get.number(card) >= 13;
                                                    }
                                                    return false;
                                                })) return -1;
                                                return 0;
                                            }
                                            return -1;
                                        },
                                    },
                                },
                            },

                            // 贾诩
                            hpp_wansha: {
                                audio: 'wansha',
                                global: 'hpp_wansha2',
                                trigger: { global: 'dying' },
                                forced: true,
                                preHidden: true,
                                filter: function (event, player, name) {
                                    return _status.currentPhase == player && event.player != player;
                                },
                                content: function () { },
                            },
                            hpp_wansha2: {
                                mod: {
                                    cardSavable: function (card, player) {
                                        if (!_status.currentPhase) return;
                                        if (_status.currentPhase.isIn() && _status.currentPhase.hasSkill('hpp_wansha') && _status.currentPhase != player) {
                                            if (card.name == 'tao') return false;
                                        }
                                    },
                                    cardEnabled: function (card, player) {
                                        if (!_status.currentPhase) return;
                                        if (_status.currentPhase.isIn() && _status.currentPhase.hasSkill('hpp_wansha') && _status.currentPhase != player) {
                                            if (card.name == 'tao') return false;
                                        }
                                    },
                                },
                            },

                            // 沮授
                            hpp_jianying: {
                                audio: 'dcjianying',
                                locked: false,
                                mod: {
                                    aiOrder: function (player, card, num) {
                                        if (typeof card == 'object' && player.isPhaseUsing()) {
                                            var evt = lib.skill.hpp_jianying.getLastUsed(player);
                                            if (evt && evt.card && (get.suit(evt.card) && get.suit(evt.card) == get.suit(card) || evt.card.number && evt.card.number == get.number(card))) {
                                                return num + 10;
                                            }
                                        }
                                    },
                                },
                                trigger: { player: 'useCard' },
                                frequent: true,
                                getLastUsed: function (player, event) {
                                    var history = player.getAllHistory('useCard');
                                    var index;
                                    if (event) index = history.indexOf(event) - 1;
                                    else index = history.length - 1;
                                    if (index >= 0) return history[index];
                                    return false;
                                },
                                filter: function (event, player) {
                                    var evt = lib.skill.hpp_jianying.getLastUsed(player, event);
                                    if (!evt || !evt.card) return false;
                                    if (!player.isPhaseUsing()) return false;
                                    return lib.suit.contains(get.suit(evt.card)) && get.suit(evt.card) == get.suit(event.card) ||
                                        typeof get.number(evt.card, false) == 'number' && get.number(evt.card, false) == get.number(event.card);
                                },
                                content: function () {
                                    player.draw();
                                },
                            },
                            hpp_shibei: {
                                audio: 'shibei',
                                trigger: { player: 'damageEnd' },
                                forced: true,
                                check: function (event, player) {
                                    return player.getHistory('damage', function (evt) {
                                        return evt != event
                                    }).length == 0;
                                },
                                content: function () {
                                    if (player.getHistory('damage', function (evt) {
                                        return evt != trigger
                                    }).length > 0) {
                                        player.loseHp();
                                    }
                                    else {
                                        player.recover();
                                        player.draw();
                                    }
                                },
                                subSkill: {
                                    damaged: {},
                                    ai: {},
                                },
                                ai: {
                                    maixie_defend: true,
                                    threaten: 0.9,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player.hasSkillTag('jueqing')) return;
                                            if (target.hujia) return;
                                            if (player._hpp_shibei_tmp) return;
                                            if (target.hasSkill('hpp_shibei_ai')) return;
                                            if (_status.event.getParent('useCard', true) || _status.event.getParent('_wuxie', true)) return;
                                            if (get.tag(card, 'damage')) {
                                                if (target.getHistory('damage').length > 0) {
                                                    return [1, -2];
                                                }
                                                else {
                                                    if (get.attitude(player, target) > 0 && target.hp > 1) {
                                                        return 0;
                                                    }
                                                    if (get.attitude(player, target) < 0 && !player.hasSkillTag('damageBonus')) {
                                                        if (card.name == 'sha') return;
                                                        var sha = false;
                                                        player._hpp_shibei_tmp = true;
                                                        var num = player.countCards('h', function (card) {
                                                            if (card.name == 'sha') {
                                                                if (sha) {
                                                                    return false;
                                                                }
                                                                else {
                                                                    sha = true;
                                                                }
                                                            }
                                                            return get.tag(card, 'damage') && player.canUse(card, target) && get.effect(target, card, player, player) > 0;
                                                        });
                                                        delete player._hpp_shibei_tmp;
                                                        if (player.hasSkillTag('damage')) {
                                                            num++;
                                                        }
                                                        if (num < 2) {
                                                            var enemies = player.getEnemies();
                                                            if (enemies.length == 1 && enemies[0] == target && player.needsToDiscard()) {
                                                                return;
                                                            }
                                                            return 0;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },

                            // 蒯良蒯越
                            hpp_shenshi: {
                                audio: 'nzry_shenshi_1',
                                group: 'hpp_shenshi_2',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                discard: false,
                                line: true,
                                lose: false,
                                delay: false,
                                position: 'he',
                                filterCard: true,
                                filterTarget: lib.filter.notMe,
                                check: function (card) {
                                    return 5 - get.value(card);
                                },
                                usable: 1,
                                prompt: '将一张牌交给一名其他角色，然后对其造成1点伤害，若该角色因此死亡，则你可以令一名角色将手牌摸至四张',
                                content: function () {
                                    'step 0'
                                    player.give(cards, target);
                                    target.damage('nocard');
                                    'step 1'
                                    if (!target.isIn()) {
                                        player.chooseTarget('审时：令一名角色将手牌摸至四张', function (card, player, target) {
                                            return target.countCards('h') < 4;
                                        }).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.attitude(player, target);
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        player.line(result.targets);
                                        result.targets[0].drawTo(4)
                                    };
                                },
                                ai: {
                                    order: 1,
                                    result: { target: -1 },
                                },
                                subSkill: {
                                    '2': {
                                        audio: 'nzry_shenshi_1',
                                        trigger: { player: 'damageEnd' },
                                        filter: function (event, player) {
                                            return player.countCards('he') > 0 && event.source && event.source != player;
                                        },
                                        logTarget: 'source',
                                        prompt2: '观看该角色的手牌，然后交给其一张牌，其失去此牌后，你将手牌摸至四张',
                                        content: function () {
                                            'step 0'
                                            player.viewHandcards(trigger.source);
                                            player.chooseCard('he', true, '交给' + get.translation(trigger.source) + '一张牌').set('ai', function (card) {
                                                return 5 - get.value(card);
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                var skill = 'hpp_shenshi_' + player.playerid;
                                                if (!lib.skill[skill]) {
                                                    lib.skill[skill] = {};
                                                    lib.translate[skill] = '审时';
                                                }
                                                player.give(result.cards, trigger.source).gaintag.add(skill);
                                                player.addSkill('hpp_shenshi_3');
                                            }
                                        },
                                    },
                                    '3': {
                                        charlotte: true,
                                        audio: 'nzry_shenshi_1',
                                        trigger: { global: ['equipAfter', 'addJudgeAfter', 'loseAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'] },
                                        filter: function (event, player) {
                                            if (player.countCards('h') >= 4) return false;
                                            return game.hasPlayer2(function (current) {
                                                var evt = event.getl(current);
                                                if (evt && evt.gaintag_map) {
                                                    for (var i in evt.gaintag_map) {
                                                        if (evt.gaintag_map[i].includes('hpp_shenshi_' + player.playerid)) return true;
                                                    }
                                                }
                                                return false;
                                            });
                                        },
                                        forced: true,
                                        content: function () {
                                            player.drawTo(4);
                                        },
                                    },
                                },
                            },

                            // 梁兴
                            hpp_lulue: {
                                audio: 'lulve',
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    var hs = player.countCards('h');
                                    return hs > 0 && game.hasPlayer(function (target) {
                                        var ts = target.countCards('h');
                                        return target != player && ts > 0 && hs >= ts;
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_lulue'), function (card, player, target) {
                                        var hs = player.countCards('h'), ts = target.countCards('h');
                                        return target != player && ts > 0 && hs >= ts;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player, att = get.attitude(player, target);
                                        if (target.isTurnedOver()) return att / 10;
                                        if (!player.hasShan() && target.canUse({ name: 'sha', isCard: true }, player, false) && get.effect(player, { name: 'sha', isCard: true }, target, player) < 0 && player.hp < 4) return 0;
                                        return -att * Math.sqrt(target.countCards('h'));
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_lulue', target);
                                        var str = get.translation(player);
                                        target.chooseControl().set('choiceList', [
                                            '将所有手牌交给' + str + '，然后其将武将牌翻面',
                                            '将武将牌翻面，然后视为对' + str + '使用【杀】',
                                        ]).set('ai', function () {
                                            var player = _status.event.player, target = _status.event.getParent().player;
                                            if (player.isTurnedOver()) return 1;
                                            if (!target.hasShan() && player.canUse({ name: 'sha', isCard: true }, target, false) && get.effect(target, { name: 'sha', isCard: true }, player, player) < 0) return 0;
                                            return Math.random() < 0.5 ? 0 : 1;
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.index == 0) {
                                        target.give(target.getCards('h'), player);
                                        player.turnOver();
                                        event.finish();
                                    }
                                    else target.turnOver();
                                    'step 3'
                                    if (target.canUse({ name: 'sha', isCard: true }, player, false)) target.useCard({ name: 'sha', isCard: true }, player, false);
                                },
                            },

                            // 廖化
                            hpp_dangxian: {
                                audio: 'dangxian',
                                audioname2: { hpp_guansuo: 'dangxian_guansuo' },
                                trigger: { player: 'phaseBegin' },
                                forced: true,
                                locked: false,
                                content: function () {
                                    var next = player.phaseUse();
                                    event.next.remove(next);
                                    trigger.next.push(next);
                                    var card = get.cardPile(function (card) {
                                        return card.name == 'sha';
                                    });
                                    if (card) {
                                        player.gain(card, 'draw');
                                        game.log(player, '摸了一张【杀】');
                                    }
                                    game.updateRoundNumber();
                                },
                            },
                            hpp_fuli: {
                                audio: 'fuli',
                                skillAnimation: true,
                                animationColor: 'soil',
                                unique: true,
                                limited: true,
                                enable: 'chooseToUse',
                                mark: true,
                                filter: function (event, player) {
                                    if (event.type != 'dying') return false;
                                    if (player != event.dying) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_fuli');
                                    event.num = game.countGroup();
                                    player.recover(event.num - player.hp);
                                    'step 1'
                                    var num2 = num - player.countCards('h');
                                    if (num2) player.draw(num2);
                                    'step 2'
                                    if (num > 3) player.turnOver();
                                    player.storage.hpp_fuli = true;
                                },
                                ai: {
                                    save: true,
                                    skillTagFilter: function (player, arg, target) {
                                        return player == target;
                                    },
                                    result: {
                                        player: 10
                                    },
                                },
                                intro: { content: 'limited' },
                            },

                            // 李典
                            hpp_xunxun: {
                                audio: 'xunxun',
                                inherit: 'xunxun',
                                group: 'hpp_xunxun_biyue',
                                subSkill: {
                                    biyue: {
                                        audio: 'xunxun',
                                        trigger: { player: 'phaseJieshuBegin' },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            var cards = get.bottomCards(2);
                                            if (cards.length) {
                                                player.gain(cards);
                                                player.$draw(cards.length);
                                                game.log(player, '从牌堆底获得了' + get.cnNumber(cards.length) + '张牌');
                                            }
                                        },
                                    },
                                },
                            },

                            // 凌统
                            hpp_xuanfeng: {
                                audio: 'xuanfeng',
                                audioname: ['re_heqi', 'xin_lingtong'],
                                trigger: {
                                    player: ['loseAfter', 'phaseDiscardEnd'],
                                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                },
                                direct: true,
                                filter: function (event, player) {
                                    // if (_status.dying.length) return false;
                                    if (event.name == 'phaseDiscard') {
                                        var cards = [];
                                        player.getHistory('lose', function (evt) {
                                            if (evt && evt.type == 'discard' && evt.getParent('phaseDiscard') == event && evt.hs) cards.addArray(evt.hs);
                                        });
                                        return cards.length > 1;
                                    }
                                    else {
                                        var evt = event.getl(player);
                                        return evt && evt.es && evt.es.length > 0;
                                    }
                                },
                                content: function () {
                                    "step 0"
                                    event.count = 2;
                                    event.targets = [];
                                    event.logged = false;
                                    "step 1"
                                    event.count--;
                                    player.chooseTarget(get.prompt('hpp_xuanfeng'), '弃置一名其他角色的一张牌', function (card, player, target) {
                                        if (player == target) return false;
                                        return target.countDiscardableCards(player, 'he');
                                    }).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target);
                                    });
                                    "step 2"
                                    if (result.bool) {
                                        if (!event.logged) {
                                            player.logSkill('hpp_xuanfeng', result.targets);
                                            event.logged = true;
                                        }
                                        else player.line(result.targets[0], 'green');
                                        targets.add(result.targets[0]);
                                        player.discardPlayerCard(result.targets[0], 'he', true);
                                    }
                                    else if (!targets.length) event.finish();
                                    "step 3"
                                    if (event.count) event.goto(1);
                                    else if (player == _status.currentPhase) {
                                        player.chooseTarget('是否对其中一名角色造成1点伤害', function (card, player, target) {
                                            return _status.event.targets.contains(target);
                                        }).set('targets', targets).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.damageEffect(target, player, player);
                                        });
                                    }
                                    else event.finish();
                                    "step 4"
                                    if (result.bool) {
                                        player.line(result.targets[0], 'thunder');
                                        result.targets[0].damage();
                                    }
                                },
                                ai: {
                                    effect: {
                                        player_use: function (card, player, target) {
                                            if (player == target && get.type(card) == 'equip' && player.countCards('hes', function (cardx) {
                                                return card != cardx && (!card.cards || !card.cards.contains(cardx)) && (player.hasSkill('hpp_yongjin') || get.subtype(card) == get.subtype(cardx)) && (get.position(cardx) == 'e' || player.canUse(cardx, player));
                                            }) > 0) return;
                                            if (!game.hasPlayer(function (current) {
                                                return get.attitude(player, current) < 0 && current.countDiscardableCards(player, 'he') > 0 && get.damageEffect(current, player, player) > 0;
                                            })) return;
                                            if (typeof card == 'object' && player.isPhaseUsing() &&
                                                player.needsToDiscard() == 2 && card.cards && card.cards.filter(function (i) {
                                                    return get.position(i) == 'h';
                                                }).length > 0 && !get.tag(card, 'draw') && !get.tag(card, 'gain') && !(get.tag(card, 'discard') && target == player && player.countCards('e') > 0)) return 'zeroplayertarget';
                                        },
                                        target: function (card, player, target, current) {
                                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) return [1, 3];
                                            if (get.tag(card, 'damage') && target.hp > 2) {
                                                var num1 = target.countCards('h'), num2 = target.getHandcardLimit();
                                                if (num1 > num2) return [1, 1];
                                                if (num1 == num2) return [1.1, _status.event.player == target ? 3 : 0.5];
                                                if (num1 == num2 - 1) return [0.1, _status.event.player == target ? 4.5 : 0.1];
                                            }
                                            if (typeof card == 'object' && (card.name == 'shunshou' || card.name == 'guohe' || card.name == 'zhujinqiyuan') && target.countCards('h') > 0 && get.attitude(player, target) < 0) return [1, -1];
                                        }
                                    },
                                    reverseEquip: true,
                                    noe: true,
                                    expose: 0.2,
                                }
                            },
                            hpp_yongjin: {
                                audio: 'yongjin',
                                audioname: ['xin_lingtong'],
                                unique: true,
                                limited: true,
                                skillAnimation: true,
                                animationColor: 'wood',
                                enable: 'phaseUse',
                                filter: function (event, player, cards) {
                                    return game.hasPlayer(function (current) {
                                        var es = current.getCards('e', function (card) {
                                            return !cards || !cards.contains(card);
                                        });
                                        for (var i = 0; i < es.length; i++) {
                                            if (game.hasPlayer(function (current2) {
                                                return current != current2 && !current2.isMin() && current2.isEmpty(get.subtype(es[i]));
                                            })) {
                                                return true;
                                            }
                                        }
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_yongjin');
                                    event.count = 3;
                                    event.cards = [];
                                    'step 1'
                                    event.count--;
                                    if (!lib.skill.hpp_yongjin.filter(null, player, cards)) {
                                        event.finish();
                                        return;
                                    };
                                    var next = player.chooseTarget(2, function (card, player, target) {
                                        if (ui.selected.targets.length) {
                                            var from = ui.selected.targets[0];
                                            if (target.isMin()) return false;
                                            var es = from.getCards('e', function (card) {
                                                return !_status.event.cards.contains(card);
                                            });
                                            for (var i = 0; i < es.length; i++) {
                                                if (target.isEmpty(get.subtype(es[i]))) return true;
                                            }
                                            return false;
                                        }
                                        else {
                                            return target.countCards('e', function (card) {
                                                return !_status.event.cards.contains(card);
                                            }) > 0;
                                        }
                                    });
                                    next.set('ai', function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        var sgnatt = get.sgn(att);
                                        if (ui.selected.targets.length == 0) {
                                            if (target == player && player.hasSkill('hpp_xuanfeng')) {
                                                if (player.countCards('e', function (card) {
                                                    return !_status.event.cards.contains(card) && game.hasPlayer(function (current) {
                                                        return current != target && current.isEmpty(get.subtype(card)) && get.effect(current, card, player, player) < 0;
                                                    });
                                                }) > 0) return 18;
                                                return 7;
                                            }
                                            else if (att > 0) {
                                                if (target.countCards('e', function (card) {
                                                    return get.value(card, target) < 0 && !_status.event.cards.contains(card) && game.hasPlayer(function (current) {
                                                        return current != target && current.isEmpty(get.subtype(card)) && get.effect(current, card, player, player) < 0;
                                                    });
                                                }) > 0) return 9;
                                            }
                                            else if (att < 0) {
                                                if (game.hasPlayer(function (current) {
                                                    if (current != target && get.attitude(player, current) > 0) {
                                                        var es = target.getCards('e', function (card) {
                                                            return !_status.event.cards.contains(card);
                                                        });
                                                        for (var i = 0; i < es.length; i++) {
                                                            if (get.value(es[i], target) > 0 && current.isEmpty(get.subtype(es[i])) && get.effect(current, es[i], player, current) > 0) return true;
                                                        }
                                                    }
                                                })) {
                                                    return -att;
                                                }
                                            }
                                            return 0;
                                        }
                                        var es = ui.selected.targets[0].getCards('e', function (card) {
                                            return !_status.event.cards.contains(card);
                                        });
                                        var i;
                                        var att2 = get.sgn(get.attitude(player, ui.selected.targets[0]));
                                        for (i = 0; i < es.length; i++) {
                                            if (ui.selected.targets[0] == player && player.hasSkill('hpp_xuanfeng')) {
                                                var bool = game.hasPlayer(function (current) {
                                                    return get.attitude(player, current) < 0 && current.countDiscardableCards(player, 'he') > 0 && get.damageEffect(current, player, player) > 0;
                                                });
                                                if (bool && player.countCards('e', function (card) {
                                                    return !_status.event.cards.contains(card) && target.isEmpty(get.subtype(card)) && get.effect(target, card, player, player) > 0;
                                                })) return 2.5 * Math.abs(att);
                                                else if (bool) return 1 / Math.max(1, Math.abs(att));
                                                else return get.damageEffect(target, player, player);
                                            }
                                            if (sgnatt != 0 && att2 != 0 && sgnatt != att2 &&
                                                get.sgn(get.value(es[i], ui.selected.targets[0])) == -att2 &&
                                                get.sgn(get.effect(target, es[i], player, target)) == sgnatt &&
                                                target.isEmpty(get.subtype(es[i]))) {
                                                return Math.abs(att);
                                            }
                                        }
                                        if (i == es.length) {
                                            return 0;
                                        }
                                        return -att * get.attitude(player, ui.selected.targets[0]);
                                    });
                                    next.set('multitarget', true);
                                    next.set('cards', cards);
                                    next.set('targetprompt', ['被移走', '移动目标']);
                                    next.set('prompt', '移动场上的一张装备牌');
                                    'step 2'
                                    if (result.bool) {
                                        player.line2(result.targets, 'green');
                                        event.targets = result.targets;
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 3'
                                    game.delay();
                                    'step 4'
                                    if (targets.length == 2) {
                                        player.choosePlayerCard('e', true, function (button) {
                                            var player = _status.event.player;
                                            var targets0 = _status.event.targets0;
                                            var targets1 = _status.event.targets1;
                                            if (get.attitude(player, targets0) > 0 && get.attitude(player, targets1) < 0) {
                                                if (get.value(button.link, targets0) < 0 && get.effect(targets1, button.link, player, targets1) > 0) return 10;
                                                return 0;
                                            }
                                            else {
                                                return get.value(button.link) * get.effect(targets1, button.link, player, player);
                                            }
                                        }, targets[0]).set('nojudge', event.nojudge || false).set('targets0', targets[0]).set('targets1', targets[1]).set('filterButton', function (button) {
                                            if (_status.event.cards.contains(button.link)) return false;
                                            var targets1 = _status.event.targets1;
                                            return targets1.isEmpty(get.subtype(button.link));
                                        }).set('cards', cards);
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 5'
                                    if (result.bool && result.links.length) {
                                        var link = result.links[0];
                                        cards.add(link);
                                        event.targets[1].equip(link);
                                        event.targets[0].$give(link, event.targets[1])
                                        game.delay();
                                    }
                                    else event.finish();
                                    'step 6'
                                    if (event.count > 0) event.goto(1);
                                },
                                ai: {
                                    order: 7,
                                    result: {
                                        player: function (player) {
                                            var num = 0;
                                            var friends = game.filterPlayer(function (current) {
                                                return get.attitude(player, current) >= 4;
                                            });
                                            var vacancies = {
                                                equip1: 0,
                                                equip2: 0,
                                                equip3: 0,
                                                equip4: 0,
                                                equip5: 0
                                            };
                                            for (var i = 0; i < friends.length; i++) {
                                                for (var j = 1; j <= 5; j++) {
                                                    if (friends[i].isEmpty(j)) {
                                                        vacancies['equip' + j]++;
                                                    }
                                                }
                                            }
                                            var sources = game.filterPlayer(function (current) {
                                                return ((current == player && current.hasSkill('hpp_xuanfeng')) || get.attitude(player, current) < 0) && current.countCards('e');
                                            });
                                            for (var i = 0; i < sources.length; i++) {
                                                var es = sources[i].getCards('e');
                                                for (var j = 0; j < es.length; j++) {
                                                    var type = get.subtype(es[j]);
                                                    if (sources[i] == player || vacancies[type] > 0 && get.value(es[j]) > 0) {
                                                        num++;
                                                        if (sources[i] == player && vacancies[type] && game.hasPlayer(function (current) {
                                                            return get.attitude(player, current) < 0 && current.countDiscardableCards(player, 'he') > 0 && get.damageEffect(current, player, player) > 0;
                                                        })) num += 0.5;
                                                        if (num >= 3) {
                                                            return 1;
                                                        }
                                                        vacancies[type]--;
                                                    }
                                                }
                                            }
                                            if (num && player.hp == 1) {
                                                return 0.5;
                                            }
                                            return 0;
                                        }
                                    }
                                }
                            },

                            // 李儒
                            hpp_fencheng: {
                                skillAnimation: 'epic',
                                animationColor: 'gray',
                                audio: 'dcfencheng',
                                audioname: ['dc_liru'],
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return !player.storage.hpp_fencheng;
                                },
                                filterTarget: function (card, player, target) {
                                    return player != target;
                                },
                                unique: true,
                                limited: true,
                                selectTarget: -1,
                                multitarget: true,
                                multiline: true,
                                mark: true,
                                line: 'fire',
                                content: function () {
                                    "step 0"
                                    player.storage.hpp_fencheng = true;
                                    player.awakenSkill('hpp_fencheng');
                                    event.num = 1;
                                    event.targets = targets.slice(0);
                                    event.targets.sort(lib.sort.seat);
                                    "step 1"
                                    if (event.targets.length) {
                                        var target = event.targets.shift();
                                        event.target = target;
                                        var res = get.damageEffect(target, player, target, 'fire');
                                        target.chooseToDiscard('he', '弃置至少' + get.cnNumber(event.num) + '张牌或受到2点火焰伤害', [num, Infinity]).set('ai', function (card) {
                                            if (ui.selected.cards.length >= _status.event.getParent().num) return -1;
                                            if (_status.event.player.hasSkillTag('nofire')) return -1;
                                            if (_status.event.res >= 0) return 6 - get.value(card);
                                            if (get.type(card) != 'basic') {
                                                return 10 - get.value(card);
                                            }
                                            return 8 - get.value(card);
                                        }).set('res', res);
                                    }
                                    else {
                                        event.finish();
                                    }
                                    "step 2"
                                    if (!result.bool) {
                                        event.target.damage(2, 'fire');
                                        event.num = 1;
                                    }
                                    else {
                                        event.num = result.cards.length + 1;
                                    }
                                    event.goto(1);
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        player: function (player) {
                                            var num = 0, eff = 0, players = game.filterPlayer(function (current) {
                                                return current != player;
                                            }).sortBySeat(player);
                                            for (var target of players) {
                                                if (get.damageEffect(target, player, target, 'fire') >= 0) { num = 0; continue };
                                                var shao = false;
                                                num++;
                                                if (target.countCards('he', function (card) {
                                                    if (get.type(card) != 'basic') {
                                                        return get.value(card) < 10;
                                                    }
                                                    return get.value(card) < 8;
                                                }) < num) shao = true;
                                                if (shao) {
                                                    eff -= 4 * (get.realAttitude || get.attitude)(player, target);
                                                    num = 0;
                                                }
                                                else eff -= num * (get.realAttitude || get.attitude)(player, target) / 4;
                                            }
                                            if (eff < 4) return 0;
                                            return eff;
                                        }
                                    }
                                },
                                init: function (player) {
                                    player.storage.hpp_fencheng = false;
                                },
                                intro: {
                                    content: 'limited'
                                }
                            },
                            hpp_mieji: {
                                audio: 'xinmieji',
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('he', { color: 'black' }) > 0;
                                },
                                filterCard: function (card) {
                                    return get.color(card) == 'black';
                                },
                                position: 'he',
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h');
                                },
                                discard: false,
                                delay: false,
                                check: function (card) {
                                    return 8 - get.value(card);
                                },
                                loseTo: 'cardPile',
                                insert: true,
                                content: function () {
                                    'step 0'
                                    game.broadcastAll(function (player) {
                                        var cardx = ui.create.card();
                                        cardx.classList.add('infohidden');
                                        cardx.classList.add('infoflip');
                                        player.$throw(cardx, 1000, 'nobroadcast');
                                    }, player);
                                    game.log(player, '将一张牌置于了牌堆顶');
                                    game.delayx();
                                    'step 1'
                                    target.chooseToDiscard('he', true).set('prompt', '请弃置一张锦囊牌，或依次弃置两张非锦囊牌。');
                                    'step 2'
                                    if ((!result.cards || get.type(result.cards[0], 'trick', result.cards[0].original == 'h' ? target : false) != 'trick') && target.countCards('he', function (card) {
                                        return get.type2(card) != 'trick';
                                    })) {
                                        target.chooseToDiscard('he', true, function (card) {
                                            return get.type2(card) != 'trick';
                                        }).set('prompt', '请弃置第二张非锦囊牌');
                                    }
                                },
                                ai: {
                                    order: 9,
                                    result: {
                                        target: -1,
                                    },
                                },
                            },

                            // 刘备
                            hpp_rende: {
                                audio: 'rerende',
                                audioname: ['gz_jun_liubei', 'shen_caopi'],
                                enable: 'phaseUse',
                                filterCard: true,
                                selectCard: [1, Infinity],
                                discard: false,
                                lose: false,
                                delay: false,
                                filterTarget: function (card, player, target) {
                                    if (player.storage.hpp_rende2 && player.storage.hpp_rende2.contains(target)) return false;
                                    return player != target;
                                },
                                onremove: ['hpp_rende', 'hpp_rende2'],
                                check: function (card) {
                                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') return 0;
                                    if (!ui.selected.cards.length && card.name == 'du') return 20;
                                    var player = get.owner(card);
                                    if (ui.selected.cards.length >= Math.max(2, player.countCards('h') - player.hp)) return 0;
                                    if (player.hp == player.maxHp || player.storage.hpp_rende < 0 || player.countCards('h') <= 1) {
                                        var players = game.filterPlayer();
                                        for (var i = 0; i < players.length; i++) {
                                            if (players[i].hasSkill('haoshi') &&
                                                !players[i].isTurnedOver() &&
                                                !players[i].hasJudge('lebu') &&
                                                get.attitude(player, players[i]) >= 3 &&
                                                get.attitude(players[i], player) >= 3) {
                                                return 11 - get.value(card);
                                            }
                                        }
                                        if (player.countCards('h') > player.hp) return 10 - get.value(card);
                                        if (player.countCards('h') > 2) return 6 - get.value(card);
                                        return -1;
                                    }
                                    return 10 - get.value(card);
                                },
                                content: function () {
                                    'step 0'
                                    var evt = _status.event.getParent('phaseUse');
                                    if (evt && evt.name == 'phaseUse' && !evt.hpp_rende) {
                                        var next = game.createEvent('hpp_rende_clear');
                                        _status.event.next.remove(next);
                                        evt.after.push(next);
                                        evt.hpp_rende = true;
                                        next.player = player;
                                        next.setContent(lib.skill.hpp_rende1.content);
                                    }
                                    if (!Array.isArray(player.storage.hpp_rende2)) {
                                        player.storage.hpp_rende2 = [];
                                    }
                                    player.storage.hpp_rende2.push(target);
                                    player.give(cards, target);
                                    if (cards.length > 0) {
                                        player.addTempSkill('hpp_rende_effect', { player: 'phaseBefore' });
                                        target.storage.hpp_rende_disable_mark = player;
                                        target.addSkill('hpp_rende_disable');
                                        target.addSkill('hpp_rende_disable_mark');
                                    }
                                    if (typeof player.storage.hpp_rende != 'number') {
                                        player.storage.hpp_rende = 0;
                                    }
                                    if (player.storage.hpp_rende >= 0) {
                                        player.storage.hpp_rende += cards.length;
                                        if (player.storage.hpp_rende >= 2) {
                                            var list = [];
                                            if (lib.filter.cardUsable({ name: 'sha' }, player, event.getParent('chooseToUse')) && game.hasPlayer(function (current) {
                                                return player.canUse('sha', current);
                                            })) {
                                                list.push(['基本', '', 'sha']);
                                            }
                                            for (var i of lib.inpile_nature) {
                                                if (lib.filter.cardUsable({ name: 'sha', nature: i }, player, event.getParent('chooseToUse')) && game.hasPlayer(function (current) {
                                                    return player.canUse({ name: 'sha', nature: i }, current);
                                                })) {
                                                    list.push(['基本', '', 'sha', i]);
                                                }
                                            }
                                            if (lib.filter.cardUsable({ name: 'tao' }, player, event.getParent('chooseToUse')) && game.hasPlayer(function (current) {
                                                return player.canUse('tao', current);
                                            })) {
                                                list.push(['基本', '', 'tao']);
                                            }
                                            if (lib.filter.cardUsable({ name: 'jiu' }, player, event.getParent('chooseToUse')) && game.hasPlayer(function (current) {
                                                return player.canUse('jiu', current);
                                            })) {
                                                list.push(['基本', '', 'jiu']);
                                            }
                                            for (var i of lib.inpile) {
                                                if (get.type(i) == 'trick') {
                                                    if (lib.filter.filterCard({ name: i }, player, _status.event.getParent('chooseToUse')) && game.hasPlayer(function (current) {
                                                        return player.canUse(i, current);
                                                    })) {
                                                        list.push(['锦囊', '', i]);
                                                    }
                                                }
                                            }
                                            if (list.length) {
                                                player.chooseButton(['是否视为使用一张基本或普通锦囊牌？', [list, 'vcard']]).set('ai', function (button) {
                                                    var player = _status.event.player;
                                                    var card = { name: button.link[2], nature: button.link[3] };
                                                    if (card.name == 'tao') {
                                                        if (player.hp == 1 || (player.hp == 2 && !player.hasShan()) || player.needsToDiscard()) {
                                                            return 5;
                                                        }
                                                        return 1;
                                                    }
                                                    if (card.name == 'sha') {
                                                        if (game.hasPlayer(function (current) {
                                                            return player.canUse(card, current) && get.effect(current, card, player, player) > 0
                                                        })) {
                                                            if (card.nature == 'fire') return 2.95;
                                                            if (card.nature == 'thunder' || card.nature == 'ice') return 2.92;
                                                            return 2.9;
                                                        }
                                                        return 0;
                                                    }
                                                    if (card.name == 'jiu') {
                                                        return 0.5;
                                                    }
                                                    return _status.event.player.getUseValue({ name: card.name, isCard: true });;
                                                });
                                            }
                                            else {
                                                event.finish();
                                            }
                                            player.storage.hpp_rende = -1;
                                        }
                                        else {
                                            event.finish();
                                        }
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 1'
                                    if (result && result.bool && result.links[0]) {
                                        var card = { name: result.links[0][2], nature: result.links[0][3] };
                                        player.chooseUseTarget(card, true);
                                    }
                                },
                                ai: {
                                    fireAttack: true,
                                    order: function (skill, player) {
                                        if (player.hp < player.maxHp && player.storage.hpp_rende < 2 && player.countCards('h') > 1) {
                                            return 10;
                                        }
                                        return 4;
                                    },
                                    result: {
                                        target: function (player, target) {
                                            if (target.hasSkillTag('nogain')) return 0;
                                            if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {
                                                if (target.hasSkillTag('nodu')) return 0;
                                                return -10;
                                            }
                                            if (target.hasJudge('lebu')) return 0;
                                            var nh = target.countCards('h');
                                            var np = player.countCards('h');
                                            if (player.hp == player.maxHp || player.storage.hpp_rende < 0 || player.countCards('h') <= 1) {
                                                if (nh >= np - 1 && np <= player.hp && !target.hasSkill('haoshi')) return 0;
                                            }
                                            return Math.max(1, 5 - nh);
                                        }
                                    },
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player == target && get.type(card) == 'equip') {
                                                if (player.countCards('e', { subtype: get.subtype(card) })) {
                                                    if (game.hasPlayer(function (current) {
                                                        return current != player && get.attitude(player, current) > 0;
                                                    })) {
                                                        return 0;
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    threaten: 0.8
                                },
                                subSkill: {
                                    effect: {
                                        forced: true,
                                    },
                                    disable: {
                                        // group:'hpp_rende_disable_mark',
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if (card.name == 'sha' && get.color(card) == 'red' && target.hasSkill('hpp_rende_effect')) {
                                                    return false;
                                                }
                                            },
                                        },
                                        intro: {
                                            content: "你无法对$使用红色【杀】直到$的下回合开始",
                                        },
                                    },
                                    disable_mark: {
                                        mark: 'character',
                                        intro: {
                                            content: '你无法对$使用红色【杀】直到$的下回合开始',
                                        },
                                        onremove: function (player) {
                                            delete player.storage.hpp_rende_disable_mark;
                                            player.removeSkill('hpp_rende_disable');
                                        },
                                        trigger: { global: 'phaseBeginStart' },
                                        firstDo: true,
                                        charlotte: true,
                                        silent: true,
                                        filter: function (event, player) {
                                            return event.player == player.storage.hpp_rende_disable_mark;
                                        },
                                        content: function () {
                                            player.removeSkill('hpp_rende_disable_mark');
                                        }
                                    }
                                }
                            },
                            hpp_rende1: {
                                trigger: { player: 'phaseUseBegin' },
                                silent: true,
                                content: function () {
                                    player.storage.hpp_rende = 0;
                                    player.storage.hpp_rende2 = [];
                                }
                            },
                            hpp_jijiang: {
                                unique: true,
                                audio: 'jijiang1',
                                group: ['hpp_jijiang1', 'hpp_jijiang_draw'],
                                zhuSkill: true,
                                filter: function (event, player) {
                                    if (!player.hasZhuSkill('hpp_jijiang') || !game.hasPlayer(function (current) {
                                        return current != player && current.group == 'shu';
                                    })) return false;
                                    return !event.hpp_jijiang && (event.type != 'phase' || !player.hasSkill('hpp_jijiang3'));
                                },
                                enable: ['chooseToUse', 'chooseToRespond'],
                                viewAs: { name: 'sha' },
                                filterCard: function () { return false },
                                selectCard: -1,
                                subSkill: {
                                    draw: {
                                        trigger: { global: ['useCard', 'respond'] },
                                        usable: 1,
                                        direct: true,
                                        filter: function (event, player) {
                                            return event.card.name == 'sha' && player != _status.currentPhase && event.player != player && event.player.group == 'shu' && player.hasZhuSkill('hpp_jijiang');
                                        },
                                        content: function () {
                                            'step 0'
                                            trigger.player.chooseBool('激将：是否令' + get.translation(player) + '摸一张牌？').set('ai', function () {
                                                var evt = _status.event;
                                                return get.attitude(evt.player, evt.getParent().player) > 0;
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_jijiang');
                                                trigger.player.line(player, 'fire');
                                                player.draw();
                                            }
                                            else player.storage.counttrigger.rehujia_draw--;
                                        },
                                    },
                                },
                                ai: {
                                    order: function () {
                                        return get.order({ name: 'sha' }) + 0.3;
                                    },
                                    respondSha: true,
                                    skillTagFilter: function (player) {
                                        if (!player.hasZhuSkill('hpp_jijiang') || !game.hasPlayer(function (current) {
                                            return current != player && current.group == 'shu';
                                        })) return false;
                                    },
                                },
                            },
                            hpp_jijiang1: {
                                audio: 'jijiang1',
                                audioname: ['liushan', 're_liubei', 're_liushan', 'ol_liushan'],
                                trigger: { player: ['useCardBegin', 'respondBegin'] },
                                logTarget: 'targets',
                                filter: function (event, player) {
                                    return event.skill == 'hpp_jijiang';
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    delete trigger.skill;
                                    trigger.getParent().set('hpp_jijiang', true);
                                    'step 1'
                                    if (event.current == undefined) event.current = player.next;
                                    if (event.current == player) {
                                        player.addTempSkill('hpp_jijiang3');
                                        event.finish();
                                        trigger.cancel();
                                        trigger.getParent().goto(0);
                                    }
                                    else if (event.current.group == 'shu') {
                                        var next = event.current.chooseToRespond('是否替' + get.translation(player) + '打出一张杀？', { name: 'sha' });
                                        next.set('ai', function () {
                                            var event = _status.event;
                                            return (get.attitude(event.player, event.source) - 2);
                                        });
                                        next.set('source', player);
                                        next.set('hpp_jijiang', true);
                                        next.set('skillwarn', '替' + get.translation(player) + '打出一张杀');
                                        next.noOrdering = true;
                                        next.autochoose = lib.filter.autoRespondSha;
                                    }
                                    else {
                                        event.current = event.current.next;
                                        event.redo();
                                    }
                                    'step 2'
                                    if (result.bool) {
                                        game.asyncDraw([player, event.current]);
                                        event.finish();
                                        trigger.card = result.card;
                                        trigger.cards = result.cards;
                                        trigger.throw = false;
                                        if (typeof event.current.ai.shown == 'number' && event.current.ai.shown < 0.95) {
                                            event.current.ai.shown += 0.3;
                                            if (event.current.ai.shown > 0.95) event.current.ai.shown = 0.95;
                                        }
                                    }
                                    else {
                                        event.current = event.current.next;
                                        event.goto(1);
                                    }
                                }
                            },
                            hpp_jijiang3: {
                                trigger: { global: ['useCardAfter', 'useSkillAfter', 'phaseAfter'] },
                                silent: true,
                                charlotte: true,
                                filter: function (event) {
                                    return event.skill != 'hpp_jijiang' && event.skill != 'qinwang';
                                },
                                content: function () {
                                    player.removeSkill('hpp_jijiang3');
                                },
                            },

                            // 刘表
                            hpp_zishou: {
                                audio: 'zishou',
                                audioname: ['re_liubiao'],
                                trigger: { player: 'phaseDrawBegin2' },
                                check: function (event, player) {
                                    return player.countCards('h') <= (player.hasSkill('zongshi') ? player.maxHp : (player.hp - 2)) || player.skipList.contains('phaseUse') || !player.countCards('h', function (card) {
                                        return get.tag(card, 'damage') && player.hasUseTarget(card);
                                    });
                                },
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                content: function () {
                                    trigger.num += game.countGroup();
                                    player.addTempSkill('hpp_zishou2');
                                },
                                ai: {
                                    threaten: 1.5
                                }
                            },
                            hpp_zishou2: {
                                audio: 'rezishou',
                                trigger: {
                                    source: 'damageBegin2',
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (event.name == 'damage') return event.player != player;
                                    if (player.getHistory('skipped').contains('phaseUse')) return false;
                                    return player.getHistory('useCard', function (evt) {
                                        if (evt.targets && evt.targets.length && evt.isPhaseUsing()) {
                                            var targets = evt.targets.slice(0);
                                            while (targets.contains(player)) targets.remove(player);
                                            return targets.length > 0;
                                        }
                                        return false;
                                    }).length == 0;
                                },
                                popup: false,
                                content: function () {
                                    if (trigger.name == 'damage') {
                                        player.logSkill('hpp_zishou', trigger.player);
                                        trigger.cancel();
                                        event.finish();
                                        return;
                                    }
                                },
                                ai: {
                                    effect: {
                                        player: function (card, player, target) {
                                            if (get.tag(card, 'damage')) return 'zeroplayertarget';
                                        },
                                    },
                                },
                            },
                            hpp_zongshi: {
                                audio: 'decadezongshi',
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + game.countGroup();
                                    },
                                },
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return player.countCards('h') > player.hp;
                                },
                                content: function () {
                                    player.addTempSkill('hpp_zongshi_shainfinity');
                                },
                                subSkill: {
                                    shainfinity: {
                                        audio: 'hpp_zongshi',
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return Infinity;
                                            }
                                        },
                                        ai: {
                                            // unequip: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg && arg.name == 'sha') return true;
                                                return false;
                                            }
                                        }
                                    }
                                }
                            },

                            // 刘谌
                            hpp_zhanjue: {
                                audio: 'zhanjue',
                                enable: 'phaseUse',
                                filterCard: function (card) {
                                    return !card.hasGaintag('hpp_qinwang');
                                },
                                selectCard: -1,
                                position: 'h',
                                filter: function (event, player) {
                                    var stat = player.getStat().skill;
                                    if (stat.hpp_zhanjue_draw && stat.hpp_zhanjue_draw >= 3) return false;
                                    var hs = player.getCards('h', function (card) {
                                        return !card.hasGaintag('hpp_qinwang');
                                    });
                                    if (!hs.length) return false;
                                    for (var i = 0; i < hs.length; i++) {
                                        var mod2 = game.checkMod(hs[i], player, 'unchanged', 'cardEnabled2', player);
                                        if (mod2 === false) return false;
                                    }
                                    return event.filterCard(get.autoViewAs({ name: 'juedou' }, hs))
                                },
                                viewAs: { name: 'juedou' },
                                onuse: function (links, player) {
                                    player.addTempSkill('hpp_zhanjue_effect', 'phaseUseEnd');
                                },
                                ai: {
                                    order: 1,
                                    tag: {
                                        respond: 2,
                                        respondSha: 2,
                                        damage: 1,
                                    },
                                    result: {
                                        target: -1.5,
                                        player: function (player, target) {
                                            if (player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: { name: 'juedou' },
                                            }, true)) {
                                                return 0;
                                            }
                                            if (get.damageEffect(target, player, target) > 0 && get.attitude(player, target) > 0 && get.attitude(target, player) > 0) {
                                                return 0;
                                            }
                                            var hs1 = target.getCards('h', 'sha');
                                            var hs2 = player.getCards('h', function (card) {
                                                return card.hasGaintag('hpp_qinwang') && get.name(card) == 'sha';
                                            });
                                            if (hs1.length > hs2.length + 1) {
                                                return -2;
                                            }
                                            var hsx = target.getCards('h');
                                            if (hsx.length > 2 && hs2.length == 0 && hsx[0].number < 6) {
                                                return -2;
                                            }
                                            if (hsx.length > 3 && hs2.length == 0) {
                                                return -2;
                                            }
                                            if (hs1.length > hs2.length && (!hs2.length || hs1[0].number > hs2[0].number)) {
                                                return -2;
                                            }
                                            return -0.5;
                                        },
                                    },
                                },
                                subSkill: {
                                    effect: {
                                        charlotte: true,
                                        onremove: function (player) {
                                            delete player.getStat().skill.hpp_zhanjue_draw;
                                        },
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            return event.skill == 'hpp_zhanjue';
                                        },
                                        forced: true,
                                        popup: false,
                                        content: function () {
                                            'step 0'
                                            var stat = player.getStat().skill;
                                            if (!stat.hpp_zhanjue_draw) stat.hpp_zhanjue_draw = 0;
                                            stat.hpp_zhanjue_draw++;
                                            player.draw('nodelay');
                                            var list = game.filterPlayer(function (current) {
                                                if (current.getHistory('damage', function (evt) {
                                                    return evt.card == trigger.card;
                                                }).length > 0) {
                                                    if (current == player) {
                                                        stat.hpp_zhanjue_draw++;
                                                    }
                                                    return true;
                                                }
                                                return false;
                                            });
                                            if (list.length) {
                                                list.sortBySeat();
                                                game.asyncDraw(list);
                                            }
                                            'step 1'
                                            game.delay();
                                            'step 2'
                                            if (player.getHistory('damage', function (evt) {
                                                return evt.card == trigger.card;
                                            }).length) {
                                                for (var i of game.filterPlayer().filter(function (target) {
                                                    return target.getHistory('sourceDamage', function (evt) {
                                                        return evt.card == trigger.card && evt.player == player;
                                                    }).length && target.isIn() && target.countCards('he');
                                                })) player.discardPlayerCard(i, 'he');
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_qinwang: {
                                audio: 'qinwang1',
                                enable: 'phaseUse',
                                usable: 1,
                                zhuSkill: true,
                                filter: function (event, player) {
                                    if (!player.hasZhuSkill('hpp_qinwang')) return false;
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.group == 'shu' && player.hasZhuSkill('hpp_qinwang', current);
                                    });
                                },
                                selectTarget: -1,
                                filterTarget: function (card, player, current) {
                                    return current != player && current.group == 'shu' && player.hasZhuSkill('hpp_qinwang', current);
                                },
                                content: function () {
                                    'step 0'
                                    if (target.hasCard(function (card) {
                                        return _status.connectMode || get.name(card, target) == 'sha';
                                    }, 'h')) {
                                        target.chooseCard('是否交给' + get.translation(player) + '一张基本牌？', function (card, player) {
                                            return get.type(card) == 'basic';
                                        }, 'h').set('goon', get.attitude(target, player) > 0).set('ai', function (card) {
                                            return _status.event.goon ? 1 : 0;
                                        });
                                    }
                                    else event.finish();
                                    'step 1'
                                    if (result.bool) {
                                        var card = result.cards[0];
                                        target.give(card, player).gaintag.add('hpp_qinwang');
                                        player.addTempSkill('hpp_qinwang_clear');
                                        player.chooseBool('是否令' + get.translation(target) + '摸一张牌？');
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) target.draw();
                                },
                                ai: {
                                    order: 5,
                                    result: { player: 1 },
                                },
                                subSkill: {
                                    clear: {
                                        charlotte: true,
                                        onremove: function (player) {
                                            player.removeGaintag('hpp_qinwang');
                                        },
                                    },
                                },
                            },

                            // 刘封
                            old_hpp_xiansi: {
                                audio: 'xiansi',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countCards('he');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    event.bilibili = false;
                                    player.chooseTarget(get.prompt2('hpp_xiansi'), [1, 2], function (card, player, target) {
                                        return target != player && target.countCards('he');
                                    }).set('ai', function (target) {
                                        var num = 1, player = _status.event.player;
                                        if (!target.inRange(player)) num = 3;
                                        return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        if (result.targets.length == 1) event.bilibili = true;
                                        result.targets.sortBySeat();
                                        player.logSkill('hpp_xiansi', result.targets);
                                        event.targets = result.targets;
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (event.targets.length) {
                                        var target = event.targets.shift();
                                        event.current = target;
                                        player.discardPlayerCard(target, 'he', true);
                                    }
                                    else event.goto(4);
                                    'step 3'
                                    if (result.bool) {
                                        if (result.cards[0].original == 'e' && event.current.inRange(player)) event.current.useCard({ name: 'sha', isCard: true }, player, false);
                                        event.goto(2);
                                    }
                                    'step 4'
                                    if (event.bilibili) player.draw();
                                },
                            },
                            hpp_xiansi: {
                                audio: 'xiansi',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countDiscardableCards(player, 'he');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    event.bilibili = false;
                                    player.chooseTarget(get.prompt2('hpp_xiansi'), [1, 2], function (card, player, target) {
                                        return target != player && target.countDiscardableCards(player, 'he');
                                    }).set('ai', function (target) {
                                        var num = 1, player = _status.event.player;
                                        if (!target.inRange(player) || !target.canUse({ name: 'sha', isCard: true }, player, false)) num = 3;
                                        return get.effect(target, { name: 'guohe_copy2' }, player, player) * num;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        if (result.targets.length == 1) event.bilibili = true;
                                        result.targets.sortBySeat();
                                        player.logSkill('hpp_xiansi', result.targets);
                                        event.targets = result.targets;
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (event.targets.length) {
                                        var target = event.targets.shift();
                                        event.current = target;
                                        player.discardPlayerCard(target, 'he', true);
                                    }
                                    else event.goto(4);
                                    'step 3'
                                    if (result.bool) {
                                        if (result.cards[0].original == 'e' && event.current.inRange(player)) event.current.useCard({ name: 'sha', isCard: true }, player, false);
                                        event.goto(2);
                                    }
                                    'step 4'
                                    if (event.bilibili) player.draw();
                                },
                            },

                            // 刘禅
                            hpp_fangquan: {
                                audio: 'fangquan',
                                trigger: { player: 'phaseUseBefore' },
                                filter: function (event, player) {
                                    return !player.hasSkill('hpp_fangquan2');
                                },
                                direct: true,
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    var fang = player.countMark('hpp_fangquan2') == 0 && player.hp >= 2 && player.countCards('h') <= player.hp + 1;
                                    player.chooseBool(get.prompt2('hpp_fangquan')).set('ai', function () {
                                        if (!_status.event.fang) return false;
                                        return game.hasPlayer(function (target) {
                                            if (target.hasJudge('lebu') || target == player) return false;
                                            if (get.attitude(player, target) > 4) {
                                                return (get.threaten(target) / Math.sqrt(target.hp + 1) / Math.sqrt(target.countCards('h') + 1) > 0);
                                            }
                                            return false;
                                        });
                                    }).set('fang', fang).setHiddenSkill(event.name);
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_fangquan');
                                        trigger.cancel();
                                        player.addTempSkill('hpp_fangquan2');
                                    }
                                },
                            },
                            hpp_fangquan2: {
                                trigger: { player: 'phaseEnd' },
                                forced: true,
                                popup: false,
                                audio: false,
                                onremove: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('放权：请选择进行额外回合的目标角色', lib.filter.notMe).ai = function (target) {
                                        if (target.hasJudge('lebu')) return -1;
                                        if (get.attitude(player, target) > 4) {
                                            return get.threaten(target) / Math.sqrt(target.hp + 1) / Math.sqrt(target.countCards('h') + 1);
                                        }
                                        return -1;
                                    };
                                    'step 1'
                                    var target = result.targets[0];
                                    player.line(target, 'fire');
                                    target.markSkillCharacter('hpp_fangquan', player, '放权', '进行一个额外回合');
                                    target.insertPhase();
                                    target.addSkill('hpp_fangquan3');
                                }
                            },
                            hpp_fangquan3: {
                                trigger: { player: ['phaseAfter', 'phaseCancelled'] },
                                forced: true,
                                popup: false,
                                audio: false,
                                content: function () {
                                    player.unmarkSkill('hpp_fangquan');
                                    player.removeSkill('hpp_fangquan3');
                                },
                            },
                            hpp_ruoyu: {
                                unique: true,
                                keepSkill: true,
                                derivation: 'hpp_jijiang',
                                audio: 'ruoyu',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return player.hasZhuSkill('hpp_ruoyu') && player.isMinHp();
                                },
                                forced: true,
                                juexingji: true,
                                zhuSkill: true,
                                skillAnimation: true,
                                animationColor: 'fire',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_ruoyu');
                                    player.gainMaxHp();
                                    'step 1'
                                    player.recover();
                                    player.addSkillLog('hpp_jijiang');
                                    if (!player.isZhu) player.storage.zhuSkill_hpp_ruoyu = ['rejijiang'];
                                    else event.trigger('zhuUpdate');
                                },
                            },

                            // 刘协
                            hpp_tianming: {
                                audio: 'tianming',
                                trigger: { target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                check: function (event, player) {
                                    var cards = player.getCards('he');
                                    if (cards.length <= 2) {
                                        for (var i = 0; i < cards.length; i++) {
                                            if (cards[i].name == 'shan' || cards[i].name == 'tao') return false;
                                        }
                                    }
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard(2, true, 'he');
                                    player.draw(2);
                                    'step 1'
                                    player.chooseTarget('是否令一名角色弃置两张牌，然后摸两张牌？').set('ai', function (target) {
                                        var cards = target.getCards('he');
                                        if (cards.length <= 2) {
                                            for (var i = 0; i < cards.length; i++) {
                                                if (cards[i].name == 'shan' || cards[i].name == 'tao') return 0;
                                            }
                                        }
                                        return get.attitude(player, target) * (target == player ? 1.2 : 1);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target);
                                        target.chooseToDiscard(2, true, 'he');
                                        target.draw(2);
                                    }
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (card.name == 'sha') return [1, 0.5];
                                        },
                                    },
                                },
                            },
                            hpp_mizhao: {
                                audio: 'mizhao',
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (ui.selected.cards.length && !game.hasPlayer(function (current) {
                                        return get.attitude(player, current) > 0;
                                    })) return -1;
                                    return 1 / (get.value(card) || 0.5);
                                },
                                filterCard: true,
                                selectCard: [1, Infinity],
                                filterTarget: lib.filter.notMe,
                                discard: false,
                                lose: false,
                                delay: false,
                                complexCard: true,
                                content: function () {
                                    'step 0'
                                    event.target1 = targets[0];
                                    targets[0].gain(cards, player, 'giveAuto');
                                    'step 1'
                                    if (!game.hasPlayer(function (current) {
                                        return current != player && target.canCompare(current);
                                    })) event.finish();
                                    'step 2'
                                    player.chooseTarget(true, '选择拼点目标', function (card, player, target) {
                                        return _status.event.target1.canCompare(target) && target != player;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var eff = get.effect(target, { name: 'sha' }, _status.event.target1, player);
                                        var att = get.attitude(player, target);
                                        if (att > 0) {
                                            return eff - 10;
                                        }
                                        return eff;
                                    }).set('target1', event.target1).set('forceDie', true);
                                    'step 3'
                                    if (result.bool) {
                                        event.target2 = result.targets[0];
                                        event.target1.line(event.target2);
                                        event.target1.chooseToCompare(event.target2);
                                    }
                                    else event.finish();
                                    'step 4'
                                    if (!result.tie) {
                                        var list = [event.target1, event.target2];
                                        if (!result.bool) list.reverse();
                                        if (list[0].canUse({ name: 'sha', isCard: true }, list[1], false)) list[0].useCard({ name: 'sha', isCard: true }, list[1], false);
                                    }
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        target: function (player, target) {
                                            var num1 = game.countPlayer(function (current) {
                                                return get.attitude(player, current) > 0;
                                            }), num2 = game.countPlayer(function (current) {
                                                return get.attitude(player, current) < 0;
                                            });
                                            if (target.hasSkillTag('nogain')) return 0;
                                            if (num1 > 0 && num2 > 0) return 1;
                                            if (num1 == 0 && num2 > 1) return -1;
                                            return 0;
                                        },
                                    },
                                },
                            },

                            // 刘永
                            hpp_fengxiang: {
                                getMax: function () {
                                    var max = 0, max2 = [], players = game.filterPlayer();
                                    for (var current of players) {
                                        var num = current.countCards('h', function (card) {
                                            return card.hasGaintag('fengxiang_tag');
                                        });
                                        if (num > max) {
                                            max = num;
                                            max2 = [current];
                                        }
                                        else if (num == max) max2.push(current);
                                    }
                                    return max2;
                                },
                                audio: 'fengxiang',
                                trigger: { player: 'damageEnd' },
                                forced: true,
                                content: function () {
                                    player.draw();
                                    var targets = lib.skill.hpp_fengxiang.getMax();
                                    if (targets) {
                                        for (var target of targets) target.recover();
                                    }
                                },
                            },

                            // 刘璋
                            hpp_yinlang: {
                                global: 'hpp_yinlang_use',
                                audio: 'yinlang',
                                trigger: { player: 'phaseUseEnd' },
                                direct: true,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current.group && current.group != 'unknown';
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    var list = [];
                                    game.countPlayer(function (current) {
                                        if (current.group && current.group != 'unknown') list.add(current.group);
                                    });
                                    list.sort(function (a, b) {
                                        return lib.group.indexOf(a) - lib.group.indexOf(b);
                                    });
                                    list.push('cancel2');
                                    player.chooseControl(list).set('prompt', get.prompt2('hpp_yinlang')).set('ai', function () {
                                        return _status.event.choice;
                                    }).set('choice', function () {
                                        var getn = function (group) {
                                            return game.countPlayer(function (current) {
                                                if (current.group != group || current == player) return false;
                                                if (get.attitude(current, player) > 0) return -0.5;
                                                if (!current.inRange(player)) return 1;
                                                return 0.6;
                                            });
                                        }
                                        list.sort(function (a, b) {
                                            return getn(b) - getn(a);
                                        });
                                        return list[0];
                                    }());
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_yinlang', game.filterPlayer(function (current) {
                                            return current.group == result.control;
                                        }));
                                        game.log(player, '选择了', '#y' + get.translation(result.control + 2));
                                        for (var i of game.players) {
                                            if (i == player || i.group == result.control) i.addMark('hpp_yinlang', 1);
                                        }
                                    }
                                },
                                marktext: '生', intro: { name: '引狼', name2: '生', content: 'mark' },
                                subSkill: {
                                    use: {
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if (game.hasPlayer(function (current) {
                                                    return current.hasSkill('hpp_yinlang');
                                                }) && player.hasMark('hpp_yinlang') && !target.hasMark('hpp_yinlang')) return false;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_xiusheng: {
                                audio: 'xiusheng',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current.hasMark('hpp_yinlang');
                                    });
                                },
                                forced: true,
                                logTarget: function (event, player) {
                                    return game.filterPlayer(function (current) {
                                        return current.hasMark('hpp_yinlang');
                                    });
                                },
                                content: function () {
                                    var num = 0;
                                    for (var i of game.players) {
                                        if (i.hasMark('hpp_yinlang')) {
                                            var numx = i.countMark('hpp_yinlang');
                                            i.removeMark('hpp_yinlang', numx);
                                            num += numx;
                                        }
                                    }
                                    player.draw(num);
                                },
                                ai: { combo: 'hpp_yinlang' },
                            },
                            hpp_huaibi: {
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (player.storage.hpp_yinlang && player.hasZhuSkill('hpp_huaibi')) return num + game.countPlayer(function (current) {
                                            return current.countMark('hpp_yinlang');
                                        });
                                    },
                                },
                                group: 'hpp_huaibi_discard',
                                audio: 'huaibi',
                                unique: true,
                                trigger: { player: 'damageEnd' },
                                filter: function (event, player) {
                                    return player.hasZhuSkill('hpp_huaibi') && event.source && event.source.hasMark('hpp_yinlang');
                                },
                                forced: true,
                                zhuSkill: true,
                                content: function () {
                                    player.draw();
                                },
                                ai: { combo: 'hpp_yinlang' },
                                subSkill: {
                                    discard: {
                                        audio: 'huaibi',
                                        trigger: { player: 'phaseDiscardBefore' },
                                        filter: function (event, player) {
                                            return player.hasZhuSkill('hpp_huaibi') && game.hasPlayer(function (current) {
                                                return current.hasMark('hpp_yinlang');
                                            }) && player.countCards('h') > player.hp;
                                        },
                                        forced: true,
                                        firstDo: true,
                                        content: function () { },
                                    },
                                },
                            },

                            //李严
                            hpp_duliang: {
                                audio: 'duliang',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return lib.skill.hpp_duliang.filterTarget(null, player, target);
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    return player != target && target.countCards('h');
                                },
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    player.gainPlayerCard(target, 'h', true);
                                    'step 1'
                                    var name = get.translation(target);
                                    player.chooseControl(function () {
                                        return '选项二';
                                    }).set('prompt', '督粮：请选择一项').set('choiceList', [
                                        '你观看牌堆顶的两张牌，然后令' + name + '获得其中的基本牌和装备牌',
                                        '令' + name + '于下个摸牌阶段额外摸一张牌，然后其交给你一张牌'
                                    ]);
                                    'step 2'
                                    if (result.control == '选项一') {
                                        var cards = get.cards(2);
                                        event.cards = cards;
                                        target.viewCards('督粮', cards);
                                        game.cardsGotoOrdering(cards);
                                        event.cardx = cards.filter(function (card) {
                                            var type = get.type(card);
                                            return type == 'basic' || type == 'equip';
                                        });
                                        if (!event.cardx.length) event.goto(4);
                                    }
                                    else {
                                        target.addTempSkill('hpp_duliang2', { player: 'phaseDrawAfter' });
                                        target.addMark('hpp_duliang2', 1, false);
                                        player.addSkill('hpp_duliang3');
                                        if (!player.storage.hpp_duliang3[target.playerid]) player.storage.hpp_duliang3[target.playerid] = 0;
                                        player.storage.hpp_duliang3[target.playerid]++;
                                        event.finish();
                                    }
                                    'step 3'
                                    var cardx = event.cardx;
                                    target.gain(cardx, 'draw');
                                    game.log(target, '获得了' + get.cnNumber(cardx.length) + '张牌');
                                    cards.removeArray(cardx);
                                    cards.reverse();
                                    'step 4'
                                    for (var i = 0; i < cards.length; i++) {
                                        ui.cardPile.insertBefore(cards[i], ui.cardPile.firstChild);
                                    }
                                    game.updateRoundNumber();
                                },
                                ai: {
                                    order: 4,
                                    result: {
                                        target: -1,
                                        player: 0.1
                                    },
                                },
                            },
                            hpp_duliang2: {
                                charlotte: true,
                                onremove: true,
                                marktext: '粮',
                                intro: {
                                    content: function (storage, player) {
                                        var str = '<li>下回合的摸牌阶段额外摸' + storage + '张牌<br><li>摸牌阶段结束时须交给：';
                                        for (var target of game.filterPlayer2()) {
                                            if (target.storage.hpp_duliang3 && target.storage.hpp_duliang3[player.playerid]) str += '<br>→' + get.translation(target) + '：' + get.translation(target.storage.hpp_duliang3[player.playerid]) + '张牌';
                                        }
                                        return str;
                                    },
                                },
                                trigger: { player: 'phaseDrawBegin' },
                                forced: true,
                                content: function () {
                                    trigger.num += player.countMark('hpp_duliang2');
                                },
                            },
                            hpp_duliang3: {
                                init: function (player) {
                                    if (!player.storage.hpp_duliang3) player.storage.hpp_duliang3 = {};
                                },
                                charlotte: true,
                                trigger: { global: 'phaseDrawEnd' },
                                filter: function (event, player) {
                                    if (!event.player.countCards('he')) return false;
                                    return player.storage.hpp_duliang3[event.player.playerid];
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var num = player.storage.hpp_duliang3[trigger.player.playerid];
                                    delete player.storage.hpp_duliang3[trigger.player.playerid];
                                    var cards = trigger.player.getCards('he');
                                    trigger.player.storage.duliangs = trigger.cards;
                                    if (!cards.length) {
                                        event.finish();
                                    }
                                    else if (cards.length <= num) {
                                        event._result = { bool: true, cards: cards };
                                    }
                                    else {
                                        trigger.player.chooseCard('he', '督粮：将' + get.cnNumber(num) + '张牌交给' + get.translation(player), num, function (card, player) {
                                            return player.storage.duliangs.contains(card);
                                        });
                                    }
                                    'step 1'
                                    if (result.bool) player.gain(result.cards, trigger.player, 'giveAuto');
                                },
                            },

                            // 陆绩
                            hpp_zhenglun: {
                                audio: 'nzry_zhenglun',
                                trigger: { player: 'phaseDrawBegin2' },
                                filter: function (event, player) {
                                    if (event.numFixed) return false;
                                    return !player.hasMark('nzry_huaiju');
                                },
                                content: function () {
                                    trigger.num--;
                                    player.addMark('nzry_huaiju', 1);
                                },
                                ai: { combo: 'nzry_huaiju' },
                            },

                            // 陆抗
                            hpp_jueyan: {
                                derivation: 'hpp_jizhi',
                                audio: 'drlt_jueyan',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    for (var i = 1; i < 4; i++) {
                                        if (!player.isDisabled('equip' + i)) return true;
                                    }
                                    return false;
                                },
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    var list = [];
                                    for (var i = 1; i < 4; i++) {
                                        if (!player.isDisabled('equip' + i)) {
                                            var subtype = ('equip' + ((i == 3 || i == 4) ? 6 : i));
                                            if (!list.contains(subtype)) list.push(subtype);
                                        }
                                    }
                                    player.chooseControl(list).set('ai', function () {
                                        var player = _status.event.player;
                                        if (list.contains('equip2')) return 'equip2';
                                        if (list.contains('equip1') && (player.countCards('h', function (card) {
                                            return get.name(card, player) == 'sha' && player.hasUseTarget(card);
                                        }) - player.getCardUsable('sha')) > 1) return 'equip1';
                                        if (list.contains('equip6') && player.countCards('h', function (card) {
                                            return get.type2(card, player) == 'trick' && player.hasUseTarget(card, false);
                                        }) > 1) return 'equip6';
                                    }).set('prompt', '决堰：请选择你要废除的装备栏');
                                    'step 1'
                                    if (result.control == 'equip6') {
                                        player.disableEquip('equip3');
                                        player.disableEquip('equip4');
                                        player.recover();
                                        player.addTempSkill('hpp_jizhi');
                                    }
                                    else player.disableEquip(result.control);
                                    if (result.control == 'equip2') player.draw(3);
                                    var list1 = ['equip1', 'equip2', 'equip6'], list2 = ['drlt_jueyan1', 'drlt_jueyan3', 'drlt_jueyan2'];
                                    player.addTempSkill(list2[list1.indexOf(result.control)]);
                                },
                                ai: {
                                    order: 13,
                                    result: {
                                        player: function (player) {
                                            if (!player.isDisabled('equip2')) return 1;
                                            if (!player.isDisabled('equip1') && (player.countCards('h', function (card) {
                                                return get.name(card, player) == 'sha' && player.hasValueTarget(card);
                                            }) - player.getCardUsable('sha')) > 1) return 1;
                                            if ((!player.isDisabled('equip3') || !player.isDisabled('equip4')) && player.countCards('h', function (card) {
                                                return get.type2(card, player) == 'trick' && player.hasUseTarget(card, false);
                                            }) > 1) return 1;
                                            return -1;
                                        },
                                    },
                                },
                            },
                            hpp_jizhi_lukang: { audio: 2 },
                            hpp_huairou: {
                                audio: 'drlt_huairou',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    var list = [], bool = false;
                                    for (var i = 1; i <= 5; i++) {
                                        if (!player.hasEnabledSlot(i)) list.push('equip' + i);
                                    }
                                    for (var name of lib.inpile) {
                                        if (get.type(name) != 'basic' && get.type2(name) != 'trick') continue;
                                        var storage = player.getStorage('hpp_huairou_used');
                                        if (!storage.includes(name)) {
                                            bool = true;
                                            break;
                                        }
                                    }
                                    return bool && player.countCards('he', function (card) {
                                        return list.includes(get.subtype(card));
                                    });
                                },
                                filterCard: function (card, player) {
                                    var list = [];
                                    for (var i = 1; i <= 5; i++) {
                                        if (!player.hasEnabledSlot(i)) list.push('equip' + i);
                                    }
                                    return get.type(card) == 'equip' && list.includes(get.subtype(card));
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (player.isDisabled(get.subtype(card))) return 5;
                                    return 6 - get.value(card);
                                },
                                position: 'he',
                                discard: false,
                                visible: true,
                                loseTo: 'discardPile',
                                delay: 0.5,
                                prepare: function (cards, player) {
                                    player.addTempSkill('hpp_huairou_used');
                                    player.$throw(cards, 1000);
                                    game.log(player, '将', cards, '置入了弃牌堆');
                                },
                                content: function () {
                                    'step 0'
                                    var list = [];
                                    for (var name of lib.inpile) {
                                        if (get.type(name) != 'basic' && get.type2(name) != 'trick') continue;
                                        var storage = player.getStorage('hpp_huairou_used');
                                        if (!storage.includes(name)) {
                                            list.push([get.translation(get.type2({ name: name })), '', name]);
                                            if (name == 'sha') {
                                                for (var nature of lib.inpile_nature) list.push(['基本', '', name, nature]);
                                            }
                                        }
                                    }
                                    player.chooseButton(['怀柔：选择获得一种基本牌或锦囊牌', [list, 'vcard']], true);
                                    'step 1'
                                    player.markAuto('hpp_huairou_used', [result.links[0][2]]);
                                    var card = get.cardPile(function (card) {
                                        return card.name == result.links[0][2] && (get.nature(card) == result.links[0][3] || !result.links[0][3]);
                                    });
                                    if (card) player.gain(card, 'gain2');
                                    else {
                                        player.chat('杯具');
                                        game.log('但是牌堆中已经没有', '#y' + get.translation(result.links[0][2]), '了！')
                                    }
                                },
                                ai: {
                                    order: 10,
                                    result: { player: 1 },
                                },
                                subSkill: { used: { charlotte: true, onremove: true } },
                            },

                            // 鲁肃
                            hpp_haoshi: {
                                audio: 'olhaoshi',
                                trigger: { player: 'phaseDrawBegin2' },
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                preHidden: true,
                                check: function (event, player) {
                                    if (player.countCards('h') <= 1) return true;
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.isMinHandcard() && get.attitude(player, current) > 0;
                                    });
                                },
                                content: function () {
                                    trigger.num += 2;
                                    player.addSkill('hpp_haoshi2');
                                },
                                ai: {
                                    noh: true,
                                    skillTagFilter: function (player, tag) {
                                        if (tag == 'noh') {
                                            if (player.countCards('h') != 2) return false;
                                        }
                                    },
                                },
                            },
                            hpp_haoshi2: {
                                trigger: { player: 'phaseDrawEnd' },
                                forced: true,
                                popup: false,
                                audio: false,
                                content: function () {
                                    'step 0'
                                    player.removeSkill('hpp_haoshi2');
                                    if (player.countCards('h') <= 5) {
                                        event.finish();
                                        return;
                                    }
                                    else player.chooseCardTarget({
                                        selectCard: Math.floor(player.countCards('h') / 2),
                                        filterTarget: function (card, player, target) {
                                            return target.isMinHandcard();
                                        },
                                        selectTarget: [0, 1],
                                        prompt: '好施：将一半的手牌交给场上手牌数最少的一名角色或弃置一半的手牌',
                                        forced: true,
                                        ai2: function (target) {
                                            return get.attitude(_status.event.player, target);
                                        }
                                    });
                                    'step 1'
                                    if (result.targets && result.targets[0]) result.targets[0].gain(result.cards, player, 'giveAuto');
                                    else player.discard(result.cards);
                                },
                            },
                            hpp_dimeng: {
                                audio: 'oldimeng',
                                enable: 'phaseUse',
                                usable: 1,
                                position: 'he',
                                filterCard: function () {
                                    var targets = ui.selected.targets;
                                    if (targets.length == 2) {
                                        if (Math.abs(targets[0].countCards('h') - targets[1].countCards('h')) <= ui.selected.cards.length) return false;
                                    }
                                    return true;
                                },
                                selectCard: [0, Infinity],
                                selectTarget: 2,
                                complexCard: true,
                                filterTarget: function (card, player, target) {
                                    if (player == target) return false;
                                    return true;
                                },
                                filterOk: function () {
                                    var targets = ui.selected.targets;
                                    if (targets.length != 2) return false;
                                    return (Math.abs(targets[0].countCards('h') - targets[1].countCards('h')) == ui.selected.cards.length);
                                },
                                multitarget: true,
                                multiline: true,
                                content: function () {
                                    targets[0].swapHandcards(targets[1]);
                                },
                                check: function (card) {
                                    var list = [], player = _status.event.player;
                                    var num = player.countCards('he');
                                    var count;
                                    var players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && get.attitude(player, players[i]) > 3) list.push(players[i]);
                                    }
                                    list.sort(function (a, b) {
                                        return a.countCards('h') - b.countCards('h');
                                    });
                                    if (list.length == 0) return -1;
                                    var from = list[0];
                                    list.length = 0;

                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i] != player && get.attitude(player, players[i]) < 1) list.push(players[i]);
                                    }
                                    if (list.length == 0) return -1;
                                    list.sort(function (a, b) {
                                        return b.countCards('h') - a.countCards('h');
                                    });
                                    if (from.countCards('h') >= list[0].countCards('h')) return -1;
                                    for (var i = 0; i < list.length && from.countCards('h') < list[i].countCards('h'); i++) {
                                        if (list[i].countCards('h') - from.countCards('h') <= num) {
                                            count = list[i].countCards('h') - from.countCards('h'); break;
                                        }
                                    }
                                    if (count < 2 && from.countCards('h') >= 2) return -1;
                                    if (ui.selected.cards.length < count) return 11 - get.value(card);
                                    return -1;
                                },
                                ai: {
                                    order: 6,
                                    threaten: 2.8,
                                    expose: 0.9,
                                    result: {
                                        target: function (player, target) {
                                            var list = [];
                                            var num = player.countCards('he');
                                            var players = game.filterPlayer();
                                            if (ui.selected.targets.length == 0) {
                                                for (var i = 0; i < players.length; i++) {
                                                    if (players[i] != player && get.attitude(player, players[i]) > 3) list.push(players[i]);
                                                }
                                                list.sort(function (a, b) {
                                                    return a.countCards('h') - b.countCards('h');
                                                });
                                                if (target == list[0]) return get.attitude(player, target);
                                                return -get.attitude(player, target);
                                            }
                                            else {
                                                var from = ui.selected.targets[0];
                                                for (var i = 0; i < players.length; i++) {
                                                    if (players[i] != player && get.attitude(player, players[i]) < 1) list.push(players[i]);
                                                }
                                                list.sort(function (a, b) {
                                                    return b.countCards('h') - a.countCards('h');
                                                });
                                                if (from.countCards('h') >= list[0].countCards('h')) return -get.attitude(player, target);
                                                for (var i = 0; i < list.length && from.countCards('h') < list[i].countCards('h'); i++) {
                                                    if (list[i].countCards('h') - from.countCards('h') <= num) {
                                                        var count = list[i].countCards('h') - from.countCards('h');
                                                        if (count < 2 && from.countCards('h') >= 2) return -get.attitude(player, target);
                                                        if (target == list[i]) return get.attitude(player, target);
                                                        return -get.attitude(player, target);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },

                            // 陆逊
                            hpp_qianxun: {
                                audio: 'reqianxun',
                                trigger: { target: 'useCardToBegin' },
                                filter: function (event, player) {
                                    if (event.targets && event.targets.length > 1) return false;
                                    return event.card && (get.type(event.card) == 'trick' || get.type(event.card) == 'delay');
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    player.chooseCardTarget({
                                        prompt: '谦逊：是否将一张手牌交给一名其他角色？',
                                        filterCard: true,
                                        filterTarget: lib.filter.notMe,
                                        ai1: function (card) {
                                            if (card.name == 'du') return 10;
                                            var player = _status.event.player;
                                            if (!game.hasPlayer(function (current) {
                                                return get.attitude(player, current) > 0 && !current.hasSkillTag('nogain');
                                            })) return 0;
                                            return 1 / Math.max(0.1, get.value(card));
                                        },
                                        ai2: function (target) {
                                            var player = _status.event.player, att = get.attitude(player, target);
                                            if (ui.selected.cards[0].name == 'du') return -att;
                                            if (target.hasSkillTag('nogain')) att /= 6;
                                            return att;
                                        },
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.line(result.targets[0]);
                                        result.targets[0].gain(result.cards, player, 'giveAuto');
                                    }
                                },
                            },

                            // 陆郁生
                            hpp_zhente: {
                                audio: 'zhente',
                                trigger: { target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    var color = get.color(event.card);
                                    if (player == event.player || event.player.isDead() || color == 'none') return false;
                                    var type = get.type(event.card);
                                    return type == 'basic' || type == 'trick';
                                },
                                check: function (event, player) {
                                    return !event.excluded.contains(player) && get.effect(player, event.card, event.player, player) < 0;
                                },
                                logTarget: 'player',
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    trigger.player.chooseControl().set('choiceList', [
                                        '本回合内不能再使用' + get.translation(get.color(trigger.card)) + '牌',
                                        '令' + get.translation(trigger.card) + '对' + get.translation(player) + '无效',
                                    ]).set('prompt', get.translation(player) + '发动了【贞特】，请选择一项').set('ai', function () {
                                        var player = _status.event.player;
                                        var target = _status.event.getParent().player;
                                        var card = _status.event.getTrigger().card, color = get.color(card);
                                        if (get.effect(target, card, player, player) <= 0) return 1;
                                        var hs = player.countCards('h', function (card) {
                                            return get.color(card, player) == color && player.hasValueTarget(card, null, true);
                                        });
                                        if (!hs.length) return 0;
                                        if (hs > 1) return 1;
                                        return Math.random() > 0.5 ? 0 : 1;
                                    });
                                    'step 1'
                                    if (result.index == 0) {
                                        trigger.player.addTempSkill('zhente2');
                                        trigger.player.storage.zhente2.add(get.color(trigger.card));
                                        trigger.player.markSkill('zhente2');
                                    }
                                    else trigger.excluded.add(player);
                                },
                            },
                            hpp_zhiwei: {
                                audio: 'zhiwei',
                                trigger: { global: 'phaseBefore', player: ['enterGame', 'phaseZhunbeiBegin'] },
                                filter: function (event, player, name) {
                                    if (game.countPlayer() < 2) return false;
                                    return (name != 'phaseBefore' || game.phaseNumber == 0) && !player.hasSkill('hpp_zhiwei2');
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('请选择【至微】的目标', '选择一名其他角色。该角色造成伤害后，你摸一张牌，该角色受到伤害后，你可以交给其一张牌。你弃牌阶段弃置的牌可以交给该角色。', true, lib.filter.notMe).set('ai', function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (att > 0) return 1 + att;
                                        return Math.random();
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line('hpp_zhiwei', target);
                                        player.storage.hpp_zhiwei2 = target;
                                        player.addSkill('hpp_zhiwei2');
                                    }
                                },
                            },
                            hpp_zhiwei2: {
                                group: ['hpp_zhiwei2_draw', 'hpp_zhiwei2_discard', 'hpp_zhiwei2_gain', 'hpp_zhiwei2_clear'],
                                charlotte: true,
                                onremove: true,
                                mark: 'character',
                                intro: { content: '$造成伤害后你摸一张牌；$受到伤害后你可以交给其一张牌；你于弃牌阶段弃置牌后可以交给$' },
                                subSkill: {
                                    draw: {
                                        audio: 'zhiwei',
                                        trigger: { global: 'damageSource' },
                                        filter: function (event, player) {
                                            return event.source == player.storage.hpp_zhiwei2;
                                        },
                                        forced: true,
                                        logTarget: 'source',
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                    discard: {
                                        trigger: { global: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.player == player.storage.hpp_zhiwei2 && player.countCards('h');
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            var target = player.storage.hpp_zhiwei2;
                                            event.target = target;
                                            player.chooseCard('h', '至微：是否将一张手牌交给' + get.translation(target) + '？').set('ai', function (card) {
                                                if (_status.event.goon) return 5 - get.value(card);
                                                return -get.value(card);
                                            }).set('goon', get.attitude(player, target) > 0);
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_zhiwei', target);
                                                target.gain(result.cards, player, 'giveAuto');
                                            }
                                        },
                                    },
                                    gain: {
                                        audio: 'zhiwei',
                                        trigger: { player: 'loseAfter', global: 'loseAsyncAfter' },
                                        filter: function (event, player) {
                                            if (event.type != 'discard' || event.getlx === false || event.getParent('phaseDiscard').player != player || !player.storage.hpp_zhiwei2 || !player.storage.hpp_zhiwei2.isIn()) return false;
                                            var evt = event.getl(player);
                                            return evt && evt.cards2.filterInD('d').length > 0;
                                        },
                                        logTarget: function (event, player) {
                                            return player.storage.hpp_zhiwei2;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, player.storage.hpp_zhiwei2) > 0;
                                        },
                                        prompt: (event, player) => '是否对' + get.translation(player.storage.hpp_zhiwei2) + '发动【至微】？',
                                        prompt2: (event, player) => '将' + get.translation(event.getl(player).cards2.filterInD('d')) + '交给' + get.translation(player.storage.hpp_zhiwei2),
                                        content: function () {
                                            if (trigger.delay === false) game.delay();
                                            player.storage.hpp_zhiwei2.gain(trigger.getl(player).cards2.filterInD('d'), 'gain2');
                                        },
                                    },
                                    clear: {
                                        audio: 'zhiwei',
                                        trigger: { global: 'die' },
                                        filter: function (event, player) {
                                            return event.player == player.storage.hpp_zhiwei2;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.removeSkill('hpp_zhiwei2');
                                        },
                                    },
                                },
                            },

                            // 吕凯
                            hpp_tunan: {
                                audio: 'xinfu_tunan',
                                inherit: 'xinfu_tunan',
                                filterTarget: true,
                                selectTarget: [1, 2],
                            },
                            hpp_bijing: {
                                audio: 'xinfu_bijing',
                            },

                            // 吕蒙
                            hpp_keji: {
                                audio: 'keji',
                                trigger: { player: 'phaseDiscardBefore' },
                                frequent: true,
                                filter: function (event, player) {
                                    if (player.getHistory('skipped').contains('phaseUse')) return true;
                                    var history = player.getHistory('useCard').concat(player.getHistory('respond'));
                                    for (var i = 0; i < history.length; i++) {
                                        if (history[i].card.name == 'sha' && history[i].isPhaseUsing()) return false;
                                    }
                                    return true;
                                },
                                content: function () {
                                    trigger.cancel();
                                    player.draw();
                                },
                            },
                            hpp_qinxue: {
                                skillAnimation: true,
                                animationColor: 'wood',
                                audio: 'qinxue',
                                unique: true,
                                juexingji: true,
                                derivation: 'hpp_gongxin',
                                trigger: { player: 'phaseJieshuBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return player.countCards('h') >= player.hp * 3;
                                },
                                content: function () {
                                    var num = player.maxHp - player.hp;
                                    player.awakenSkill('hpp_qinxue');
                                    if (num > 0) player.loseMaxHp(num);
                                    player.removeSkill('hpp_keji');
                                    player.addSkillLog('hpp_gongxin');
                                },
                            },

                            // 马超
                            hpp_yuma: {
                                group: 'mashu',
                                trigger: {
                                    player: 'loseAfter',
                                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                },
                                filter: function (event, player) {
                                    var evt = event.getl(player);
                                    if (!evt || evt.player != player || !evt.es || !evt.es.length) return false;
                                    for (var card of evt.es) {
                                        if (get.type(card) == 'equip' && ['equip3', 'equip4', 'equip6'].contains(get.subtype(card))) return true;
                                    }
                                    return false;
                                },
                                forced: true,
                                content: function () {
                                    var list = [], evt = trigger.getl(player);
                                    for (var card of evt.es) {
                                        if (get.type(card) == 'equip' && ['equip3', 'equip4', 'equip6'].contains(get.subtype(card))) list.push(card);
                                    }
                                    player.draw(2 * list.length);
                                },
                            },
                            hpp_tieji: {
                                audio: 'retieji',
                                shaRelated: true,
                                trigger: { player: 'useCardToPlayered' },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 0;
                                },
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                logTarget: 'target',
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    trigger.target.addTempSkill('fengyin');
                                    player.judge(function (card) {
                                        if (get.color(card) == 'red') return 2;
                                        return -1;
                                    }).judge2 = function (result) {
                                        return result.bool;
                                    };
                                    'step 1'
                                    if (result.bool) trigger.getParent().directHit.add(trigger.target);
                                    else player.draw(2);
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (get.attitude(player, arg.target) > 0 || arg.card.name != 'sha' || !ui.cardPile.firstChild || get.color(ui.cardPile.firstChild, player) != 'red') return false;
                                    },
                                },
                            },

                            // 马岱
                            hpp_qianxi: {
                                audio: 'qianxi',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    player.draw(2).gaintag = ['hpp_qianxi'];
                                    player.chooseToDiscard('hes', true, function (card, player) {
                                        return card.hasGaintag('hpp_qianxi');
                                    });
                                    'step 1'
                                    player.removeGaintag('hpp_qianxi');
                                    if (!result.bool) {
                                        event.finish();
                                        return;
                                    }
                                    event.color = get.color(result.cards[0]);
                                    player.chooseTarget(function (card, player, target) {
                                        return player != target && get.distance(player, target) <= 1;
                                    }, true).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'green');
                                        game.log(player, '选择了', target);
                                        target.storage.hpp_qianxi2 = event.color;
                                        target.addTempSkill('hpp_qianxi2');
                                        //game.addVideo('storage',target,['hpp_qianxi2',event.color]);
                                    }
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (!arg.target.hasSkill('hpp_qianxi2')) return false;
                                        if (arg.card.name == 'sha') return arg.target.storage.hpp_qianxi2 == 'red' && (!arg.target.getEquip('bagua') || player.hasSkillTag('unequip', false, {
                                            name: arg.card ? arg.card.name : null,
                                            target: arg.target,
                                            card: arg.card
                                        }) || player.hasSkillTag('unequip_ai', false, {
                                            name: arg.card ? arg.card.name : null,
                                            target: arg.target,
                                            card: arg.card
                                        }));
                                        return arg.target.storage.hpp_qianxi2 == 'black';
                                    }
                                },
                            },
                            hpp_qianxi2: {
                                forced: true,
                                mark: true,
                                audio: false,
                                content: function () {
                                    player.removeSkill('hpp_qianxi2');
                                    delete player.storage.hpp_qianxi2;
                                },
                                mod: {
                                    cardEnabled2: function (card, player) {
                                        if (get.color(card) == player.storage.hpp_qianxi2 && get.position(card) == 'h') return false;
                                    },
                                },
                                intro: {
                                    content: function (color) {
                                        return '不能使用或打出' + get.translation(color) + '手牌';
                                    },
                                },
                            },

                            // 马谡
                            hpp_sanyao: {
                                audio: 'sanyao',
                                enable: 'phaseUse',
                                usable: 1,
                                selectCard: function () {
                                    var player = _status.event.player;
                                    return [Math.max(1, ui.selected.targets.length), Math.min(4, game.players.length - 1)];
                                },
                                selectTarget: function () {
                                    return ui.selected.cards.length;
                                },
                                filterTarget: lib.filter.notMe,
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (game.countPlayer(function (target) {
                                        return target != player && get.effect(target, 'sanyao', player, player) > 0;
                                    }) <= ui.selected.cards.length) return 0;
                                    return 7 - get.value(card);
                                },
                                position: 'he',
                                filterCard: true,
                                content: function () {
                                    target.damage('nocard');
                                },
                                ai: {
                                    result: {
                                        target: function (player, target) {
                                            var disbool = false;
                                            if (player.hasSkill('rezhiman')) {
                                                if (target.countCards('j') && get.attitude(player, target) > 0) {
                                                    return 1;
                                                }
                                                if (target.countCards('he', function (card) {
                                                    return card.name == 'tengjia' || get.value(card) > 0;
                                                })) {
                                                    disbool = true;
                                                }
                                            }
                                            var damage = get.damageEffect(target, player);
                                            if (disbool && get.attitude(player, target) < 0) return Math.min(-1, damage);
                                            return damage;
                                        },
                                    },
                                    order: 7,
                                },
                            },

                            // 马云禄
                            hpp_fengpo: {
                                shaRelated: true,
                                audio: 'fengpo',
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (!['sha', 'juedou'].contains(event.card.name)) return false;
                                    if (player != _status.currentPhase) return false;
                                    return player.getHistory('useCard', function (evt) {
                                        return ['sha', 'juedou'].contains(evt.card.name);
                                    }).indexOf(event.getParent()) == 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseControl('摸牌', '加伤', 'cancel2').set('prompt', get.prompt2('hpp_fengpo'));
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_fengpo', trigger.target);
                                        var num = Math.min(4, trigger.target.countCards('h', { color: 'red' }));
                                        if (result.control == '摸牌') player.draw(num);
                                        else {
                                            var trigger2 = trigger.getParent();
                                            if (typeof trigger2.baseDamage != 'number') trigger2.baseDamage = 1;
                                            trigger2.baseDamage += num;
                                        }
                                    }
                                },
                            },

                            // 孟获
                            hpp_huoshou: {
                                group: ['huoshou1', 'hpp_huoshou2'],
                                audio: 'huoshou1',
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (card.name == 'nanman') return 0;
                                        },
                                    },
                                },
                            },
                            hpp_huoshou2: {
                                audio: 'huoshou1',
                                trigger: { global: 'useCard' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'nanman' && event.player != player;
                                },
                                forced: true,
                                content: function () {
                                    trigger.customArgs.default.customSource = player;
                                    player.draw();
                                },
                            },

                            // 糜夫人
                            hpp_guixiu: {
                                audio: 'guixiu',
                                trigger: { player: ['phaseJieshuBegin', 'dying'] },
                                filter: function (event, player) {
                                    return event.name == 'phaseJieshu' || player.storage.hpp_guixiu;
                                },
                                forced: true,
                                usable: 1,
                                content: function () {
                                    player[player.getHp() % 2 == 0 ? 'recover' : 'draw']();
                                },
                            },
                            hpp_cunsi: {
                                unique: true,
                                derivation: ['hpp_yongjue', 'hpp_guixiux'],
                                audio: 'cunsi',
                                enable: 'phaseUse',
                                mark: true,
                                limited: true,
                                filter: function (event, player) {
                                    return player.hp > 0;
                                },
                                filterTarget: lib.filter.notMe,
                                skillAnimation: true,
                                animationColor: 'orange',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_cunsi');
                                    target.addSkillLog('hpp_yongjue');
                                    'step 1'
                                    var num = player.hp;
                                    player.loseHp(num);
                                    target.draw(num + 1);
                                    'step 2'
                                    player.storage.hpp_guixiu = true;
                                },
                                ai: {
                                    order: 4,
                                    expose: 0.5,
                                    result: {
                                        target: function (player, target) {
                                            if (!player.countCards('hs', { name: ['tao', 'jiu'] })) return 0;
                                            return lib.skill.cunsi.ai.result.target(player, target);
                                        },
                                    },
                                },
                            },
                            hpp_yongjue: {
                                audio: 'yongjue',
                                trigger: { global: 'useCardAfter', player: 'damageBegin3' },
                                filter: function (event, player) {
                                    if (!event.card || event.card.name != 'sha') return false;
                                    if (event.name == 'damage') return typeof get.number(event.card) == 'number' && ((_status.connectMode && player.countCards('he')) || player.getDiscardableCards(player, 'he').some(card => {
                                        if (typeof get.number(card, player) != 'number') return false;
                                        return get.number(card, player) >= get.number(event.card);
                                    }));
                                    if (!event.cards || !event.cards.filterInD().length || event.player == player) return false;
                                    var evt = event.getParent('phaseUse');
                                    return evt && evt.player == event.player && event.player.getHistory('useCard', function (evt2) {
                                        return evt2.card.name == 'sha' && evt2.getParent('phaseUse') == evt;
                                    }).indexOf(event) == 0;
                                },
                                direct: true,
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    if (trigger.name == 'useCard') player.chooseBool(get.prompt('hpp_yongjue'), '获得' + get.translation(trigger.cards.filterInD())).set('frequentSkill', 'hpp_yongjue');
                                    else {
                                        var num = get.number(trigger.card);
                                        player.chooseToDiscard(get.prompt('hpp_yongjue'), '弃置一张点数大于等于' + num + '的牌，防止此伤害', 'he', function (card, player) {
                                            return get.number(card, player) >= _status.event.num;
                                        }).set('ai', function (card) {
                                            var player = _status.event.player;
                                            return player.hp * player.hp - get.value(card);
                                        }).set('num', num).logSkill = 'hpp_yongjue';
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        if (trigger.name == 'useCard') {
                                            player.logSkill('hpp_yongjue');
                                            player.gain(trigger.cards.filterInD(), 'gain2');
                                        }
                                        else trigger.cancel();
                                    }
                                },
                            },

                            // 糜竺
                            hpp_ziyuan: {
                                audio: 'ziyuan',
                                enable: 'phaseUse',
                                filterCard: true,
                                selectCard: [1, Infinity],
                                filterTarget: lib.filter.notMe,
                                check: function (card) {
                                    return lib.skill.rerende.check(card);
                                },
                                discard: false,
                                lose: false,
                                delay: false,
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    player.give(cards, target);
                                    'step 1'
                                    var num = cards.reduce(function (num, card) {
                                        return num + (get.number(card, player) || 0);
                                    }, 0);
                                    if (num >= 13) target.recover();
                                    if (num <= 13) player.draw();
                                },
                                ai: {
                                    order: 7,
                                    result: {
                                        target: function (player, target) {
                                            return lib.skill.rerende.ai.result.target(player, target);
                                        },
                                    },
                                    effect: {
                                        target: function (card, player, target) {
                                            return lib.skill.rerende.ai.effect.target(card, player, target);
                                        },
                                    },
                                },
                            },
                            hpp_jugu: {
                                audio: 'jugu',
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.maxHp;
                                    },
                                },
                                trigger: { player: 'phaseBegin' },
                                filter: function (event, player) {
                                    if (typeof player.maxHp != 'number' || player.maxHp < 1) return false;
                                    return player.hasUseTarget(get.autoViewAs({ name: 'wugu' }, []));
                                },
                                direct: true,
                                locked: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_jugu'), '视为对至多' + get.cnNumber(player.maxHp) + '名角色使用【五谷丰登】', [1, player.maxHp], function (card, player, target) {
                                        return player.canUse(get.autoViewAs({ name: 'wugu' }, []), target, false);
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, get.autoViewAs({ name: 'wugu' }, []), player, player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.logSkill('hpp_jugu', targets);
                                        player.useCard(get.autoViewAs({ name: 'wugu' }, []), targets, false);
                                    }
                                },
                            },

                            // 潘凤
                            hpp_kuangfu: {
                                audio: 'xinkuangfu',
                                enable: 'phaseUse',
                                usable: 1,
                                delay: false,
                                filterTarget: function (card, player, target) {
                                    if (player == target) return player.countCards('e', function (card) {
                                        return lib.filter.cardDiscardable(card, player);
                                    }) > 0;
                                    return target.countDiscardableCards(player, 'e') > 0;
                                },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current.countCards('e');
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    if (player == target) player.chooseToDiscard('e', true);
                                    else player.discardPlayerCard(target, 'e', true);
                                    'step 1'
                                    player.chooseUseTarget('sha', true, false, 'nodistance');
                                    'step 2'
                                    var bool = game.hasPlayer2(function (current) {
                                        return current.getHistory('damage', function (evt) {
                                            return evt.getParent(4) == event;
                                        }).length > 0
                                    });
                                    if (bool) player.draw(2);
                                },
                                ai: {
                                    order: function () {
                                        return get.order({ name: 'sha' }) - 0.3;
                                    },
                                    result: {
                                        target: function (player, target) {
                                            var att = get.attitude(player, target);
                                            if (att < 0) return -2;
                                            if (target == player) return 1;
                                            return 0;
                                        },
                                    },
                                },
                            },

                            // 庞德
                            hpp_jianchu: {
                                shaRelated: true,
                                audio: 'jianchu',
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && event.target.countDiscardableCards(player, 'he') > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.discardPlayerCard(trigger.target, get.prompt('hpp_jianchu', trigger.target)).set('ai', function (button) {
                                        if (!_status.event.att) return 0;
                                        if (get.position(button.link) == 'e') {
                                            if (get.subtype(button.link) == 'equip2') return 2 * get.value(button.link);
                                            return get.value(button.link);
                                        }
                                        return 1;
                                    }).set('logSkill', ['hpp_jianchu', trigger.target]).set('att', get.attitude(player, trigger.target) <= 0);
                                    'step 1'
                                    if (result.bool && result.links && result.links.length) {
                                        if (get.type(result.links[0], null, result.links[0].original == 'h' ? player : false) != 'basic') {
                                            player.draw();
                                            trigger.getParent().directHit.add(trigger.target);
                                        }
                                        else {
                                            trigger.addCount = false;
                                            if (player.stat[player.stat.length - 1].card.sha > 0) {
                                                player.stat[player.stat.length - 1].card.sha--;
                                            }
                                        }
                                    }
                                },
                                ai: {
                                    unequip_ai: true,
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (tag == 'directHit_ai') return arg.card.name == 'sha' && arg.target.countCards('e', function (card) {
                                            return get.value(card) > 1;
                                        }) > 0;
                                        if (arg && arg.name == 'sha' && arg.target.getEquip(2)) return true;
                                        return false;
                                    }
                                },
                            },

                            // 庞统
                            hpp_lianhuan: {
                                audio: 'xinlianhuan',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_lianhuan'), [1, 2]).set('ai', function (target) {
                                        var player = _status.event.player, eff = get.effect(target, { name: 'tiesuo' }, player, player);
                                        if (target == player) return eff + 5;
                                        return eff;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        result.targets.sortBySeat()
                                        player.logSkill('hpp_lianhuan', result.targets);
                                        for (var target of result.targets) target.link();
                                        if (result.targets.contains(player)) player.draw();
                                    }
                                },
                            },
                            hpp_niepan: {
                                audio: 'olniepan',
                                unique: true,
                                enable: 'chooseToUse',
                                mark: true,
                                skillAnimation: true,
                                animationStr: '涅盘',
                                limited: true,
                                animationColor: 'orange',
                                init: function (player) {
                                    player.storage.hpp_niepan = false;
                                },
                                filter: function (event, player) {
                                    if (player.storage.hpp_niepan) return false;
                                    if (event.type == 'dying') {
                                        if (player != event.dying) return false;
                                        return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_niepan');
                                    player.storage.hpp_niepan = true;
                                    player.discard(player.getCards('hej'));
                                    'step 1'
                                    player.link(false);
                                    'step 2'
                                    player.turnOver(false);
                                    'step 3'
                                    player.draw(3);
                                    'step 4'
                                    if (player.hp < 3) {
                                        player.recover(3 - player.hp);
                                    }
                                },
                                ai: {
                                    order: 1,
                                    skillTagFilter: function (player, arg, target) {
                                        if (player != target || player.storage.hpp_niepan) return false;
                                    },
                                    save: true,
                                    result: {
                                        player: function (player) {
                                            if (player.hp <= 0) return 10;
                                            if (player.hp <= 2 && player.countCards('he') <= 1) return 10;
                                            return 0;
                                        }
                                    },
                                    threaten: function (player, target) {
                                        if (!target.storage.hpp_niepan) return 0.6;
                                    }
                                },
                                intro: {
                                    content: 'limited'
                                }
                            },

                            // 潘浚
                            hpp_guanwei: {
                                audio: 'xinfu_guanwei',
                                trigger: { global: 'phaseUseEnd' },
                                filter: function (event, player) {
                                    var map = {};
                                    event.player.getHistory('useCard', function (evt) {
                                        if (evt.getParent('phaseUse') == event) {
                                            var suit = get.suit(evt.card, event.player);
                                            if (!map[suit]) map[suit] = 1;
                                            else map[suit]++;
                                        }
                                    });
                                    for (var i in map) {
                                        if (map[i] > 1) return true;
                                    }
                                    return false;
                                },
                                direct: true,
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard(get.prompt('hpp_guanwei', trigger.player), '弃置一张牌，令其摸两张牌并进行一个额外的出牌阶段', 'he').set('ai', function (card) {
                                        if (get.attitude(_status.event.player, _status.currentPhase) <= 0) return 0;
                                        return 9 - get.value(card);
                                    }).set('logSkill', 'hpp_guanwei');
                                    'step 1'
                                    if (result.bool) {
                                        if (trigger.player != player) player.addExpose(0.5);
                                        player.line(trigger.player, 'green');
                                        trigger.player.draw(2);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var next = trigger.player.phaseUse();
                                    event.next.remove(next);
                                    trigger.getParent('phase').next.push(next);
                                },
                            },
                            hpp_gongqing: {
                                audio: 'xinfu_gongqing',
                                trigger: { player: 'damageBegin4' },
                                filter: function (event, player, name) {
                                    if (!event.source) return false;
                                    var num = event.source.getAttackRange();
                                    if (num < 3) return event.num > 1;
                                    return true;
                                },
                                preHidden: true,
                                forced: true,
                                content: function () {
                                    var range = trigger.source.getAttackRange();
                                    if (range < 3 && trigger.num > 1) trigger.num = 1;
                                    if (range >= 3) player.draw();
                                },
                                ai: {
                                    filterDamage: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (arg && arg.player) {
                                            if (arg.player.hasSkillTag('jueqing', false, player)) return false;
                                            if (arg.player.getAttackRange() < 3) return true;
                                        }
                                        return false;
                                    }
                                },
                            },

                            // 秦宓
                            hpp_zhuandui: {
                                shaRelated: true,
                                audio: 'zhuandui',
                                group: ['zhuandui_use', 'zhuandui_respond'],
                                trigger: { player: ['chooseToCompareAfter', 'compareMultipleAfter'], target: ['chooseToCompareAfter', 'compareMultipleAfter'] },
                                filter: function (event, player) {
                                    if (event.preserve) return false;
                                    if (player == event.player) return event.num1 > event.num2;
                                    return event.num2 > event.num1;
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    player.draw();
                                },
                            },

                            // 麴义
                            hpp_fuqi: {
                                audio: 'fuqi',
                                forced: true,
                                group: 'hpp_fuqi_tieji',
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    return event.card && (get.type(event.card) == 'trick' || get.type(event.card) == 'basic' && !['shan', 'tao', 'jiu', 'du'].contains(event.card.name)) && game.hasPlayer(function (current) {
                                        return current != player && get.distance(current, player) <= 2;
                                    });
                                },
                                content: function () {
                                    var targets = game.filterPlayer(function (current) {
                                        return current != player && get.distance(current, player) <= 2;
                                    });
                                    for (var target of targets) target.popup('无法响应');
                                    trigger.directHit.addArray(targets);
                                },
                                ai: {
                                    ignoreSkill: true,
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (tag == 'directHit_ai') return get.distance(arg.target, player) <= 2;
                                        if (!arg || arg.isLink || !arg.card || !get.tag(arg.card, 'damage')) return false;
                                        if (!arg.skill || !lib.skill[arg.skill] || lib.skill[arg.skill].charlotte || get.is.locked(arg.skill) || !arg.target.getSkills(true, false).contains(arg.skill)) return false;
                                    },
                                },
                                subSkill: {
                                    tieji: {
                                        audio: 'fuqi',
                                        trigger: { source: 'damageSource' },
                                        filter: function (event, player) {
                                            return event.player != player && event.player.isIn();
                                        },
                                        forced: true,
                                        logTarget: 'player',
                                        content: function () {
                                            trigger.player.addTempSkill('fengyin');
                                        },
                                    },
                                },
                            },
                            hpp_jiaozi: {
                                audio: 'jiaozi',
                                trigger: { source: 'damageBegin1' },
                                filter: function (event, player) {
                                    return player.isMaxHandcard();
                                },
                                forced: true,
                                content: function () {
                                    trigger.num++;
                                },
                                ai: { presha: true },
                            },

                            // 沙摩柯
                            hpp_jili: {
                                audio: 'gzjili',
                                inherit: 'gzjili',
                                group: 'hpp_jili_zhiheng',
                                subSkill: {
                                    zhiheng: {
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return player.countCards('he');
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseToDiscard('he', get.prompt('hpp_jili'), '弃置一张牌并摸一张牌').set('ai', lib.skill.zhiheng.check).set('complexCard', true).logSkill = 'hpp_jili';
                                            'step 1'
                                            if (result.bool) player.draw();
                                        },
                                    },
                                },
                            },

                            // 司马懿
                            hpp_fankui: {
                                audio: 'fankui',
                                trigger: { player: 'damageEnd' },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    event.count = trigger.num;
                                    'step 1'
                                    event.count--;
                                    player.judge();
                                    'step 2'
                                    if (!game.hasPlayer(function (current) {
                                        return current.countGainableCards(player, 'he');
                                    })) {
                                        event.goto(4);
                                        return;
                                    }
                                    if (result.suit != 'heart' && (!trigger.source || !trigger.source.countCards('he'))) {
                                        event.goto(4);
                                        return;
                                    }
                                    if (result.suit != 'heart') result.targets = [trigger.source];
                                    else player.chooseTarget('请选择【反馈】的目标', '获得一名角色的一张牌', true, function (card, player, target) {
                                        return target.countGainableCards(player, 'he');
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                    });
                                    'step 3'
                                    if (result.targets) {
                                        var target = result.targets[0];
                                        player.line(target);
                                        player.gainPlayerCard(target, 'he', true);
                                    }
                                    else event.finish();
                                    'step 4'
                                    if (event.count > 0) player.chooseBool(get.prompt2('hpp_fankui')).set('frequentSkill', 'hpp_fankui');
                                    else event.finish();
                                    'step 5'
                                    if (result.bool) {
                                        player.logSkill('hpp_fankui');
                                        event.goto(1);
                                    }
                                },
                                ai: {
                                    maixie_defend: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player.countCards('he') > 1 && get.tag(card, 'damage')) {
                                                if (player.hasSkillTag('jueqing', false, target)) return [1, -1.5];
                                                if (get.attitude(target, player) < 0) return [1, 1];
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_guicai: {
                                audio: 'guicai',
                                trigger: { global: 'judge' },
                                filter: function (event, player) {
                                    return player.countCards('hes');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                        get.translation(trigger.player.judging[0]) + '，' + get.prompt('hpp_guicai'), 'hes', function (card) {
                                            var player = _status.event.player;
                                            var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                                            if (mod2 != 'unchanged') return mod2;
                                            var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);
                                            if (mod != 'unchanged') return mod;
                                            return true;
                                        }).set('ai', function (card) {
                                            var trigger = _status.event.getTrigger();
                                            var player = _status.event.player;
                                            var judging = _status.event.judging;
                                            var result = trigger.judge(card) - trigger.judge(judging);
                                            var attitude = get.attitude(player, trigger.player);
                                            if (attitude == 0) {
                                                if (player.isDamaged() && get.suit(card, player) == 'heart') return 10;
                                                if (get.suit(card, player) == 'club') return 8;
                                                return 0;
                                            }
                                            if (attitude > 0) {
                                                if (result == 0) {
                                                    if (player.isDamaged() && get.suit(card, player) == 'heart') return 10;
                                                    if (get.suit(card, player) == 'club') return 8;
                                                    return 0;
                                                }
                                                return result - get.value(card) / 2;
                                            }
                                            else {
                                                if (result == 0) {
                                                    if (player.isDamaged() && get.suit(card) == 'heart') return 10;
                                                    if (get.suit(card) == 'club') return 8;
                                                    return 0;
                                                }
                                                return -result - get.value(card) / 2;
                                            }
                                        }).set('judging', trigger.player.judging[0]);
                                    'step 1'
                                    if (result.bool) {
                                        player.respond(result.cards, 'hpp_guicai', 'highlight', 'noOrdering');
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        if (trigger.player.judging[0].clone) {
                                            trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                                            game.broadcast(function (card) {
                                                if (card.clone) {
                                                    card.clone.classList.remove('thrownhighlight');
                                                }
                                            }, trigger.player.judging[0]);
                                            game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                                        }
                                        game.cardsDiscard(trigger.player.judging[0]);
                                        trigger.player.judging[0] = result.cards[0];
                                        trigger.orderingCards.addArray(result.cards);
                                        game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                        game.delay(2);
                                        event.card = result.cards[0];
                                    }
                                    else event.finish();
                                    'step 3'
                                    if (get.suit(card, player) == 'heart') player.recover();
                                    if (get.suit(card, player) == 'club') player.draw(2);
                                },
                                ai: {
                                    rejudge: true,
                                    tag: { rejudge: 1 },
                                },
                            },

                            // 孙策
                            hpp_jiang: {
                                audio: 'jiang',
                                shaRelated: true,
                                preHidden: true,
                                filter: function (event, player) {
                                    return event.card.name == 'sha' || event.card.name == 'juedou';
                                },
                                trigger: {
                                    player: 'useCardToPlayered',
                                    target: 'useCardToTargeted',
                                },
                                frequent: true,
                                content: function () {
                                    player.draw();
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (card.name == 'sha' || card.name == 'juedou') return [1, 0.6];
                                        },
                                        player: function (card, player, target) {
                                            if (card.name == 'sha' || card.name == 'juedou') return [1, 1];
                                        },
                                    },
                                },
                            },
                            hpp_hunzi: {
                                derivation: ['hpp_yingzi', 'hpp_yinghun'],
                                unique: true,
                                audio: 'hunzi',
                                trigger: { player: ['changeHp', 'enterGame'], global: 'phaseBefore' },
                                filter: function (event, player) {
                                    if (player.hp != 1) return false;
                                    return event.name != 'phase' || game.phaseNumber == 0;
                                },
                                juexingji: true,
                                forced: true,
                                skillAnimation: true,
                                animationColor: 'wood',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_hunzi');
                                    player.loseMaxHp();
                                    'step 1'
                                    player.addSkillLog('hpp_yingzi');
                                    player.addSkillLog('hpp_yinghun');
                                }
                            },
                            hpp_zhiba: {
                                unique: true,
                                audio: 'zhiba2',
                                global: 'hpp_zhiba2',
                                zhuSkill: true,
                            },
                            hpp_zhiba2: {
                                audio: 'zhiba2',
                                enable: 'phaseUse',
                                discard: false,
                                lose: false,
                                delay: false,
                                line: true,
                                direct: true,
                                clearTime: true,
                                prepare: function (cards, player, targets) {
                                    targets[0].logSkill('hpp_zhiba');
                                },
                                prompt: function () {
                                    var player = _status.event.player;
                                    var list = game.filterPlayer(function (target) {
                                        return target != player && target.hasZhuSkill('hpp_zhiba', player);
                                    });
                                    var str = '将一张【决斗】或【杀】交给' + get.translation(list);
                                    if (list.length > 1) str += '中的一人';
                                    return str;
                                },
                                filter: function (event, player) {
                                    if (player.group != 'wu' || player.hasSkill('hpp_zhiba3')) return false;
                                    if (player.countCards('h', function (card) {
                                        return card.name == 'juedou' || card.name == 'sha';
                                    }) <= 0) return false;
                                    return game.hasPlayer(function (target) {
                                        return target != player && target.hasZhuSkill('hpp_zhiba', player);
                                    });
                                },
                                filterCard: function (card) {
                                    return card.name == 'juedou' || card.name == 'sha';
                                },
                                log: false,
                                visible: true,
                                filterTarget: function (card, player, target) {
                                    return target != player && target.hasZhuSkill('hpp_zhiba', player);
                                },
                                content: function () {
                                    player.addTempSkill('hpp_zhiba3', 'phaseUseAfter');
                                    target.gain(cards, player, 'give');
                                },
                                ai: {
                                    expose: 0.3,
                                    order: 10,
                                    result: {
                                        target: 5,
                                    },
                                },
                            },
                            hpp_zhiba3: { charlotte: true },

                            // 孙登
                            hpp_kuangbi: {
                                group: ['hpp_kuangbi_gain', 'hpp_kuangbi_effect'],
                                audio: 'kuangbi',
                                enable: 'phaseUse',
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('he') > 0;
                                },
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    target.chooseCard('he', [1, 3], '匡弼：将一至三张牌置于' + get.translation(player) + '的武将牌上', true).set('ai', function (card) {
                                        if (get.attitude(_status.event.player, _status.event.getParent().player) > 0) {
                                            return 7 - get.value(card);
                                        }
                                        return -get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        event.num = result.cards.length;
                                        player.addToExpansion(result.cards, target, 'give').gaintag.add('hpp_kuangbi');
                                        player.chooseBool('匡弼：是否令' + get.translation(target) + '摸' + get.cnNumber(event.num) + '张牌？').set('choice', get.attitude(player, target) > 0);
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        player.line(target);
                                        target.draw(num);
                                    }
                                },
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    player.removeGaintag(skill);
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                ai: {
                                    order: 7,
                                    result: {
                                        player: 1,
                                        target: function (player, target) {
                                            if (get.attitude(player, target) > 0) {
                                                return Math.sqrt(target.countCards('he'));
                                            }
                                            return 0;
                                        },
                                    },
                                },
                                subSkill: {
                                    gain: {
                                        audio: 'kuangbi',
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            return player.getExpansions('hpp_kuangbi').length;
                                        },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            player.gain(player.getExpansions('hpp_kuangbi'), 'gain2').gaintag.add('hpp_kuangbi');
                                        },
                                    },
                                    effect: {
                                        audio: 'kuangbi',
                                        trigger: {
                                            player: 'loseAfter',
                                            global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                        },
                                        filter: function (event, player) {
                                            var evt = event.getl(player);
                                            if (!evt || !evt.hs || !evt.hs.length) return false;
                                            if (player.countCards('h', function (card) {
                                                return card.hasGaintag('hpp_kuangbi');
                                            })) return false;
                                            if (event.name == 'lose') {
                                                for (var i in event.gaintag_map) {
                                                    if (event.gaintag_map[i].includes('hpp_kuangbi')) return true;
                                                }
                                                return false;
                                            }
                                            return player.hasHistory('lose', function (evt) {
                                                if (event != evt.getParent()) return false;
                                                for (var i in evt.gaintag_map) {
                                                    if (evt.gaintag_map[i].includes('hpp_kuangbi')) return true;
                                                }
                                                return false;
                                            });
                                        },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            player.draw();
                                            player.recover();
                                        },
                                    },
                                },
                            },

                            // 孙皓
                            hpp_canshi: {
                                audio: 'canshi',
                                trigger: { player: 'phaseDrawBegin2' },
                                check: function (event, player) {
                                    if (player.skipList.contains('phaseUse') || !player.countCards('h', function (card) {
                                        return get.type2(card) == 'trick' && player.hasUseTarget(card);
                                    })) return true;
                                    var num = game.countPlayer(function (current) {
                                        if (player.hasZhuSkill('guiming') && current.group == 'wu') return true;
                                        return current.isDamaged();
                                    });
                                    return num > 1;
                                },
                                prompt: function (event, player) {
                                    var num = game.countPlayer(function (current) {
                                        if (player.hasZhuSkill('guiming') && current.group == 'wu' && current != player) return true;
                                        return current.isDamaged();
                                    });
                                    return get.prompt('hpp_canshi') + '（可多摸' + get.cnNumber(num) + '张牌，且本回合使用【杀】须弃置一张牌）';
                                },
                                filter: function (event, player) {
                                    return !event.numFixed && game.hasPlayer(function (current) {
                                        if (player.hasZhuSkill('guiming') && current.group == 'wu' && current != player) return true;
                                        return current.isDamaged();
                                    });
                                },
                                content: function () {
                                    var num = game.countPlayer(function (current) {
                                        if (player.hasZhuSkill('guiming') && current.group == 'wu' && current != player) return true;
                                        return current.isDamaged();
                                    });
                                    if (num > 0) trigger.num += num;
                                    player.addTempSkill('hpp_canshi2');
                                },
                            },
                            hpp_canshi2: {
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    if (!player.countCards('he')) return false;
                                    return event.card.name == 'sha';
                                },
                                forced: true,
                                autodelay: true,
                                content: function () {
                                    player.chooseToDiscard(true, 'he');
                                },
                            },
                            hpp_chouhai: {
                                audio: 'chouhai',
                                trigger: { player: 'damageBegin3' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && !player.countCards('he');
                                },
                                forced: true,
                                content: function () {
                                    trigger.num++;
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (card.name == 'sha' && !target.countCards('he')) return [1, -2];
                                        },
                                    },
                                },
                            },

                            // 孙坚
                            yinghun_ol_sunjian: { audio: 2 },
                            yinghun_sunce: { audio: 2 },
                            hpp_yinghun: {
                                audio: 'yinghun',
                                audioname2: {
                                    hpp_sunjian: 'yinghun_ol_sunjian',
                                    hpp_sunce: 'yinghun_sunce',
                                },
                                trigger: { player: 'phaseZhunbeiBegin' },
                                direct: true,
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_yinghun'), lib.filter.notMe).set('ai', function (target) {
                                        var player = _status.event.player, att = get.attitude(player, target);
                                        if (get.attitude(player, target) > 0) return 10 + att;
                                        if (player.getDamagedHp() > 1) return -att;
                                        return -1;
                                    }).setHiddenSkill('hpp_yinghun');
                                    'step 1'
                                    if (result.bool) {
                                        var num = player.getDamagedHp();
                                        event.num = num;
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_yinghun', target);
                                        if (num == 0) {
                                            target.draw();
                                            event.finish();
                                            return;
                                        }
                                        else {
                                            var str1 = '摸' + get.cnNumber(num, true) + '张牌';
                                            var str2 = '摸一弃' + get.cnNumber(num, true);
                                            player.chooseControl(str1, str2, function (event, player) {
                                                if (player.isHealthy()) return 1 - _status.event.choice;
                                                return _status.event.choice;
                                            }).set('choice', (get.attitude(player, event.target) > 0) ? 0 : 1);
                                            event.str = str1;
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.control == event.str) {
                                        if (num > 0) target.draw(num);
                                    }
                                    else {
                                        event.target.draw();
                                        if (num > 0) target.chooseToDiscard(num, true, 'he');
                                    }
                                },
                            },
                            hpp_wulie: {
                                unique: true,
                                audio: 'wulie',
                                trigger: { player: 'phaseBegin' },
                                mark: true,
                                limited: true,
                                filter: function (event, player) {
                                    return player.hp > 0;
                                },
                                direct: true,
                                priority: 10,
                                skillAnimation: true,
                                animationColor: 'wood',
                                content: function () {
                                    'step 0'
                                    var num = player.hp - 1;
                                    if (player.countCards('hs', { name: ['tao', 'jiu'] })) {
                                        num = player.hp;
                                    }
                                    var map = {};
                                    var list = [];
                                    for (var i = 1; i <= player.hp; i++) {
                                        var cn = get.cnNumber(i, true);
                                        map[cn] = i;
                                        list.push(cn);
                                    }
                                    list.push('cancel2');
                                    event.map = map;
                                    player.chooseControl(list).set('prompt', get.prompt2('hpp_wulie')).set('ai', function () {
                                        if (player.getFriends(true).length < game.countPlayer(function (current) {
                                            return get.attitude(player, target) > 0
                                        }) - 1) return 'cancel2';
                                        return get.cnNumber(_status.event.goon, true);
                                    }).set('goon', num);
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        var num = event.map[result.control] || 1;
                                        player.logSkill('hpp_wulie');
                                        player.awakenSkill('hpp_wulie');
                                        player.loseHp(num);
                                        player.addSkill('hpp_wulie2');
                                        player.addMark('hpp_wulie2', num);
                                        player.chooseTarget([1, num], '是否令至多' + get.cnNumber(num) + '名其他角色各获得1枚「烈」标记？', lib.filter.notMe).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.attitude(player, target);
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.line(targets);
                                        for (var i of targets) {
                                            i.addSkill('hpp_wulie2');
                                            i.addMark('hpp_wulie2', 1);
                                        }
                                    }
                                },
                            },
                            hpp_wulie2: {
                                marktext: '烈',
                                intro: { name2: '烈', content: 'mark' },
                                trigger: { player: 'damageBegin3' },
                                content: function () {
                                    trigger.cancel();
                                    player.removeMark('hpp_wulie2', 1);
                                    if (!player.storage.hpp_wulie2) player.removeSkill('hpp_wulie2');
                                },
                            },

                            // 孙亮
                            hpp_kuizhu: {
                                audio: 'nzry_kuizhu',
                                trigger: { player: 'phaseDiscardEnd' },
                                filter: function (event, player) {
                                    var cards = [];
                                    player.getHistory('lose', function (evt) {
                                        if (evt.type == 'discard' && evt.getParent('phaseDiscard') == event) cards.addArray(evt.cards2);
                                    });
                                    return cards.length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var cards = [];
                                    player.getHistory('lose', function (evt) {
                                        if (evt.type == 'discard' && evt.getParent('phaseDiscard') == trigger) cards.addArray(evt.cards2);
                                    });
                                    event.num = cards.length;
                                    event.str1 = '令至多' + event.num + '名角色摸一张牌';
                                    event.str2 = '对任意名体力值之和不大于' + event.num + '的角色造成一点伤害';
                                    player.chooseControl('cancel2').set('ai', function () {
                                        if (game.countPlayer(function (current) { return get.attitude(player, current) < 0 && current.hp <= event.num }) > 0) return 1;
                                        return 0;
                                    }).set('choiceList', [event.str1, event.str2]).set('prompt', get.prompt2('hpp_kuizhu'));
                                    'step 1'
                                    if (result.control == 'cancel2') event.finish();
                                    event.control = [event.str1, event.str2][result.index];
                                    'step 2'
                                    var num = event.num, str = event.control;
                                    if (event.control == event.str1) {
                                        player.chooseTarget('请选择〖溃诛〗的目标', str, [0, event.num]).set('ai', function (target) {
                                            // var player = _status.event.player;
                                            return get.attitude(player, target);
                                        });
                                    }
                                    else {
                                        player.chooseTarget('请选择〖溃诛〗的目标', str, [0, Infinity], function (card, player, target) {
                                            var num = _status.event.num;
                                            if (!ui.selected.targets.length) {
                                                return target.hp <= num;
                                            }
                                            var summer = 0;
                                            for (var i of ui.selected.targets) summer += i.hp;
                                            game.log(summer + target.hp, num);
                                            return summer + target.hp <= num;
                                        }).set('ai', function (target) {
                                            return get.damageEffect(target, player, player);
                                        }).set('num', num);
                                    }
                                    'step 3'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.logSkill('hpp_kuizhu', targets);
                                        if (event.control == event.str1) game.asyncDraw(targets);
                                        else for (var target of targets) target.damage();
                                    }
                                },
                            },
                            hpp_chezheng: {
                                audio: 'nzry_zhizheng',
                                mod: {
                                    playerEnabled: function (card, player, target) {
                                        if (target != player && card.name == 'sha' && player.isPhaseUsing() && !target.inRange(player)) return false;
                                    },
                                },
                                trigger: { player: 'phaseUseEnd' },
                                forced: true,
                                content: function () {
                                    var num = game.countPlayer(function (current) {
                                        if (current == player) return false;
                                        return !current.inRange(player);
                                    });
                                    player.draw(Math.max(2, num));
                                },
                            },
                            hpp_lijun: {
                                unique: true,
                                audio: 'nzry_lijun1',
                                trigger: { global: 'useCardAfter' },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha' || event.player.group != 'wu') return false;
                                    if (!event.player.isPhaseUsing() || event.player == player) return false;
                                    if (player.hasSkill('hpp_lijun_used')) return false;
                                    return player.hasZhuSkill('hpp_lijun');
                                },
                                zhuSkill: true,
                                forced: true,
                                locked: false,
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('hpp_lijun_used', 'phaseUseAfter');
                                    player.draw();
                                    player.chooseBool().set('prompt', '立军：是否令' + get.translation(trigger.player) + '摸一张牌？').set('choice', get.attitude(player, trigger.player) > 0);
                                    'step 1'
                                    if (result.bool) {
                                        player.line(trigger.player);
                                        trigger.player.draw();
                                    }
                                },
                                subSkill: { used: { charlotte: true } },
                            },

                            // 孙鲁班
                            hpp_zenhui: {
                                audio: 'chanhui',
                                usable: 1,
                                trigger: { player: 'useCardToPlayer' },
                                filter: function (event, player) {
                                    if (_status.currentPhase != player) return false;
                                    if (event.targets.length > 1) return false;
                                    var card = event.card;
                                    if (card.name == 'sha' || get.type(card) == 'trick') return true;
                                    return false;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 0;
                                },
                                logTarget: 'target',
                                content: function () {
                                    'step 0'
                                    trigger.target.chooseCard('he', '谮毁：交给' + get.translation(player) + '一张牌，或失去1点体力').set('ai', function (card) {
                                        return 7 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) player.gain(result.cards, trigger.target, 'giveAuto');
                                    else trigger.target.loseHp();
                                },
                            },
                            hpp_jiaojin: {
                                audio: 'jiaojin',
                                trigger: { target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return (event.card.name == 'sha' || get.type(event.card) == 'trick');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var next = player.chooseToDiscard('h', '骄矜：是否弃置一张手牌令' + get.translation(trigger.card) + '对你无效？');
                                    next.set('ai', function (card) {
                                        if (_status.event.goon2) {
                                            return 3 + _status.event.val - get.value(card);
                                        }
                                        return 0;
                                    });
                                    next.set('val', get.value(trigger.cards.filterInD()));
                                    next.set('goon2', get.effect(player, trigger.card, trigger.player, player) < 0)
                                    next.logSkill = ['hpp_jiaojin', trigger.player];
                                    'step 1'
                                    if (result.bool) trigger.excluded.push(player);
                                },
                            },

                            // 孙鲁育
                            hpp_meibu: {
                                audio: 'meibu',
                                trigger: { global: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return event.player != player && event.player.isIn() && player.countCards('he');
                                },
                                direct: true,
                                derivation: 'rezhixi',
                                checkx: function (event, player) {
                                    if (get.attitude(player, event.player) >= 0) return false;
                                    return event.player.countCards('h') > event.player.hp;
                                },
                                content: function () {
                                    'step 0'
                                    var check = lib.skill.new_meibu.checkx(trigger, player);
                                    player.chooseToDiscard(get.prompt2('hpp_meibu', trigger.player), 'he').set('ai', function (card) {
                                        if (_status.event.check) return 6 - get.value(card);
                                        return 0;
                                    }).set('check', check).set('logSkill', ['hpp_meibu', trigger.player]);
                                    'step 1'
                                    if (result.bool) {
                                        var target = trigger.player;
                                        player.line(target, 'green');
                                        player.addTempSkill('hpp_meibu_gain');
                                        target.addTempSkill('rezhixi');
                                    }
                                },
                                ai: { expose: 0.2 },
                                subSkill: {
                                    gain: {
                                        trigger: { global: 'loseAfter' },
                                        forced: true,
                                        charlotte: true,
                                        popup: false,
                                        onremove: true,
                                        filter: function (event, player) {
                                            return event.getParent(3).name == 'rezhixi' && get.position(event.cards[0]) == 'd';
                                        },
                                        content: function () {
                                            player.gain(trigger.cards[0], 'gain2');
                                        },
                                    },
                                },
                            },

                            // 孙乾
                            hpp_qianya: {
                                audio: 'qianya',
                                trigger: { target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return get.type2(event.card) == 'trick' && player.countCards('h');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var nh = player.countCards('h');
                                    player.chooseCardTarget({
                                        filterCard: true,
                                        filterTarget: lib.filter.notMe,
                                        selectCard: [1, nh],
                                        ai1: function (card) {
                                            var player = _status.event.player;
                                            var cardname = _status.event.cardname;
                                            if (_status.event.du) return -get.value(card, player, 'raw');
                                            else if (_status.event.shuimeng) {
                                                if (cardname == 'wuzhong') {
                                                    if (player.needsToDiscard(2 - ui.selected.cards.length)) {
                                                        return 10 - get.value(card, player, 'raw');
                                                    }
                                                }
                                                else if (cardname == 'guohe') {
                                                    if (player.needsToDiscard(-1 - ui.selected.cards.length)) {
                                                        return 10 - get.value(card, player, 'raw');
                                                    }
                                                }
                                                return 0;
                                            }
                                            else if (cardname == 'lebu') {
                                                if (player.needsToDiscard(1 - ui.selected.cards.length)) {
                                                    return 8 - get.value(card, player, 'raw');
                                                }
                                                else {
                                                    if (!ui.selected.cards.length) {
                                                        return 6 - get.value(card, player, 'raw');
                                                    }
                                                    return 0;
                                                }
                                            }
                                            else if (cardname == 'shunshou') {
                                                if (_status.event.nh <= 2) return get.value(card, player, 'raw');
                                            }
                                            else if (cardname == 'huogong') {
                                                if (player.hp == 1) return get.value(card, player, 'raw');
                                            }
                                            if (ui.selected.cards.length) return 0;
                                            return 7 - get.value(card, player, 'raw');
                                        },
                                        ai2: function (target) {
                                            var att = get.attitude(_status.event.player, target);
                                            var nh2 = target.countCards('h');
                                            var num = Math.sqrt(1 + nh2);
                                            var cardname = _status.event.cardname;
                                            if (_status.event.du) return 0.5 - att;
                                            else if (_status.event.shuimeng) {
                                                return att / num;
                                            }
                                            else if (cardname == 'lebu') {
                                                return att / num;
                                            }
                                            else if (cardname == 'shunshou') {
                                                if (_status.event.nh <= 2) return att / num;
                                            }
                                            else if (cardname == 'huogong') {
                                                if (_status.event.player.hp == 1) return att / num;
                                            }
                                            if (_status.event.nh > nh2 + 1) {
                                                return att / num;
                                            }
                                            return 0;
                                        },
                                        du: player.hasCard(function (card) {
                                            return get.value(card, player, 'raw') < 0;
                                        }),
                                        shuimeng: trigger.getParent(2).name == 'shuimeng',
                                        nh: nh,
                                        cardname: trigger.card.name,
                                        prompt: get.prompt2('hpp_qianya')
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_qianya', result.targets);
                                        player.give(result.cards, result.targets[0]);
                                        var card = get.cardPile2(function (card) {
                                            return get.type(card) != 'equip';
                                        });
                                        if (card) player.gain(card, 'gain2');
                                    }
                                },
                            },

                            // 孙权
                            hpp_zhiheng: {
                                audio: 'rezhiheng',
                                audioname: ['shen_caopi'],
                                enable: 'phaseUse',
                                usable: 3,
                                filter: function (event, player) {
                                    if (player.getStat('skill').hpp_zhiheng == 1) {
                                        return !player.storage.zhihengDelay;
                                    } else if (player.getStat('skill').hpp_zhiheng == 2) {
                                        return !player.storage.zhihengNotBasic;
                                    } else {
                                        player.storage.zhihengDelay = false;
                                        player.storage.zhihengNotBasic = false;
                                    }
                                    return true;
                                },
                                position: 'he',
                                filterCard: lib.filter.cardDiscardable,
                                discard: false,
                                lose: false,
                                delay: false,
                                selectCard: [1, Infinity],
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (get.position(card) == 'h' && !player.countCards('h', 'du') && (player.hp > 2 || !player.countCards('h', function (card) {
                                        return get.value(card) >= 8;
                                    }))) {
                                        return 1;
                                    }
                                    return 6 - get.value(card)
                                },
                                content: function () {
                                    'step 0'
                                    player.discard(cards);
                                    event.num = 1;
                                    var hs = player.getCards('h');
                                    if (!hs.length) event.num = 0;
                                    for (var i = 0; i < hs.length; i++) {
                                        if (!cards.contains(hs[i])) {
                                            event.num = 0; break;
                                        }
                                    }
                                    'step 1'
                                    player.draw(event.num + cards.length);
                                    'step 2'
                                    if (player.getStat('skill').hpp_zhiheng != undefined) {
                                        if (player.getStat('skill').hpp_zhiheng == 1) {
                                            player.storage.zhihengDelay = false;
                                            player.storage.zhihengNotBasic = false;
                                            for (i of result) {
                                                if (get.type(i) == 'delay') {
                                                    player.storage.zhihengDelay = true;
                                                    player.storage.zhihengNotBasic = false;
                                                }
                                            }
                                        } else if (player.getStat('skill').hpp_zhiheng == 2) {
                                            player.storage.zhihengDelay = false;
                                            player.storage.zhihengNotBasic = false;
                                            for (i of result) {
                                                if (get.type(i) != 'basic') {
                                                    player.storage.zhihengNotBasic = true;
                                                    player.storage.zhihengDelay = false;
                                                }
                                            }
                                        }
                                    }
                                },
                                subSkill: {
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        player: 1
                                    },
                                    threaten: 2.55
                                },
                            },
                            hpp_jiuyuan: {
                                group: 'hpp_jiuyuan_tao',
                                audio: 'rejiuyuan',
                                zhuSkill: true,
                                trigger: { global: 'recoverBefore' },
                                direct: true,
                                filter: function (event, player) {
                                    return event.player.group == 'wu' && event.getParent().name != 'hpp_jiuyuan' && player != event.player
                                        && player.hasZhuSkill('hpp_jiuyuan', event.player) && event.player == _status.currentPhase;
                                },
                                content: function () {
                                    'step 0'
                                    trigger.player.chooseBool('是否对' + get.translation(player) + '发动【救援】？', '改为令其回复1点体力，然后你摸一张牌').set('ai', function () {
                                        var evt = _status.event;
                                        if (get.attitude(evt.player, evt.getParent().player) > 0) {
                                            if ((evt.getParent().player.hp > 2 && evt.player.hp < evt.getParent().player.hp) || (!evt.getParent().player.isDamaged() && evt.player.isDamaged())) {
                                                return false;
                                            }
                                            return true;
                                        } else {
                                            return false;
                                        }
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_jiuyuan');
                                        trigger.player.line(player, 'green');
                                        trigger.cancel();
                                        player.recover();
                                        trigger.player.draw();
                                    }
                                },
                                subSkill: {
                                    tao: {
                                        audio: 'rejiuyuan',
                                        trigger: { target: 'taoBegin' },
                                        forced: true,
                                        filter: function (event, player) {
                                            if (event.player == player) return false;
                                            if (!player.hasZhuSkill('hpp_jiuyuan')) return false;
                                            if (event.player.group != 'wu') return false;
                                            if (!player.isDying()) return false;
                                            return true;
                                        },
                                        content: function () {
                                            trigger.baseDamage++;
                                        },
                                    },
                                },
                            },

                            // 孙尚香
                            hpp_jieyi: {
                                audio: 'rejieyin',
                                enable: 'phaseUse',
                                filterCard: true,
                                usable: 1,
                                position: 'he',
                                filter: function (event, player) {
                                    return player.countCards('he');
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (get.position(card) == 'e') {
                                        var subtype = get.subtype(card);
                                        if (!game.hasPlayer(function (current) {
                                            return current != player && current.hp != player.hp && get.attitude(player, current) > 0 && !current.countCards('e', { subtype: subtype });
                                        })) {
                                            return 0;
                                        }
                                        if (player.countCards('h', { subtype: subtype })) return 20 - get.value(card);
                                        return 10 - get.value(card);
                                    }
                                    else {
                                        if (player.countCards('e')) return 0;
                                        if (player.countCards('h', { type: 'equip' })) return 0;
                                        return 8 - get.value(card);
                                    }
                                },
                                filterTarget: function (card, player, target) {
                                    var card = ui.selected.cards[0];
                                    if (!card) return false;
                                    if (get.position(card) == 'e' && target.countCards('e', { subtype: get.subtype(card) })) return false;
                                    return target != player;
                                },
                                discard: false,
                                delay: 0,
                                lose: false,
                                content: function () {
                                    'step 0'
                                    if (get.position(cards[0]) == 'e') {
                                        player.$give(cards, target);
                                        target.equip(cards[0]);
                                    }
                                    else player.give(cards, target, true);
                                    'step 1'
                                    player.recover();
                                    player.draw();
                                    'step 2'
                                    if (target.hp < player.hp && target.isHealthy()) { event.finish(); return; }
                                    player.chooseBool('结谊：是否令' + get.translation(target) + (target.hp < player.hp ? '回复1点体力' : '摸一张牌') + '？').set('choice', get.attitude(player, target) > 0);
                                    'step 3'
                                    if (result.bool) {
                                        player.line(target);
                                        target[target.hp < player.hp ? 'recover' : 'draw']();
                                    }
                                },
                                ai: {
                                    order: function () {
                                        var player = _status.event.player;
                                        var es = player.getCards('e');
                                        for (var i = 0; i < es.length; i++) {
                                            if (player.countCards('h', { subtype: get.subtype(es[i]) })) return 10;
                                        }
                                        return 2;
                                    },
                                    result: {
                                        target: function (player, target) {
                                            var goon = function () {
                                                var es = player.getCards('e');
                                                for (var i = 0; i < es.length; i++) {
                                                    if (player.countCards('h', { subtype: get.subtype(es[i]) })) return true;
                                                }
                                                return false;
                                            }
                                            if (player.hp < target.hp) {
                                                if (player.isHealthy()) {
                                                    if (!player.needsToDiscard(1) || goon()) return 0.1;
                                                    return 0;
                                                }
                                                return 1.5;
                                            }
                                            if (player.hp > target.hp) {
                                                if (target.isHealthy()) {
                                                    if (!player.needsToDiscard(1) || goon()) return 0.1;
                                                    return 0;
                                                }
                                                return 1;
                                            }
                                            return 0;
                                        },
                                    },
                                },
                            },

                            // 太史慈
                            hpp_tianyi: {
                                audio: 'tianyi',
                                trigger: { player: 'phaseUseBegin' },
                                check: function (event, player) {
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseControl().set('choiceList', [
                                        '本回合使用出杀次数+1，杀造成伤害后回复1点体力',
                                        '摸一张牌，本回合杀无距离限制且无视防具'
                                    ]).set('ai', function () {
                                        if ((player.countCards('h', function (card) {
                                            return get.name(card, player) == 'sha' && player.hasUseTarget(card);
                                        }) - player.getCardUsable('sha')) > 1) return 0;
                                        return 1;
                                    });
                                    'step 1'
                                    player.popup('选项' + get.cnNumber(result.index + 1, true));
                                    game.log(player, '选择了', '#g【天义】', '的选项' + get.cnNumber(result.index + 1, true));
                                    if (result.index == 1) player.draw();
                                    player.addTempSkill('hpp_tianyi_' + result.index);
                                },
                                subSkill: {
                                    '0': {
                                        charlotte: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            },
                                        },
                                        trigger: { source: 'damageSource' },
                                        filter: function (event, player) {
                                            return player.isDamaged() && event.card && event.card.name == 'sha';
                                        },
                                        direct: true,
                                        content: function () {
                                            player.recover();
                                        },
                                    },
                                    '1': {
                                        charlotte: true,
                                        mod: {
                                            targetInRange: function (card, player, target, now) {
                                                if (card.name == 'sha') return true;
                                            },
                                        },
                                        trigger: { player: 'useCardToPlayered' },
                                        filter: function (event, player) {
                                            return event.card.name == 'sha';
                                        },
                                        direct: true,
                                        content: function () {
                                            trigger.target.addTempSkill('qinggang2');
                                            trigger.target.storage.qinggang2.add(trigger.card);
                                        },
                                        ai: {
                                            unequip_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg && arg.name == 'sha') return true;
                                                return false;
                                            },
                                        },
                                    },
                                },
                            },

                            // 唐姬
                            hpp_kangge: {
                                group: ['hpp_kangge_draw', 'hpp_kangge_dying'],
                                audio: 'jielie',
                                trigger: { player: 'phaseBegin' },
                                filter: function (event, player) {
                                    return game.countPlayer() > 1;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('请选择【抗歌】的目标', '其于回合外摸牌后，你摸等量的牌；其进入濒死状态时，你可令其回复体力至1点；其死亡后，你弃置所有牌并失去1点体力', lib.filter.notMe, true).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target) > 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_kangge', target);
                                        player.addSkill('hpp_kangge_clear');
                                        player.storage.hpp_kangge = target;
                                        player.markSkill('hpp_kangge');
                                        game.delayx();
                                    }
                                },
                                intro: { content: '已指定$为目标' },
                                subSkill: {
                                    draw: {
                                        audio: 'jielie',
                                        trigger: {
                                            global: ['gainAfter', 'loseAsyncAfter'],
                                        },
                                        forced: true,
                                        filter: function (event, player) {
                                            if (player.countMark('hpp_kangge_draw') >= 3) return false;
                                            var target = player.storage.hpp_kangge;
                                            return target && target != _status.currentPhase && event.getg(target).length > 0;
                                        },
                                        logTarget: 'player',
                                        content: function () {
                                            var num = Math.min(3 - player.countMark('hpp_kangge_draw'), trigger.getg(player.storage.hpp_kangge).length);
                                            player.addMark('hpp_kangge_draw', num, false);
                                            player.draw(num);
                                        },
                                    },
                                    clear: {
                                        trigger: { global: 'phaseBeginStart' },
                                        forced: true,
                                        firstDo: true,
                                        popup: false,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return player.countMark('hpp_kangge_draw') > 0;
                                        },
                                        content: function () {
                                            player.removeMark('hpp_kangge_draw', player.countMark('hpp_kangge_draw'), false);
                                        },
                                    },
                                    dying: {
                                        audio: 'jielie',
                                        trigger: { global: 'dying' },
                                        logTarget: 'player',
                                        filter: function (event, player) {
                                            return event.player == player.storage.hpp_kangge && event.player.hp < 1 && !player.hasSkill('hpp_kangge_temp');
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) > 0;
                                        },
                                        prompt2: '令其将体力值回复至1点',
                                        round: 1,
                                        content: function () {
                                            trigger.player.recover(1 - trigger.player.hp);
                                        },
                                    },
                                },
                            },
                            hpp_jielie: {
                                audio: 'kangge',
                                trigger: { player: 'damageBegin4' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var target = player.storage.hpp_kangge, str;
                                    if (target) {
                                        event.target = target;
                                        str = '，且令' + get.translation(target) + '从弃牌堆中获得等量的花色牌';
                                    }
                                    else str = '';
                                    player.chooseControl(lib.suit.slice(0), 'cancel2').set('prompt', get.prompt('hpp_jielie')).set('prompt2', '防止伤害并改为失去等量体力' + str).set('ai', function () {
                                        var player = _status.event.player;
                                        var target = player.storage.hpp_kangge;
                                        if (target && get.attitude(player, target) <= 0) return 'cancel2';
                                        return lib.suit.randomGet();
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        event.suit = result.control;
                                        player.logSkill('hpp_jielie');
                                        trigger.cancel();
                                        player.loseHp(trigger.num);
                                        if (!target) event.finish();
                                    }
                                    else event.finish();
                                    'step 2'
                                    player.line(target);
                                    var cards = [];
                                    while (cards.length < trigger.num) {
                                        var card = get.discardPile(function (card) {
                                            return get.suit(card, false) == event.suit && !cards.contains(card);
                                        });
                                        if (card) cards.push(card);
                                        else break;
                                    }
                                    if (cards.length) target.gain(cards, 'gain2');
                                },
                            },

                            // 王基
                            hpp_qizhi: {
                                audio: 'qizhi',
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (!event.targets || !event.isFirstTarget) return false;
                                    if (_status.currentPhase != player) return false;
                                    var type = get.type(event.card, 'trick');
                                    if (type != 'basic' && type != 'trick') return false;
                                    return game.hasPlayer(function (target) {
                                        return !event.targets.contains(target) && target.countCards('he') > 0;
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_qizhi'), '弃置一名角色的一张牌，然后若弃置的牌与使用的牌类型相同，你摸一张牌；类型不同，其摸一张牌', function (card, player, target) {
                                        return !_status.event.targets.contains(target) && target.countCards('he') > 0;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (target == player) return 2;
                                        if (get.attitude(player, target) <= 0) {
                                            return 1
                                        }
                                        return 0.5;
                                    }).set('targets', trigger.targets);
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_qizhi', result.targets);
                                        player.discardPlayerCard(result.targets[0], true, 'he');
                                        event.target = result.targets[0];
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool && get.type2(result.cards[0]) == get.type2(trigger.card)) player.draw();
                                    else target.draw();
                                },
                            },
                            hpp_jinqu: {
                                audio: 'jinqu',
                                trigger: { player: 'phaseDiscardBefore' },
                                prompt: function (event, player) {
                                    var num = player.getHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_qizhi';
                                    }).length + 1;
                                    return '进趋：是否摸两张牌并跳过弃牌阶段，然后将手牌弃置至' + get.cnNumber(num) + '张？';
                                },
                                check: function (event, player) {
                                    var num = player.getHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_qizhi';
                                    }).length + 1;
                                    var numx = player.countCards('h') + 2 - num;
                                    return num >= 2 || player.needsToDiscard() >= numx;
                                },
                                content: function () {
                                    'step 0'
                                    trigger.cancel();
                                    player.draw(2);
                                    'step 1'
                                    var num = player.getHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_qizhi';
                                    }).length + 1;
                                    if (player.countCards('h') > num) player.chooseToDiscard(player.countCards('h') - num, true);
                                },
                                ai: { combo: 'hpp_qizhi' },
                            },

                            // 王平
                            hpp_feijun: {
                                intro: { content: '已对$发动过〖飞军〗' },
                                audio: 'nzry_feijun',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (!player.countCards('he')) return false;
                                    return game.hasPlayer(function (current) {
                                        if (current == player) return false;
                                        return current.countCards('he');
                                    });
                                },
                                usable: 1,
                                chooseButton: {
                                    dialog: function (event, player) {
                                        var dialog = ui.create.dialog('飞军：弃置一张牌，然后…', 'hidden');
                                        dialog.add([[
                                            ['give', '令一名有牌的其他角色交给你一张牌'],
                                            ['discard', '令一名装备区有牌的其他角色弃置一张装备区里的牌']
                                        ], 'textbutton']);
                                        return dialog;
                                    },
                                    filter: function (button, player) {
                                        if (button.link == 'discard') return game.hasPlayer(function (current) {
                                            if (current == player) return false;
                                            return current.countCards('e');
                                        });
                                        return true;
                                    },
                                    check: function (button, player) {
                                        if (button.link == 'discard') return 1;
                                        return 2;
                                    },
                                    backup: function (links) {
                                        return get.copy(lib.skill['hpp_feijun_' + links[0]]);
                                    },
                                    prompt: function (links) {
                                        if (links[0] == 'give') return '弃置一张牌，令一名有牌的其他角色交给你一张牌';
                                        return '弃置一张牌，令一名装备区有牌的其他角色弃置一张装备区的牌';
                                    },
                                },
                                ai: {
                                    order: 9,
                                    result: { player: 1 },
                                },
                                subSkill: {
                                    backup: { audio: 'nzry_feijun' },
                                    give: {
                                        audio: 'nzry_feijun',
                                        filterTarget: function (card, player, target) {
                                            if (target == player) return false;
                                            return target.countCards('he');
                                        },
                                        filterCard: true,
                                        position: 'he',
                                        content: function () {
                                            'step 0'
                                            player.markAuto('hpp_feijun', [target]);
                                            target.chooseCard('he', true, '飞军：请交给' + get.translation(player) + '一张牌').set('ai', function (card) {
                                                return -get.value(card);
                                            });
                                            'step 1'
                                            if (result.bool) player.gain(result.cards, target, 'giveAuto');
                                        },
                                        ai: {
                                            result: {
                                                player: function (player, target) {
                                                    var list = player.getStorage('hpp_feijun');
                                                    return get.effect(target, { name: 'shunshou_copy2' }, player, player) * (list.contains(target) ? 1 : 3);
                                                },
                                            },
                                        },
                                    },
                                    discard: {
                                        audio: 'nzry_feijun',
                                        filterTarget: function (card, player, target) {
                                            if (target == player) return false;
                                            return target.countCards('e');
                                        },
                                        filterCard: true,
                                        position: 'he',
                                        content: function () {
                                            player.markAuto('hpp_feijun', [target]);
                                            target.chooseToDiscard('e', true, '飞军：请弃置一张装备区的牌');
                                        },
                                        ai: {
                                            result: {
                                                player: function (player, target) {
                                                    var list = player.getStorage('hpp_feijun');
                                                    return get.effect(target, { name: 'guohe_copy2' }, player, player) * (list.contains(target) ? 1 : 3);
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_binglue: {
                                audio: 'nzry_binglve',
                                trigger: { player: 'useSkill' },
                                filter: function (event, player) {
                                    return event.skill == 'hpp_feijun_backup';
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    'step 1'
                                    var target = trigger.targets[0];
                                    var list = player.getStorage('hpp_feijun');
                                    if (!list.contains(target)) {
                                        player.draw(list.filter(function (i) {
                                            return i.isIn();
                                        }).length + 1);
                                    }
                                },
                                ai: { combo: 'hpp_feijun' },
                            },

                            // 王荣
                            hpp_minsi: {
                                audio: 'minsi',
                                inherit: 'minsi',
                                content: function () {
                                    player.draw(cards.length * 2).gaintag = ['hpp_minsi2'];
                                    player.addTempSkill('hpp_minsi2');
                                },
                            },
                            hpp_minsi2: {
                                onremove: function (player) {
                                    player.removeGaintag('hpp_minsi2');
                                },
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (!card.cards) return;
                                        for (var i of card.cards) {
                                            if (!i.hasGaintag('hpp_minsi2')) return;
                                        }
                                        return true;
                                    },
                                    ignoredHandcard: function (card, player) {
                                        if (card.hasGaintag('hpp_minsi2')) return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && card.hasGaintag('hpp_minsi2')) return false;
                                    },
                                    aiOrder: function (player, card, num) {
                                        if (get.itemtype(card) == 'card' && card.hasGaintag('hpp_minsi2')) return num - 0.1;
                                    },
                                },
                            },
                            hpp_jijing: {
                                audio: 'jijing',
                                trigger: { player: 'damageEnd' },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    player.judge();
                                    'step 1'
                                    player.chooseToDiscard('是否弃置任意张点数之和不小于' + get.cnNumber(num) + '的牌并回复1点体力？', 'he').set('selectCard', function () {
                                        var num = 0;
                                        for (var i = 0; i < ui.selected.cards.length; i++) {
                                            num += get.number(ui.selected.cards[i]);
                                        }
                                        if (num >= _status.event.num) return ui.selected.cards.length;
                                        return ui.selected.cards.length + 2;
                                    }).set('ai', function (card) {
                                        return 6 - get.value(card);
                                    }).set('num', result.number).set('complexCard', true);
                                    'step 2'
                                    if (result.bool) player.recover();
                                },
                            },

                            // 王异
                            hpp_zhenlie: {
                                audio: 'zhenlie',
                                filter: function (event, player) {
                                    return event.player != player && event.card && (event.card.name == 'sha' || get.type(event.card) == 'trick');
                                },
                                logTarget: 'player',
                                check: function (event, player) {
                                    if (event.getParent().excluded.contains(player)) return false;
                                    if (get.attitude(player, event.player) > 0) {
                                        return false;
                                    }
                                    if (get.tag(event.card, 'respondSha')) {
                                        if (player.countCards('h', { name: 'sha' }) == 0) {
                                            return true;
                                        }
                                    }
                                    else if (get.tag(event.card, 'respondShan')) {
                                        if (player.countCards('h', { name: 'shan' }) == 0) {
                                            return true;
                                        }
                                    }
                                    else if (get.tag(event.card, 'damage')) {
                                        if (event.card.name == 'shuiyanqijunx') return player.countCards('e') == 0;
                                        return true;
                                    }
                                    else if ((event.card.name == 'shunshou' || (event.card.name == 'zhujinqiyuan' && (event.card.yingbian || get.distance(event.player, player) < 0))) && player.hp > 2) {
                                        return true;
                                    }
                                    return false;
                                },
                                trigger: { target: 'useCardToTargeted' },
                                content: function () {
                                    "step 0"
                                    player.loseHp();
                                    "step 1"
                                    trigger.getParent().excluded.add(player);
                                    "step 2"
                                    if (trigger.player.countCards('he')) {
                                        player.discardPlayerCard(trigger.player, 'he', true);
                                    }
                                },
                                ai: {
                                    expose: 0.3
                                }
                            },
                            hpp_miji: {
                                audio: 'miji',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return player.hp < player.maxHp;
                                },
                                content: function () {
                                    "step 0"
                                    event.num = player.getDamagedHp();
                                    player.draw(event.num);
                                    "step 1"
                                    var check = player.countCards('h') - event.num;
                                    player.chooseCardTarget({
                                        selectCard: event.num,
                                        filterTarget: function (card, player, target) {
                                            return player != target;
                                        },
                                        ai1: function (card) {
                                            var player = _status.event.player;
                                            if (player.maxHp - player.hp == 1 && card.name == 'du') return 30;
                                            var check = _status.event.check;
                                            if (check < 1) return 0;
                                            if (player.hp > 1 && check < 2) return 0;
                                            return get.unuseful(card) + 9;
                                        },
                                        ai2: function (target) {
                                            var att = get.attitude(_status.event.player, target);
                                            if (ui.selected.cards.length == 1 && ui.selected.cards[0].name == 'du') return 1 - att;
                                            return att - 2;
                                        },
                                        prompt: '将' + get.cnNumber(event.num) + '张手牌交给一名其他角色',
                                    }).set('check', check);
                                    "step 2"
                                    if (result.bool) {
                                        player.give(result.cards, result.targets[0]);
                                        player.line(result.targets, 'green');
                                    }
                                },
                                ai: {
                                    threaten: function (player, target) {
                                        if (target.hp == 1) return 3;
                                        if (target.hp == 2) return 1.5;
                                        return 0.5;
                                    },
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                        }
                                    }
                                }
                            },

                            // 万年公主
                            hpp_zhenge: {
                                audio: 'zhenge',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_zhenge'), '令一名角色的攻击范围+1').set('ai', function (target) {
                                        var player = _status.event.player, att = get.attitude(player, target)
                                        if (att > 0) {
                                            if (!target.hasMark('hpp_zhenge_effect')) att *= 1.5;
                                            if (!game.hasPlayer(function (current) {
                                                return get.distance(target, current, 'attack') > 2;
                                            })) {
                                                var usf = Math.max.apply(Math, game.filterPlayer().map(function (current) {
                                                    if (target.canUse('sha', current, false)) return get.effect(current, { name: 'sha' }, target, player);
                                                    return 0;
                                                }));
                                                return att + usf;
                                            }
                                            return att;
                                        }
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_zhenge', target);
                                        target.addSkill('hpp_zhenge_effect');
                                        if (target.countMark('hpp_zhenge_effect') < 5) target.addMark('hpp_zhenge_effect', 1, false);
                                        if (!game.hasPlayer(function (current) {
                                            return current != target && !target.inRange(current);
                                        })) {
                                            player.chooseTarget('是否令' + get.translation(target) + '视为对另一名角色使用【杀】？', function (card, player, target) {
                                                return _status.event.source.canUse('sha', target);
                                            }).set('source', target).set('ai', function (target) {
                                                var evt = _status.event;
                                                return get.effect(target, { name: 'sha' }, evt.source, evt.player);
                                            });
                                        }
                                        else {
                                            game.delayx();
                                            event.finish();
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        target.useCard({ name: 'sha', isCard: true }, result.targets[0], false);
                                    }
                                    'step 3'
                                    game.delayx();
                                },
                                subSkill: {
                                    effect: {
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            attackRange: function (player, num) {
                                                return num + player.countMark('hpp_zhenge_effect');
                                            },
                                        },
                                        intro: { content: '攻击范围+#' },
                                    },
                                },
                            },
                            hpp_xinghan: {
                                audio: 'xinghan',
                                init: function (player) {
                                    player.addSkill('hpp_xinghan_count');
                                },
                                onremove: function (player) {
                                    player.removeSkill('hpp_xinghan_count');
                                },
                                trigger: { global: 'damageSource' },
                                forced: true,
                                filter: function (event, player) {
                                    return event.card && event.card == player.storage.hpp_xinghan_temp && event.source && event.source.hasMark('hpp_zhenge_effect');
                                },
                                logTarget: 'source',
                                content: function () {
                                    player.draw(player.isMaxHandcard(true) ? 1 : Math.min(5, trigger.source.getAttackRange()));
                                },
                                subSkill: {
                                    count: {
                                        trigger: { global: 'useCard1' },
                                        forced: true,
                                        charlotte: true,
                                        popup: false,
                                        firstDo: true,
                                        filter: function (event, player) {
                                            return event.card.name == 'sha' && !game.hasPlayer2(function (current) {
                                                return current.hasHistory('useCard', function (evt) {
                                                    return evt != event && evt.card.name == 'sha';
                                                })
                                            });
                                        },
                                        content: function () {
                                            player.addTempSkill('hpp_xinghan_temp');
                                            player.storage.hpp_xinghan_temp = trigger.card;
                                        },
                                    },
                                    temp: { onremove: true },
                                },
                                ai: { combo: 'hpp_zhenge' },
                            },

                            // 魏延
                            hpp_kuanggu: {
                                audio: 'kuanggu',
                                trigger: { source: 'damageSource' },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    event.count = trigger.num;
                                    'step 1'
                                    event.count--;
                                    player.chooseDrawRecover(true);
                                    'step 2'
                                    if (event.count > 0) event.goto(1);
                                },
                            },
                            hpp_qimou: {
                                unique: true,
                                limited: true,
                                audio: 'qimou',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return !player.storage.hpp_qimou;
                                },
                                init: function (player) {
                                    player.storage.hpp_qimou = false;
                                },
                                mark: true,
                                intro: { content: 'limited' },
                                skillAnimation: true,
                                animationColor: 'orange',
                                content: function () {
                                    'step 0'
                                    var shas = player.getCards('h', 'sha');
                                    var num;
                                    if (player.hp >= 4 && shas.length >= 3) {
                                        num = 3;
                                    }
                                    else if (player.hp >= 3 && shas.length >= 2) {
                                        num = 2;
                                    }
                                    else {
                                        num = 1
                                    }
                                    var map = {};
                                    var list = [];
                                    for (var i = 1; i <= player.hp; i++) {
                                        var cn = get.cnNumber(i, true);
                                        map[cn] = i;
                                        list.push(cn);
                                    }
                                    event.map = map;
                                    player.awakenSkill('hpp_qimou');
                                    player.storage.hpp_qimou = true;
                                    player.chooseControl(list, function () {
                                        return get.cnNumber(_status.event.goon, true);
                                    }).set('prompt', '奇谋：选择失去任意点体力').set('goon', num);
                                    'step 1'
                                    var num = event.map[result.control] || 1;
                                    player.storage.hpp_qimou2 = num;
                                    player.loseHp(num);
                                    player.draw();
                                    player.addTempSkill('hpp_qimou2');
                                },
                                ai: {
                                    order: 2,
                                    result: {
                                        player: function (player) {
                                            if (player.hp == 1) return 0;
                                            var shas = player.getCards('h', 'sha');
                                            if (!shas.length) return 0;
                                            var card = shas[0];
                                            if (!lib.filter.cardEnabled(card, player)) return 0;
                                            if (lib.filter.cardUsable(card, player)) return 0;
                                            var mindist;
                                            if (player.hp >= 4 && shas.length >= 3) {
                                                mindist = 4;
                                            }
                                            else if (player.hp >= 3 && shas.length >= 2) {
                                                mindist = 3;
                                            }
                                            else {
                                                mindist = 2;
                                            }
                                            if (game.hasPlayer(function (current) {
                                                return (current.hp <= mindist - 1 &&
                                                    get.distance(player, current, 'attack') <= mindist &&
                                                    player.canUse(card, current, false) &&
                                                    get.effect(current, card, player, player) > 0);
                                            })) {
                                                return 1;
                                            }
                                            return 0;
                                        }
                                    }
                                }
                            },
                            hpp_qimou2: {
                                onremove: true,
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (typeof player.storage.hpp_qimou2 == 'number' && card.name == 'sha') {
                                            return num + player.storage.hpp_qimou2;
                                        }
                                    },
                                    globalFrom: function (from, to, distance) {
                                        if (typeof from.storage.hpp_qimou2 == 'number') {
                                            return distance - from.storage.hpp_qimou2;
                                        }
                                    },
                                },
                            },

                            // 文钦
                            hpp_huiqi: {
                                audio: 'olhuiqi',
                                inherit: 'olhuiqi',
                                derivation: 'hpp_xieju',
                                filter: function (event, player) {
                                    var targets = [];
                                    game.getGlobalHistory('useCard', function (evt) {
                                        if (evt.targets && evt.targets.length) targets.addArray(evt.targets);
                                    });
                                    return targets.includes(player) && targets.length == 3;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_huiqi');
                                    'step 1'
                                    player.recover();
                                    player.addSkillLog('hpp_xieju');
                                },
                            },
                            hpp_xieju: {
                                audio: 'olxieju',
                                inherit: 'olxieju',
                                content: function () {
                                    if (!target.countCards('hes', function (card) {
                                        return get.color(card, target) == 'black' && target.hasUseTarget(get.autoViewAs({ name: 'sha' }, [card]));
                                    })) return;
                                    var next = target.chooseToUse(true);
                                    next.set('openskilldialog', '偕举：将一张黑色牌当做【杀】使用');
                                    next.set('norestore', true);
                                    next.set('addCount', false);
                                    next.set('_backupevent', 'hpp_xieju_backup');
                                    next.set('custom', {
                                        add: {},
                                        replace: { window: function () { } }
                                    });
                                    next.backup('hpp_xieju_backup');
                                },
                                subSkill: {
                                    backup: {
                                        filterCard: function (card, player) {
                                            return get.color(card, player) == 'black';
                                        },
                                        position: 'hes',
                                        viewAs: { name: 'sha' },
                                        filterTarget: lib.filter.filterTarget,
                                        check: function (card) {
                                            return -get.value(card);
                                        },
                                        log: false,
                                        precontent: function () {
                                            delete event.result.skill;
                                        },
                                    },
                                },
                            },

                            // 吴国太
                            hpp_ganlu: {
                                audio: 'ganlu',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var list = [];
                                    if (player.canMoveCard(null, true)) list.push('移动牌');
                                    if (game.hasPlayer(function (current) {
                                        var es = current.getCards('e');
                                        for (var i = 0; i < es.length; i++) {
                                            if (game.hasPlayer(function (current2) {
                                                return current != current2 && !current2.isMin() && !current2.canEquip(es[i]);
                                            })) return true;
                                        }
                                    })) list.push('交换牌');
                                    list.push('摸牌');
                                    list.push('cancel2');
                                    player.chooseControl(list).set('choiceList', [
                                        '移动场上的一张装备牌',
                                        '交换场上装备区中两张副类别相同的装备牌的位置',
                                        '摸一张牌',
                                    ]).set('prompt', '请选择你要执行的选项').set('ai', function () {
                                        var player = _status.event.player;
                                        if (player.canMoveCard(null, true)) return '移动牌';
                                        return '摸牌';
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        switch (result.control) {
                                            case '摸牌':
                                                player.logSkill('hpp_ganlu');
                                                player.draw();
                                                event.finish();
                                                break;
                                            case '移动牌':
                                                player.logSkill('hpp_ganlu');
                                                player.moveCard().nojudge = true;
                                                event.finish();
                                                break;
                                            case '交换牌':
                                                player.chooseCardTarget({
                                                    prompt: '请选择两名角色，交换他们装备区的一张副类别相同的一张牌',
                                                    filterCard: false,
                                                    filterTarget: function (card, player, target) {
                                                        if (!ui.selected.targets.length) {
                                                            for (var i = 1; i < 7; i++) {
                                                                if (game.hasPlayer(function (current) {
                                                                    return current != target && current.getEquips(i).length && target.getEquips(i).length;
                                                                })) return true;
                                                            }
                                                            return false;
                                                        }
                                                        else {
                                                            for (var j = 1; j < 7; j++) {
                                                                if (ui.selected.targets[0].getEquips(j).length && target.getEquips(j).length) return true;
                                                            }
                                                            return false;
                                                        }
                                                    },
                                                    selectTarget: 2,
                                                    forced: true,
                                                });
                                                break;
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    var list = [];
                                    result.targets.sortBySeat();
                                    player.logSkill('hpp_ganlu', result.targets);
                                    for (var i = 1; i < 7; i++) {
                                        if (result.targets[0].getEquips(i).length && result.targets[1].getEquips(i).length) list.push('equip' + i);
                                    }
                                    player.chooseControl(list).set('prompt', '请选择一个装备类别');
                                    event.target1 = result.targets[0];
                                    event.target2 = result.targets[1];
                                    'step 3'
                                    var num = undefined, target1 = event.target1, target2 = event.target2;
                                    for (var i = 1; i < 7; i++) {
                                        if ('equip' + i == result.control) num = i;
                                    }
                                    game.log(player, '令', target1, '和', target2, '交换了' + get.translation(result.control) + '牌');
                                    var card1 = target1.getEquips(num), card2 = target2.getEquips(num);
                                    target1.discard(card1);
                                    target2.discard(card2);
                                    target1.lose(card1, ui.ordering, 'visible');
                                    target2.lose(card2, ui.ordering, 'visible');
                                    target1.$give(card1, target2, false);
                                    target2.$give(card2, target1, false);
                                    target1.equip(card2);
                                    target2.equip(card1);
                                },
                            },
                            hpp_buyi: {
                                audio: 'buyi',
                                trigger: { global: 'dying' },
                                usable: 3,
                                filter: function (event, player) {
                                    return event.player.hp <= 0 && event.player.countCards('h');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var check;
                                    if (trigger.player.isUnderControl(true, player)) {
                                        check = player.hasCard(function (card) {
                                            return get.type(card) == 'basic';
                                        });
                                    }
                                    else check = (get.attitude(player, trigger.player) > 0);
                                    player.choosePlayerCard(trigger.player, get.prompt('hpp_buyi', trigger.player), 'h').set('ai', function (button) {
                                        if (!_status.event.check) return 0;
                                        if (_status.event.target.isUnderControl(true, _status.event.player)) {
                                            if (get.type(button.link) == 'basic') {
                                                return 10 - get.value(button.link);
                                            }
                                            return 0;
                                        }
                                        else return Math.random();
                                    }).set('check', check).set('filterButton', function (button) {
                                        if (_status.event.player == _status.event.target) {
                                            return lib.filter.cardDiscardable(button.link, _status.event.player);
                                        }
                                        return true;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_buyi', trigger.player);
                                        event.card = result.links[0];
                                        player.showCards([event.card], get.translation(player) + '展示的手牌');
                                    }
                                    else {
                                        player.storage.counttrigger.hpp_buyi--;
                                        event.finish();
                                    }
                                    'step 2'
                                    if (get.type(event.card) == 'basic') {
                                        trigger.player.discard(event.card);
                                        trigger.player.recover();
                                    }
                                },
                            },

                            // 吴苋
                            hpp_fumian: {
                                audio: 'fumian',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    if (player.storage.hpp_fumian_choice == 'draw') {
                                        player.chooseControlList(get.prompt('hpp_fumian'), '摸牌阶段多摸一张牌', '使用红色牌可以多选择两个目标', function (event, player) {
                                            if (player.hp == 1 || player.countCards('h') <= 1) return 0;
                                            return 1;
                                        });
                                    }
                                    else if (player.storage.hpp_fumian_choice == 'red') {
                                        player.chooseControlList(get.prompt('hpp_fumian'), '摸牌阶段多摸两张牌', '使用红色牌可以多选择一个目标', function (event, player) {
                                            return 0;
                                        });
                                    }
                                    else {
                                        player.chooseControlList(get.prompt('hpp_fumian'), '摸牌阶段多摸一张牌', '使用红色牌可以多选择一个目标', function (event, player) {
                                            if (player.hp == 1 || player.countCards('h') < player.hp) return 0;
                                            return 1;
                                        });
                                    }
                                    'step 1'
                                    if (player.storage.hpp_fumian_choice == 'draw') {
                                        if (result.index == 0) player.storage.hpp_fumian_draw = 1;
                                        else if (result.index == 1) {
                                            player.storage.hpp_fumian_red = 2;
                                            delete player.storage.hpp_fumian_choice;
                                        }
                                    }
                                    else if (player.storage.hpp_fumian_choice == 'red') {
                                        if (result.index == 0) {
                                            player.storage.hpp_fumian_draw = 2;
                                            delete player.storage.hpp_fumian_choice;
                                        }
                                        else if (result.index == 1) player.storage.hpp_fumian_red = 1;
                                    }
                                    else {
                                        if (result.index == 0) {
                                            player.storage.hpp_fumian_draw = 1;
                                            player.storage.hpp_fumian_choice = 'draw';
                                        }
                                        else if (result.index == 1) {
                                            player.storage.hpp_fumian_red = 1;
                                            player.storage.hpp_fumian_choice = 'red';
                                        }
                                    }
                                    if (result.index == 0) {
                                        player.logSkill('hpp_fumian');
                                        player.addTempSkill('hpp_fumian_draw');
                                    }
                                    else if (result.index == 1) {
                                        player.logSkill('hpp_fumian');
                                        player.addTempSkill('hpp_fumian_red');
                                    }
                                },
                                subSkill: {
                                    draw: {
                                        trigger: { player: 'phaseDrawBegin2' },
                                        forced: true,
                                        popup: false,
                                        onremove: true,
                                        filter: function (event, player) {
                                            return typeof player.storage.hpp_fumian_draw == 'number' && !event.numFixed;
                                        },
                                        content: function () {
                                            trigger.num += player.storage.hpp_fumian_draw;
                                        },
                                    },
                                    red: {
                                        trigger: { player: 'useCard2' },
                                        direct: true,
                                        mark: true,
                                        onremove: true,
                                        intro: { content: '使用红色牌可以多选择#个目标' },
                                        filter: function (event, player) {
                                            if (get.color(event.card) != 'red') return false;
                                            var info = get.info(event.card);
                                            if (info.allowMultiple == false) return false;
                                            if (event.targets && !info.multitarget) {
                                                if (game.hasPlayer(function (current) {
                                                    return lib.filter.targetEnabled2(event.card, player, current) && !event.targets.includes(current);
                                                })) return true;
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            'step 0'
                                            var prompt2 = '额外指定';
                                            if (player.storage.hpp_fumian_red == 2) prompt2 += '至多两';
                                            else prompt2 += '一';
                                            prompt2 += '名' + get.translation(trigger.card) + '的目标'
                                            player.chooseTarget([1, player.storage.hpp_fumian_red], get.prompt('hpp_fumian'), function (card, player, target) {
                                                var player = _status.event.player;
                                                if (_status.event.targets.includes(target)) return false;
                                                return lib.filter.targetEnabled2(_status.event.card, player, target);
                                            }).set('prompt2', prompt2).set('ai', function (target) {
                                                var trigger = _status.event.getTrigger();
                                                var player = _status.event.player;
                                                return get.effect(target, trigger.card, player, player);
                                            }).set('targets', trigger.targets).set('card', trigger.card);
                                            'step 1'
                                            if (result.bool) {
                                                if (!event.isMine()) game.delayx();
                                                event.targets = result.targets;
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (event.targets) {
                                                player.logSkill('hpp_fumian', event.targets);
                                                trigger.targets.addArray(event.targets);
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_daiyan: {
                                init: function (player) {
                                    game.addGlobalSkill('bolliaoyi_check');
                                },
                                getList: function (player) {
                                    var list = [], history = player.actionHistory;
                                    for (var i = history.length - 2; i >= 0; i--) {
                                        if (history[i].isSkipped) continue;
                                        if (history[i].isMe) {
                                            for (var evt of history[i].useSkill) {
                                                if (evt.skill == 'hpp_daiyan') list.addArray(evt.targets);
                                            }
                                            break;
                                        }
                                    }
                                    return list;
                                },
                                audio: 'daiyan',
                                trigger: { player: 'phaseJieshuBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var str = '', list = lib.skill.hpp_daiyan.getList(player);
                                    if (list.length) str += '（上回合对' + get.translation(list) + '发动过此技能）';
                                    player.chooseTarget(get.prompt('hpp_daiyan') + str, lib.translate.hpp_daiyan_info).set('ai', function (target) {
                                        var player = _status.event.player, list = lib.skill.hpp_daiyan.getList(player);
                                        return get.attitude(player, target) * (list.includes(target) ? 1 : 3);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_daiyan', target);
                                        var tao = get.cardPile2(function (card) {
                                            return get.suit(card) == 'heart' && get.type(card) == 'basic';
                                        });
                                        if (tao) target.gain(tao, 'gain2');
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (!lib.skill.hpp_daiyan.getList(player).includes(target)) player.draw();
                                },
                            },

                            // 夏侯霸
                            hpp_baobian: {
                                derivation: ['hpp_tiaoxin', 'new_repaoxiao', 'hpp_shensu'],
                                audio: 'baobian',
                                trigger: { player: 'damageEnd' },
                                filter: function (event, player) {
                                    for (var i of lib.skill.hpp_baobian.derivation) {
                                        if (!player.hasSkill(i, null, null, false)) return true;
                                    }
                                    return false;
                                },
                                forced: true,
                                content: function () {
                                    for (var i of lib.skill.hpp_baobian.derivation) {
                                        if (!player.hasSkill(i, null, null, false)) {
                                            player.addSkillLog(i);
                                            break;
                                        }
                                    }
                                },
                                ai: {
                                    maixie: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'damage') && !target.hasSkill('hpp_tiaoxin', null, null, false)) {
                                                if (!target.hasFriend()) return;
                                                if (target.hp >= 4) return [0, 1];
                                            }
                                        },
                                    },
                                },
                            },

                            // 夏侯惇
                            hpp_qingjian: {
                                audio: 'qingjian',
                                trigger: { player: 'gainAfter' },
                                direct: true,
                                usable: 1,
                                filter: function (event, player) {
                                    if (event.parent.parent.name == 'phaseDraw') return false;
                                    return event.cards && event.cards.length > 0
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseCardTarget({
                                        position: 'he',
                                        filterCard: true,
                                        selectCard: [1, Infinity],
                                        filterTarget: lib.filter.notMe,
                                        ai1: function (card) {
                                            if (get.attitude(_status.event.player, _status.currentPhase) < 0 && _status.currentPhase.needsToDiscard() && card.name != 'du') return -1;
                                            for (var i = 0; i < ui.selected.cards.length; i++) {
                                                if (get.type(ui.selected.cards[i]) == get.type(card) || (ui.selected.cards[i].name == 'du' && card.name != 'du')) return -1;
                                            };
                                            if (card.name == 'du') return 20;
                                            return (_status.event.player.countCards('h') - _status.event.player.hp);
                                        },
                                        ai2: function (target) {
                                            if (get.attitude(_status.event.player, _status.currentPhase) < 0) return -1;
                                            var att = get.attitude(_status.event.player, target);
                                            if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {
                                                if (target.hasSkillTag('nodu')) return 0;
                                                return 1 - att;
                                            }
                                            if (target.countCards('h') > _status.event.player.countCards('h')) return 0;
                                            return att - 4;
                                        },
                                        prompt: get.prompt2('hpp_qingjian'),
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0], cards = result.cards;
                                        player.logSkill('hpp_qingjian', target);
                                        target.gain(cards, player, 'giveAuto');
                                        player.draw();
                                    }
                                    else player.storage.counttrigger.hpp_qingjian--;
                                },
                                ai: { expose: 0.3 },
                            },

                            // 夏侯杰
                            hpp_liedan: {
                                audio: 'liedan',
                                trigger: { global: 'phaseZhunbeiBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return (player != event.player || player.countMark('hpp_liedan') >= 5) && !player.hasSkill('hpp_zhuangdan_mark');
                                },
                                logTarget: 'player',
                                content: function () {
                                    if (player == trigger.player) {
                                        player.die();
                                        return;
                                    }
                                    var num = 0;
                                    if (player.hp > trigger.player.hp) num++;
                                    if (player.countCards('h') > trigger.player.countCards('h')) num++;
                                    if (player.countCards('e') > trigger.player.countCards('e')) num++;
                                    if (num) {
                                        player.draw(num);
                                        if (num == 3 && player.maxHp < 8) player.gainMaxHp();
                                    }
                                    else {
                                        player.addMark('hpp_liedan', 1);
                                        player.loseHp();
                                    }
                                },
                                intro: { content: 'mark' },
                            },
                            hpp_zhuangdan: {
                                audio: 'zhuangdan',
                                trigger: { global: 'phaseEnd' },
                                forced: true,
                                filter: function (event, player) {
                                    return player != event.player && player.isMaxHandcard(true);
                                },
                                content: function () {
                                    player.addTempSkill('hpp_zhuangdan_mark', { player: 'phaseEnd' })
                                },
                            },
                            hpp_zhuangdan_mark: {
                                mark: true,
                                marktext: '胆',
                                intro: { content: '【裂胆】失效直到你的回合结束' },
                            },

                            // 夏侯令女
                            hpp_weilie: {
                                audio: 'weilie',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countMark('hpp_weilie') <= player.getStorage('fuping').length && player.countCards('he') && game.hasPlayer(function (current) {
                                        return lib.skill.hpp_weilie.filterTarget(null, player, current);
                                    });
                                },
                                filterCard: true,
                                position: 'he',
                                filterTarget: function (card, player, target) {
                                    return target.isDamaged();
                                },
                                check: function (card) {
                                    return 8 - get.value(card);
                                },
                                content: function () {
                                    player.addMark('hpp_weilie', 1, false);
                                    target.recover();
                                    target.draw();
                                },
                                onremove: true,
                                ai: {
                                    order: 1,
                                    result: {
                                        player: function (player, target) {
                                            var eff = get.recoverEffect(target, player, player);
                                            if (target.getDamagedHp() > 1) eff += get.effect(target, { name: 'wuzhong' }, player, player) / 2;
                                            return eff;
                                        },
                                    },
                                },
                            },

                            // 夏侯氏
                            hpp_qiaoshi: {
                                audio: 'qiaoshi',
                                inherit: 'qiaoshi',
                                filter: function (event, player) {
                                    return event.player != player && event.player.countCards('h') >= player.countCards('h') && event.player.isIn();
                                },
                            },
                            hpp_yanyu: {
                                group: 'hpp_yanyu2',
                                audio: 'yanyu',
                                inherit: 'yanyu',
                            },
                            hpp_yanyu2: {
                                trigger: { player: 'phaseEnd' },
                                filter: function (event, player) {
                                    return player.getHistory('useSkill', evt => evt.skill == 'hpp_yanyu').length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_yanyu'), '令一名角色摸两张牌（若该角色为你则改为摸一张牌）').set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.attitude(player, target) * (target == player ? 0.7 : 1);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_yanyu', target);
                                        target.draw(target == player ? 1 : 2);
                                    }
                                },
                            },

                            // 夏侯渊
                            shensu1_ol_xiahouyuan: { audio: 2 },
                            shensu1_xiahouba: { audio: 2 },
                            hpp_shensu: {
                                audio: 'shensu1',
                                audioname2: {
                                    hpp_xiahouyuan: 'shensu1_ol_xiahouyuan',
                                    hpp_xiahouba: 'shensu1_xiahouba',
                                },
                                trigger: { player: ['phaseJudgeBefore', 'phaseUseBefore', 'phaseDiscardBefore'] },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var check;
                                    switch (event.triggername) {
                                        case 'phaseJudgeBefore': check = player.countCards('h') > 2; break;
                                        case 'phaseUseBefore': check = player.needsToDiscard(); break;
                                        case 'phaseDiscardBefore': check = player.needsToDiscard() || player.isTurnedOver() || (player.hasSkill('shebian') && player.canMoveCard(true, true)); break;
                                    }
                                    var str = ['判定阶段和摸牌', '出牌', '弃牌'][lib.skill.hpp_shensu.trigger.player.indexOf(event.triggername)];
                                    player.chooseTarget(get.prompt('hpp_shensu'), '跳过' + str + '阶段并视为对一名其他角色使用一张【杀】', function (card, player, target) {
                                        if (player == target) return false;
                                        return player.canUse({ name: 'sha', nature: 'thunder', isCard: true }, target, false);
                                    }).set('check', check).set('ai', function (target) {
                                        if (!_status.event.check) return 0;
                                        return get.effect(target, { name: 'sha', nature: 'thunder', isCard: true }, _status.event.player);
                                    }).setHiddenSkill('hpp_shensu');
                                    'step 1'
                                    if (result.bool) {
                                        trigger.cancel();
                                        if (event.triggername == 'phaseJudgeBefore') player.skip('phaseDraw');
                                        player.logSkill('hpp_shensu', result.targets);
                                        if (event.triggername == 'phaseDiscardBefore') player.turnOver();
                                        player.useCard({ name: 'sha', nature: 'thunder', isCard: true }, result.targets[0], false).audio = false;
                                    }
                                },
                            },
                            hpp_shebian: {
                                audio: 'shebian',
                                trigger: { player: 'turnOverEnd' },
                                check: function (event, player) {
                                    return player.canMoveCard(true, true);
                                },
                                filter: function (event, player) {
                                    return player.canMoveCard(null, true);
                                },
                                content: function () {
                                    'step 0'
                                    player.moveCard().nojudge = true;
                                    'step 1'
                                    player.recover();
                                },
                            },

                            // 小乔
                            hpp_tianxiang: {
                                audio: 'tianxiang',
                                trigger: { player: 'damageBegin3' },
                                filter: function (event, player) {
                                    return player.countCards('h', { suit: 'heart' }) && event.num > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCardTarget({
                                        filterCard: function (card, player) {
                                            return get.suit(card) == 'heart' && lib.filter.cardDiscardable(card, player);
                                        },
                                        filterTarget: lib.filter.notMe,
                                        ai1: function (card) {
                                            return 10 - get.value(card);
                                        },
                                        ai2: function (target) {
                                            var att = get.attitude(_status.event.player, target);
                                            return -att;
                                        },
                                        prompt: get.prompt2('hpp_tianxiang')
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_tianxiang', target);
                                        player.discard(result.cards[0]);
                                        player.addTempSkill('hpp_tianxiang2');
                                        trigger.cancel();
                                        target.damage(trigger.source ? trigger.source : 'nosource', trigger.nature, trigger.num).set('card', trigger.card).set('cards', trigger.cards).hpp_tianxiang2 = [player];
                                    }
                                },
                                ai: {
                                    maixie_defend: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player.hasSkillTag('jueqing', false, target)) return;
                                            if (get.tag(card, 'damage') && target.countCards('h') > 1) return 0.7;
                                        },
                                    },
                                    threaten: function (player, target) {
                                        if (!target.countCards('h')) return 2;
                                    },
                                },
                            },
                            hpp_tianxiang2: {
                                charlotte: true,
                                trigger: { global: ['damageAfter', 'damageCancelled', 'damageZero'] },
                                filter: function (event, player) {
                                    return event.hpp_tianxiang2 && event.hpp_tianxiang2.contains(player) && event.player.isIn();
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var target = trigger.player;
                                    event.target = target;
                                    player.chooseControl().set('choiceList', [
                                        '令' + get.translation(target) + '摸一张牌',
                                        '令' + get.translation(target) + '摸' + get.cnNumber(Math.min(5, target.getDamagedHp())) + '张牌']).set('ai', function () {
                                            return (get.attitude(player, target) > 0 && target.isDamaged()) ? 1 : 0;
                                        });
                                    'step 1'
                                    player.line(target);
                                    target.draw(result.index == 0 ? 1 : Math.min(5, target.getDamagedHp()));
                                },
                            },
                            hpp_hongyan: {
                                audio: 'rehongyan',
                                forced: true,
                                mod: {
                                    suit: function (card, suit) {
                                        if (suit == 'spade') return 'heart';
                                    },
                                    maxHandcardBase: function (player, num) {
                                        if (player.countCards('e', function (card) {
                                            return get.suit(card, player) == 'heart';
                                        })) return player.maxHp;
                                    },
                                },
                            },

                            // 辛宪英
                            hpp_zhongjian: {
                                enable: 'phaseUse',
                                audio: 'zhongjian',
                                usable: 2,
                                filter: function (event, player) {
                                    if (player.getStat().skill.hpp_zhongjian && !player.hasSkill('recaishi2')) return false;
                                    return game.hasPlayer(function (current) {
                                        return lib.skill.hpp_zhongjian.filterTarget(null, player, current);
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    if (!player.storage.rezhongjian2) return true;
                                    return !player.storage.rezhongjian2[0].contains(target) && !player.storage.rezhongjian2[1].contains(target);
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseControl().set('prompt', '忠鉴：为' + get.translation(target) + '选择获得一项效果').set('choiceList', [
                                        '该角色下次造成伤害后弃置两张牌',
                                        '该角色下次受到伤害后摸两张牌',
                                    ]).set('ai', function () {
                                        return get.attitude(_status.event.player, _status.event.getParent().target) > 0 ? 1 : 0;
                                    });
                                    'step 1'
                                    player.addSkill('rezhongjian2');
                                    var str = ['造成伤害弃牌', '受到伤害摸牌'][result.index];
                                    player.popup(str, ['fire', 'wood'][result.index]);
                                    game.log(player, '选择了', '#y' + str)
                                    player.storage.rezhongjian2[result.index].push(target);
                                    player.markSkill('rezhongjian2');
                                },
                                ai: {
                                    order: 10,
                                    expose: 0,
                                    result: {
                                        player: function (player, target) {
                                            if (get.attitude(player, target) == 0) return false;
                                            var sgn = get.sgn((get.realAttitude || get.attitude)(player, target));
                                            if (game.countPlayer(function (current) {
                                                return get.sgn((get.realAttitude || get.attitude)(player, current)) == sgn;
                                            }) <= game.countPlayer(function (current) {
                                                return get.sgn((get.realAttitude || get.attitude)(player, current)) != sgn;
                                            })) return 1;
                                            return 0.9;
                                        },
                                    },
                                },
                            },
                            hpp_caishi: {
                                trigger: { player: 'phaseDrawEnd' },
                                direct: true,
                                isSame: function (event) {
                                    var cards = [];
                                    event.player.getHistory('gain', function (evt) {
                                        if (evt.getParent().name == 'draw' && evt.getParent('phaseDraw') == event) cards.addArray(evt.cards);
                                    });
                                    if (!cards.length) return 'nogain';
                                    var list = [];
                                    for (var i = 0; i < cards.length; i++) {
                                        list.add(get.suit(cards[i]));
                                    }
                                    if (list.length == 1) return true;
                                    if (list.length == cards.length) return false;
                                    return 'nogain';
                                },
                                filter: function (event, player) {
                                    var isSame = lib.skill.hpp_caishi.isSame(event);
                                    if (isSame == 'nogain') return false;
                                    return (isSame && !player.hasSkill('recaishi2')) || player.isDamaged();
                                },
                                content: function () {
                                    'step 0'
                                    if (lib.skill.hpp_caishi.isSame(trigger)) {
                                        if (!player.hasSkill('recaishi2')) {
                                            player.logSkill('hpp_caishi');
                                            player.addTempSkill('recaishi2');
                                            lib.skill.recaishi2.charlotte = true;
                                            game.log(player, '修改了技能', '#g【忠鉴】');
                                            event.finish();
                                            return;
                                        }
                                    }
                                    else if (player.isDamaged()) player.chooseToDiscard(get.prompt('hpp_caishi'), '弃置一张牌并回复1点体力').set('ai', function (card) {
                                        return 7 - get.value(card);
                                    }).logSkill = 'hpp_caishi';
                                    else event.finish();
                                    'step 1'
                                    if (result.bool) player.recover();
                                },
                            },

                            // 戏志才
                            hpp_chouce: {
                                audio: 'chouce',
                                trigger: { player: 'damageEnd' },
                                content: function () {
                                    'step 0'
                                    event.num = trigger.num;
                                    'step 1'
                                    player.judge();
                                    'step 2'
                                    event.color = result.color;
                                    if (event.color == 'black') {
                                        player.chooseTarget('获得一名角色区域内的一张牌', function (card, player, target) {
                                            return target.countCards('hej');
                                        }).set('ai', function (target) {
                                            var player = _status.event.player;
                                            var att = get.attitude(player, target);
                                            if (att < 0) att = -Math.sqrt(-att);
                                            else att = Math.sqrt(att);
                                            return att * lib.card.shunshou.ai.result.target(player, target);
                                        });
                                    }
                                    else {
                                        var next = player.chooseTarget('令一名角色摸一张牌');
                                        if (player.storage.xianfu2 && player.storage.xianfu2.length) {
                                            next.set('prompt2', '（若目标为' + get.translation(player.storage.xianfu2) + '则改为摸两张牌）');
                                        }
                                        next.set('ai', function (target) {
                                            var player = _status.event.player;
                                            var att = get.attitude(player, target) / Math.sqrt(1 + target.countCards('h'));
                                            if (target.hasSkillTag('nogain')) att /= 10;
                                            if (player.storage.xianfu2 && player.storage.xianfu2.contains(target)) return att * 2;
                                            return att;
                                        })
                                    }
                                    'step 3'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'green');
                                        if (event.color == 'black') player.gainPlayerCard(target, 'hej', true);
                                        else {
                                            if (player.storage.xianfu2 && player.storage.xianfu2.contains(target)) {
                                                if (!target.storage.xianfu_mark) target.storage.xianfu_mark = [];
                                                target.storage.xianfu_mark.add(player);
                                                target.storage.xianfu_mark.sortBySeat();
                                                target.markSkill('xianfu_mark');
                                                target.draw(2);
                                            }
                                            else target.draw();
                                        }
                                    }
                                    'step 4'
                                    if (--event.num > 0) player.chooseBool(get.prompt2('hpp_chouce'));
                                    else event.finish();
                                    'step 5'
                                    if (result.bool) {
                                        player.logSkill('hpp_chouce');
                                        event.goto(1);
                                    }
                                },
                                ai: {
                                    maixie: true,
                                    maixie_hp: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'damage')) {
                                                if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                if (!target.hasFriend()) return;
                                                if (target.hp >= 4) return [1, get.tag(card, 'damage') * 1.5];
                                                if (target.hp == 3) return [1, get.tag(card, 'damage') * 1];
                                                if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                            }
                                        },
                                    },
                                },
                            },

                            // 徐晃
                            hpp_duanliang: {
                                audio: 'duanliang1',
                                group: ['hpp_duanliang1', 'hpp_duanliang3'],
                                ai: {
                                    threaten: 1.2
                                }
                            },
                            hpp_duanliang1: {
                                audio: 'duanliang1',
                                audioname: ['re_xuhuang'],
                                enable: 'chooseToUse',
                                filterCard: function (card) {
                                    if (get.type(card) != 'basic' && get.type(card) != 'equip') return false;
                                    return get.color(card) == 'black';
                                },
                                filter: function (event, player) {
                                    return player.countCards('hes', { type: ['basic', 'equip'], color: 'black' })
                                },
                                position: 'hes',
                                viewAs: { name: 'bingliang' },
                                prompt: '将一黑色的基本牌或装备牌当兵粮寸断使用',
                                check: function (card) { return 6 - get.value(card) },
                                ai: {
                                    order: 9
                                }
                            },
                            hpp_duanliang2: {
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (card.name == 'bingliang') {
                                            if (get.distance(player, target) <= 2) return true;
                                        }
                                    }
                                }
                            },
                            hpp_duanliang3: {
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (card.name == 'bingliang') {
                                            if (target.countCards('h') >= player.countCards('h')) return true;
                                        }
                                    }
                                }
                            },
                            hpp_jiezi: {
                                audio: 'jiezi',
                                trigger: { global: ['phaseDrawSkipped', 'phaseDrawCancelled'] },
                                filter: function (event, player) {
                                    return event.player != player && player.countMark('hpp_jiezi_silent') < 2;
                                },
                                forced: true,
                                logTarget: 'player',
                                content: function () {
                                    player.addTempSkill('hpp_jiezi_silent', 'roundStart');
                                    player.addMark('hpp_jiezi_silent', 1, false);
                                    player.draw(2);
                                },
                                subSkill: { silent: { onremove: true, charlotte: true } },
                            },

                            // 荀攸
                            hpp_qice: {
                                audio: 'qice_backup',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('hs');
                                },
                                usable: 1,
                                chooseButton: {
                                    dialog: function (player) {
                                        var list = [];
                                        for (var i = 0; i < lib.inpile.length; i++) {
                                            if (get.type(lib.inpile[i]) == 'trick') list.push(['锦囊', '', lib.inpile[i]]);
                                        }
                                        return ui.create.dialog(get.translation('hpp_qice'), [list, 'vcard']);
                                    },
                                    filter: function (button, player) {
                                        return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                                    },
                                    check: function (button) {
                                        var player = _status.event.player;
                                        return player.getUseValue({ name: button.link[2] });
                                    },
                                    backup: function (links, player) {
                                        return {
                                            audio: 'qice_backup',
                                            filterCard: true,
                                            selectCard: [1, Infinity],
                                            check: function (card) {
                                                if (ui.selected.cards.length) return -1;
                                                return 7 - get.value(card);
                                            },
                                            complexCard: true,
                                            position: 'hs',
                                            popname: true,
                                            viewAs: { name: links[0][2] },
                                        }
                                    },
                                    prompt: function (links, player) {
                                        return '将任意张手牌当作' + get.translation(links[0][2]) + '使用';
                                    }
                                },
                                ai: {
                                    order: 1,
                                    result: { player: 1 },
                                },
                            },
                            hpp_zhiyu: {
                                audio: 'zhiyu',
                                trigger: { player: 'damageEnd' },
                                preHidden: true,
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    player.draw(2);
                                    'step 1'
                                    var att = undefined;
                                    if (trigger.source && trigger.source.countCards('h') > player.countCards('h') - 1) att = get.attitude(player, trigger.source);
                                    if (!player.countCards('h')) event.finish();
                                    else player.chooseToDiscard('he', true).set('ai', function (card) {
                                        var list = [0, 0];
                                        for (var i of player.getCards('h')) {
                                            list[get.color(card) == 'red' ? 0 : 1]++;
                                        }
                                        if (typeof att == 'number') {
                                            if (att < 0) {
                                                if (get.color(card) == 'red' && list[0] == 1) return 10 - get.value(card);
                                                if (get.color(card) == 'black' && list[1] == 1) return 10 - get.value(card);
                                            }
                                        }
                                        return -get.value(card);
                                    });
                                    'step 2'
                                    if (player.countCards('h')) player.showHandcards();
                                    if (!trigger.source) event.finish();
                                    'step 3'
                                    var stop = false;
                                    var cards = player.getCards('h');
                                    if (cards.length) {
                                        var color = get.color(cards[0], player);
                                        for (var i = 1; i < cards.length; i++) {
                                            if (get.color(cards[i], player) != color) {
                                                stop = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (trigger.source.countCards('h') <= player.countCards('h')) stop = true;
                                    if (stop) event.finish();
                                    else player.chooseBool('智愚：是否令' + get.translation(trigger.source) + '将手牌数弃置至' + get.cnNumber(player.countCards('h')) + '张')
                                    'step 4'
                                    if (result.bool) {
                                        player.line(trigger.source);
                                        trigger.source.chooseToDiscard(trigger.source.countCards('h') - player.countCards('h'), true);
                                    }
                                },
                                ai: {
                                    maixie_defend: true,
                                    threaten: 0.7,
                                },
                            },

                            // 荀彧
                            hpp_quhu: {
                                audio: 'quhu',
                                enable: 'phaseUse',
                                usable: 1,
                                chooseButton: {
                                    dialog: function (event, player) {
                                        var list = [
                                            '弃置两张手牌，对一名其他角色造成1点伤害',
                                            '对自己造成1点伤害，然后摸一张牌',
                                        ];
                                        var choiceList = ui.create.dialog('驱虎：请选择一项', 'forcebutton', 'hidden');
                                        for (var i = 0; i < list.length; i++) {
                                            var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                            var bool = lib.skill.hpp_quhu.chooseButton.filter({ link: i }, player);
                                            if (!bool) str += '<div style="opacity:0.5">';
                                            str += list[i];
                                            if (!bool) str += '</div>';
                                            str += '</div>';
                                            var next = choiceList.add(str);
                                            next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                            next.firstChild.link = i;
                                            for (var j in lib.element.button) {
                                                next[j] = lib.element.button[j];
                                            }
                                            choiceList.buttons.add(next.firstChild);
                                        }
                                        return choiceList;
                                    },
                                    filter: function (button, player) {
                                        return true;
                                    },
                                    check: function (button) {
                                        var player = _status.event.player;
                                        if (game.hasPlayer([
                                            function (target) {
                                                return get.damageEffect(target, player, player) > 0;
                                            },
                                            function (target) {
                                                if (!target.hasSkill('jieming') && !target.hasSkill('hpp_jieming')) return 0;
                                                return target.hp > 2 && game.hasPlayer(function (current) {
                                                    return get.attitude(current, player) > 0 && current.countCards('h') < current.maxHp - 1;
                                                });
                                            },
                                        ][button.link])) return 1 + button.link;
                                        return 0;
                                    },
                                    backup: function (links) {
                                        return {
                                            audio: 'quhu',
                                            filterTarget: [
                                                function (card, player, target) {
                                                    return target != player;
                                                },
                                                function (card, player, target) {
                                                    return target == player;
                                                },
                                            ][links[0]],
                                            index: links[0],
                                            filterCard: true,
                                            selectCard: [2, 0][links[0]],
                                            check: function (card) {
                                                return 7 - get.value(card);
                                            },
                                            position: 'h',
                                            content: function () {
                                                target.damage('nocard');
                                                if (target == player) player.draw();
                                            },
                                            ai: {
                                                order: 7,
                                                tag: { damage: 1.5 },
                                                result: { target: -1 },
                                            },
                                        }
                                    },
                                    prompt: function (links) {
                                        if (links[0] == 0) return '弃置两张手牌，对一名其他角色造成1点伤害';
                                        return '对自己造成1点伤害，然后摸一张牌';
                                    },
                                },
                                ai: {
                                    order: 7,
                                    result: { player: 1 },
                                },
                            },
                            hpp_jieming: {
                                audio: 'jieming',
                                trigger: { player: 'damageEnd' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    event.count = trigger.num;
                                    'step 1'
                                    event.count--;
                                    player.chooseTarget(get.prompt2('hpp_jieming')).set('ai', function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (target.countCards('h') >= Math.min(target.maxHp, 4)) return -1;
                                        if (target.hasSkillTag('nogain')) att /= 6;
                                        if (att > 0) return Math.min(4, target.maxHp) - target.countCards('h');
                                        return -1;
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_jieming', target);
                                        target.drawTo(Math.min(4, target.maxHp));
                                    }
                                    else event.finish();
                                    'step 3'
                                    if (event.count > 0) event.goto(1);
                                },
                                ai: {
                                    maixie: true,
                                    maixie_hp: true,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'damage') && target.hp > 1) {
                                                if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                var max = 0;
                                                var players = game.filterPlayer();
                                                for (var i = 0; i < players.length; i++) {
                                                    if (get.attitude(target, players[i]) > 0) {
                                                        max = Math.max(Math.min(4, players[i].hp) - players[i].countCards('h'), max);
                                                    }
                                                }
                                                switch (max) {
                                                    case 0: return 2;
                                                    case 1: return 1.5;
                                                    case 2: return [1, 2];
                                                    default: return [0, max];
                                                }
                                            }
                                            if ((card.name == 'tao' || card.name == 'caoyao') &&
                                                target.hp > 1 && target.countCards('h') <= target.hp) return [0, 0];
                                        },
                                    },
                                },
                            },

                            // 徐盛
                            hpp_pojun: {
                                shaRelated: true,
                                audio: 'decadepojun',
                                trigger: { player: 'useCardToPlayered' },
                                direct: true,
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && event.target.hp > 0 && event.target.countCards('he');
                                },
                                content: function () {
                                    'step 0'
                                    var next = player.choosePlayerCard(trigger.target, 'he', [1, Math.min(trigger.target.hp, trigger.target.countCards('he'))], get.prompt('hpp_pojun', trigger.target));
                                    next.set('ai', function (button) {
                                        if (!_status.event.goon) return 0;
                                        var val = get.value(button.link);
                                        if (button.link == _status.event.target.getEquip(2)) return 2 * (val + 3);
                                        return val;
                                    });
                                    next.set('goon', get.attitude(player, trigger.target) <= 0);
                                    next.set('forceAuto', true);
                                    'step 1'
                                    if (result.bool) {
                                        event.cards = result.cards;
                                        var target = trigger.target;
                                        player.logSkill('hpp_pojun', trigger.target);
                                        target.addSkill('hpp_pojun2');
                                        target.addToExpansion(result.cards, 'giveAuto', target).gaintag.add('hpp_pojun2');
                                        // game.cardsGotoSpecial(event.cards);
                                        // target.storage.hpp_pojun_cards.addArray(event.cards);
                                        game.log(player, '将', event.cards, '移出了游戏');
                                    }
                                    else event.finish();
                                    'step 2'
                                    var discard = false, draw = false;
                                    for (var i of cards) {
                                        var type = get.type2(i);
                                        if (type == 'equip') discard = true;
                                        if (i.name == 'shan') draw = true;
                                    }
                                    if (discard) {
                                        event.equip = true;
                                        player.chooseButton(['选择一张装备牌置入弃牌堆', cards.filter(function (card) {
                                            return get.type(card) == 'equip';
                                        })], true).set('ai', function (button) {
                                            return get.value(button.link, _status.event.getTrigger().target);
                                        });
                                    }
                                    if (draw) event.draw = true;
                                    'step 3'
                                    if (event.equip && result.links && result.links.length) trigger.target.loseToDiscardpile(result.links);
                                    if (event.draw) player.draw();
                                },
                                ai: {
                                    unequip_ai: true,
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (get.attitude(player, arg.target) > 0) return false;
                                        if (tag == 'directHit_ai') return arg.target.hp >= Math.max(1, arg.target.countCards('h') - 1);
                                        if (arg && arg.name == 'sha' && arg.target.getEquip(2)) return true;
                                        return false;
                                    }
                                },
                            },
                            hpp_pojun2: {
                                trigger: { global: 'phaseEnd' },
                                forced: true,
                                popup: false,
                                charlotte: true,
                                // init: function (player) {
                                //     if (!player.storage.hpp_pojun_cards) player.storage.hpp_pojun_cards = [];
                                // },
                                filter: function (event, player) {
                                    return player.getExpansions('hpp_pojun2').length > 0;
                                    // return player.storage.hpp_pojun_cards.length;
                                },
                                content: function () {
                                    'step 0'
                                    var cards = player.getExpansions('hpp_pojun2');
                                    // var cards = player.storage.hpp_pojun_cards;
                                    player.gain(cards, 'draw');
                                    game.log(player, '收回了' + get.cnNumber(cards.length) + '张〖破军〗牌');
                                    'step 1'
                                    player.removeSkill('hpp_pojun2');
                                },
                                intro: {
                                    markcount: 'expansion',
                                    mark: function (dialog, storage, player) {
                                        var cards = player.getExpansions('hpp_pojun2');
                                        // var cards = player.storage.hpp_pojun_cards;
                                        if (player.isUnderControl(true)) dialog.addAuto(cards);
                                        else return '共有' + get.cnNumber(cards.length) + '张牌';
                                    },
                                },
                            },

                            //许劭
                            hpp_pingjian: {
                                getList: function () {
                                    return Object.keys(lib.characterPack.happykill).filter(function (i) {
                                        if (!lib.characterPack.happykill[i][4]) return true;
                                        return !lib.characterPack.happykill[i][4].contains('unseen');
                                    });
                                },
                                init: function (player) {
                                    player.addSkill('hpp_pingjian_remove');
                                    if (!player.storage.hpp_pingjian_remove) player.storage.hpp_pingjian_remove = {};
                                },
                                derivation: 'hpp_pingjian_faq',
                                group: 'hpp_pingjian_use',
                                initList: function () {
                                    var list = [];
                                    for (var i in lib.character) {
                                        var bool = (lib.skill.hpp_pingjian.getList()).contains(i);
                                        if (!bool || i.indexOf('xushao') != -1 || (i.indexOf('zuoci') != -1 && i != 'hpp_zuoci')) continue;
                                        if (!list.contains(i)) list.push(i);
                                    }
                                    game.countPlayer2(function (current) {
                                        list.remove(current.name);
                                        list.remove(current.name1);
                                        list.remove(current.name2);
                                    });
                                    _status.happyList = list;
                                },
                                audio: 'pingjian',
                                trigger: { player: ['damageEnd', 'phaseJieshuBegin'] },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    lib.skill.hpp_pingjian.initList();
                                    var list = [], skills = [], map = [];
                                    _status.happyList.randomSort();
                                    var name2 = event.triggername;
                                    for (var i = 0; i < _status.happyList.length; i++) {
                                        var name = _status.happyList[i];
                                        var skills2 = lib.character[name][3];
                                        for (var j = 0; j < skills2.length; j++) {
                                            if (player.getStorage('hpp_pingjian').contains(skills2[j])) continue;
                                            if (skills.contains(skills2[j])) {
                                                list.add(name);
                                                if (!map[name]) map[name] = [];
                                                map[name].push(skills2[j]);
                                                skills.add(skills2[j]);
                                                continue;
                                            }
                                            var list2 = [skills2[j]];
                                            game.expandSkills(list2);
                                            for (var k = 0; k < list2.length; k++) {
                                                var info = lib.skill[list2[k]];
                                                if (!info || !info.trigger || !info.trigger.player || info.silent || info.limited || info.juexingji || info.hiddenSkill ||
                                                    info.dutySkill || info.groupSkill || (info.priority && typeof info.priority == 'number') || info.firstDo || info.lastDo) continue;
                                                if (info.trigger.player == name2 || Array.isArray(info.trigger.player) && info.trigger.player.contains(name2)) {
                                                    if (/*info.init||info.onChooseToUse||*/info.ai && (info.ai.combo || info.ai.notemp || info.ai.neg)) continue;
                                                    if (info.init) info.init(player, list2[k]);
                                                    if (info.filter) {
                                                        try {
                                                            var bool = info.filter(trigger, player, name2);
                                                            if (!bool) continue;
                                                        }
                                                        catch (e) {
                                                            continue;
                                                        }
                                                    }
                                                    list.add(name);
                                                    if (!map[name]) map[name] = [];
                                                    map[name].push(skills2[j]);
                                                    skills.add(skills2[j]);
                                                    break;
                                                }
                                            }
                                        }
                                        if (list.length > 2) break;
                                    }
                                    if (skills.length) player.chooseControl(skills).set('dialog', ['请选择要发动的技能', [list, 'character']]);
                                    else event.finish();
                                    'step 1'
                                    player.markAuto('hpp_pingjian', [result.control]);
                                    player.addTempSkill(result.control);
                                    player.storage.hpp_pingjian_remove[result.control] = (trigger.name == 'damage' ? trigger : 'phaseJieshu');
                                    if (trigger.name == 'damage' && (lib.translate[result.control + '_info'].indexOf('1点伤害') != -1 || lib.translate[result.control + '_info'].indexOf('一点伤害') != -1)) trigger.num = 1;
                                },
                            },
                            hpp_pingjian_use: {
                                audio: 'pingjian',
                                enable: 'phaseUse',
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    lib.skill.hpp_pingjian.initList();
                                    var list = [], skills = [], map = [];
                                    _status.happyList.randomSort();
                                    for (var i = 0; i < _status.happyList.length; i++) {
                                        var name = _status.happyList[i];
                                        var skills2 = lib.character[name][3];
                                        for (var j = 0; j < skills2.length; j++) {
                                            if (player.getStorage('hpp_pingjian').contains(skills2[j])) continue;
                                            var info = lib.translate[skills2[j] + '_info'];
                                            if (skills.contains(skills2[j]) || (info && info.indexOf('当你于出牌阶段') != -1)) {
                                                list.add(name);
                                                if (!map[name]) map[name] = [];
                                                map[name].push(skills2[j]);
                                                skills.add(skills2[j]);
                                                continue;
                                            }
                                            var list2 = [skills2[j]];
                                            game.expandSkills(list2);
                                            for (var k = 0; k < list2.length; k++) {
                                                var info = lib.skill[list2[k]];
                                                if (!info || !info.enable || info.charlotte || info.limited || info.juexingji || info.hiddenSkill || info.dutySkill || info.groupSkill) continue;
                                                if ((info.enable == 'phaseUse' || (Array.isArray(info.enable) && info.enable.contains('phaseUse'))) ||
                                                    (info.enable == 'chooseToUse' || (Array.isArray(info.enable) && info.enable.contains('chooseToUse')))) {
                                                    if (/*info.init||info.onChooseToUse||*/info.ai && (info.ai.combo || info.ai.notemp || info.ai.neg)) continue;
                                                    var evt = event.getParent(2);
                                                    if (info.init) info.init(player, list2[k]);
                                                    if (info.onChooseToUse) info.onChooseToUse(evt);
                                                    if (info.filter) {
                                                        try {
                                                            var bool = info.filter(evt, player);
                                                            if (!bool) continue;
                                                        }
                                                        catch (e) {
                                                            continue;
                                                        }
                                                    }
                                                    else if (info.viewAs && typeof info.viewAs != 'function') {
                                                        try {
                                                            if (evt.filterCard && !evt.filterCard(info.viewAs, player, evt)) continue;
                                                            if (info.viewAsFilter && info.viewAsFilter(player) == false) continue;
                                                        }
                                                        catch (e) {
                                                            continue;
                                                        }
                                                    }
                                                    list.push(name);
                                                    if (!map[name]) map[name] = [];
                                                    map[name].push(skills2[j]);
                                                    skills.add(skills2[j]);
                                                    break;
                                                }
                                            }
                                        }
                                        if (list.length > 2) break;
                                    }
                                    if (skills.length) player.chooseControl(skills).set('dialog', ['请选择要发动的技能', [list, 'character']]);
                                    else event.finish();
                                    'step 1'
                                    player.markAuto('hpp_pingjian', [result.control]);
                                    player.addTempSkill(result.control);
                                    player.storage.hpp_pingjian_remove[result.control] = 'phaseUse';
                                },
                                ai: {
                                    order: 12,
                                    result: { player: 1 },
                                },
                            },
                            hpp_pingjian_remove: {
                                group: 'hpp_pingjian_skill',
                                charlotte: true,
                                trigger: { player: ['phaseUseEnd', 'damageEnd', 'phaseJieshuBegin'] },
                                filter: function (event, player) {
                                    return Object.keys(player.storage.hpp_pingjian_remove).find(function (skill) {
                                        if (event.name != 'damage') return player.storage.hpp_pingjian_remove[skill] == event.name;
                                        return player.storage.hpp_pingjian_remove[skill] == event;
                                    });
                                },
                                direct: true,
                                lastDo: true,
                                priority: -Infinity,
                                content: function () {
                                    var skills = Object.keys(player.storage.hpp_pingjian_remove).filter(function (skill) {
                                        if (trigger.name != 'damage') return player.storage.hpp_pingjian_remove[skill] == trigger.name;
                                        return player.storage.hpp_pingjian_remove[skill] == trigger;
                                    });
                                    player.removeSkill(skills);
                                    for (var skill of skills) delete player.storage.hpp_pingjian_remove[skill];
                                },
                            },
                            hpp_pingjian_skill: {
                                charlotte: true,
                                trigger: { player: ['useSkill', 'logSkillBegin'] },
                                filter: function (event, player) {
                                    if (get.info(event.skill).charlotte) return false;
                                    var skill = event.sourceSkill || event.skill;
                                    return player.storage.hpp_pingjian_remove[skill];
                                },
                                direct: true,
                                firstDo: true,
                                priority: Infinity,
                                content: function () {
                                    var skill = trigger.sourceSkill || trigger.skill;
                                    player.removeSkill(skill);
                                    delete player.storage.hpp_pingjian_remove[skill];
                                },
                            },

                            // 徐氏
                            hpp_wengua: {
                                global: 'hpp_wengua2',
                                audio: 'wengua',
                            },
                            hpp_wengua2: {
                                audio: 'wengua',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (player.hasSkill('hpp_wengua3')) return false;
                                    return player.countCards('he') && game.hasPlayer(function (current) {
                                        return current.hasSkill('hpp_wengua');
                                    });
                                },
                                direct: true,
                                delay: false,
                                filterCard: true,
                                discard: false,
                                lose: false,
                                position: 'he',
                                prompt: function () {
                                    var player = _status.event.player;
                                    var list = game.filterPlayer(function (current) {
                                        return current.hasSkill('hpp_wengua');
                                    });
                                    if (list.length == 1 && list[0] == player) return '将一张牌置于牌堆顶或是牌堆底';
                                    var str = '将一张牌交给' + get.translation(list);
                                    if (list.length > 1) str += '中的一人';
                                    return str;
                                },
                                check: function (card) {
                                    var list = game.filterPlayer(function (current) {
                                        return current.hasSkill('hpp_wengua');
                                    });
                                    list.sort(function (a, b) {
                                        var p = _status.event.player;
                                        return get.attitude(p, b) - get.attitude(p, a);
                                    });
                                    if (get.type2(card) == 'trick' && (list[0].isDamaged() || list[0].maxHp < 5)) return 10;
                                    if (card.name == 'sha') return 5;
                                    return 8 - get.value(card);
                                },
                                content: function () {
                                    'step 0'
                                    var targets = game.filterPlayer(function (current) {
                                        return current.hasSkill('hpp_wengua');
                                    });
                                    if (targets.length == 1) {
                                        event.target = targets[0];
                                        event.goto(2);
                                    }
                                    else if (targets.length > 0) {
                                        player.chooseTarget(true, '请选择【问卦】的目标', function (card, player, target) {
                                            return _status.event.list.contains(target);
                                        }).set('list', targets).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.attitude(player, target);
                                        });
                                    }
                                    else event.finish();
                                    'step 1'
                                    if (result.bool && result.targets.length) {
                                        event.target = result.targets[0];
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (target) {
                                        player.logSkill('hpp_wengua', target);
                                        player.addTempSkill('hpp_wengua3', 'phaseUseAfter');
                                        event.card = cards[0];
                                        player.showCards(cards, '问卦的牌');
                                        game.delay();
                                        if (target != player) player.give(cards, target);
                                        if (get.type2(event.card) == 'trick') {
                                            if (target.maxHp < 5) target.gainMaxHp();
                                            target.recover();
                                        }
                                    }
                                    else event.finish();
                                    delete _status.noclearcountdown;
                                    game.stopCountChoose();
                                    'step 3'
                                    if (target.getCards('he').contains(event.card)) {
                                        target.chooseControlList('问卦', '将' + get.translation(event.card) + '置于牌堆顶', '将' + get.translation(event.card) + '置于牌堆底', target == player, function () {
                                            if (get.attitude(target, player) < 0) return 2;
                                            return 1;
                                        });
                                    }
                                    else event.finish();
                                    'step 4'
                                    event.index = result.index;
                                    if (event.index == 0 || event.index == 1) {
                                        var next = target.lose(event.card, ui.cardPile);
                                        if (event.index == 0) next.insert_card = true;
                                        game.broadcastAll(function (player) {
                                            var cardx = ui.create.card();
                                            cardx.classList.add('infohidden');
                                            cardx.classList.add('infoflip');
                                            player.$throw(cardx, 1000, 'nobroadcast');
                                        }, target);
                                    }
                                    else event.finish();
                                    'step 5'
                                    game.delayx();
                                    'step 6'
                                    if (event.index == 1) {
                                        game.log(target, '将获得的牌置于牌堆底');
                                        game.asyncDraw([player, target], null, null);
                                    }
                                    else {
                                        game.log(target, '将获得的牌置于牌堆顶');
                                        game.asyncDraw([player, target], null, null, true);
                                    }
                                },
                                ai: {
                                    order: 2,
                                    result: {
                                        player: function (player, target) {
                                            var target = game.findPlayer(function (current) {
                                                return current.hasSkill('hpp_wengua');
                                            });
                                            if (target) return get.attitude(player, target);
                                        },
                                    },
                                },
                            },
                            hpp_wengua3: { charlotte: true },
                            hpp_fuzhu: {
                                audio: 'fuzhu',
                                trigger: { global: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return event.player != player && ui.cardPile.childElementCount <= player.maxHp * 10;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) < 0 && get.effect(event.player, { name: 'sha' }, player, player) > 0;
                                },
                                logTarget: 'player',
                                skillAnimation: true,
                                animationColor: 'wood',
                                onWash: function () {
                                    _status.event.getParent('hpp_fuzhu').washed = false;
                                    return 'remove';
                                },
                                content: function () {
                                    'step 0'
                                    event.washed = false;
                                    lib.onwash.push(lib.skill.hpp_fuzhu.onWash);
                                    event.total = game.players.length + game.dead.length;
                                    'step 1'
                                    event.total--;
                                    var card = get.cardPile2(function (card) {
                                        return card.name == 'sha' && player.canUse(card, trigger.player, false);
                                    });
                                    if (card) {
                                        card.remove();
                                        game.updateRoundNumber();
                                        player.useCard(card, trigger.player, false);
                                    }
                                    'step 2'
                                    if (event.total > 0 && !event.washed && ui.cardPile.childElementCount <= player.hp * 10 && trigger.player.isIn()) event.goto(1);
                                    'step 3'
                                    lib.onwash.remove(lib.skill.hpp_fuzhu.onWash);
                                    var cards = get.cards(ui.cardPile.childElementCount + 1);
                                    for (var i = 0; i < cards.length; i++) {
                                        ui.cardPile.insertBefore(cards[i], ui.cardPile.childNodes[get.rand(ui.cardPile.childElementCount)]);
                                    }
                                    game.updateRoundNumber();
                                },
                            },

                            // 徐庶
                            hpp_jujian: {
                                audio: 'xinjujian',
                                trigger: { player: ['phaseZhunbeiBegin', 'phaseJieshuBegin'] },
                                filter: function (event, player) {
                                    return player.countCards('he') > player.countCards('he', { type: 'basic' });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCardTarget({
                                        filterTarget: true,
                                        filterCard: function (card, player) {
                                            return get.type(card) != 'basic' && lib.filter.cardDiscardable(card, player);
                                        },
                                        ai1: function (card) {
                                            if (get.tag(card, 'damage') && get.type(card) == 'trick') {
                                                return 20;
                                            }
                                            return 9 - get.value(card);
                                        },
                                        ai2: function (target) {
                                            var att = get.attitude(_status.event.player, target);
                                            if (att > 0) {
                                                if (target.isTurnedOver()) att += 3;
                                                if (target.hp == 1) att += 3;
                                            }
                                            return att;
                                        },
                                        position: 'he',
                                        prompt: get.prompt2('hpp_jujian')
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_jujian', target);
                                        player.discard(result.cards);
                                        if (target.hp == target.maxHp &&
                                            !target.isTurnedOver() &&
                                            !target.isLinked()) {
                                            target.draw(2);
                                            event.finish();
                                        }
                                        else {
                                            var controls = ['draw_card'];
                                            if (target.hp < target.maxHp) {
                                                controls.push('recover_hp');
                                            }
                                            if (target.isLinked() | target.isTurnedOver()) {
                                                controls.push('reset_character');
                                            }
                                            target.chooseControl(controls).ai = function () {
                                                if (target.isTurnedOver()) {
                                                    return 'reset_character';
                                                }
                                                else if (target.hp == 1 && target.maxHp > 2) {
                                                    return 'recover_hp';
                                                }
                                                else if (target.hp == 2 && target.maxHp > 2 && target.countCards('h') > 1) {
                                                    return 'recover_hp';
                                                }
                                                else {
                                                    return 'draw_card';
                                                }
                                            }
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    event.control = result.control;
                                    switch (event.control) {
                                        case 'recover_hp': event.target.recover(); event.finish(); break;
                                        case 'draw_card': event.target.draw(2); event.finish(); break;
                                        case 'reset_character': if (event.target.isTurnedOver()) event.target.turnOver(); break;
                                    }
                                    'step 3'
                                    if (event.control == 'reset_character' && event.target.isLinked()) event.target.link();
                                },
                            },

                            // 许攸
                            hpp_chenglue: {
                                enable: 'phaseUse',
                                usable: 1,
                                audio: 'nzry_chenglve',
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    player.chooseToDiscard('h', true);
                                    'step 1'
                                    if (result.bool) {
                                        player.addTempSkill('hpp_chenglue_use');
                                        player.markAuto('hpp_chenglue_use', [get.suit(result.cards[0], player)]);
                                        player.storage.hpp_chenglue_use.sort(function (a, b) {
                                            return lib.suit.indexOf(b) - lib.suit.indexOf(a);
                                        });
                                        if (game.HasExtension('十周年UI')) {
                                            game.broadcastAll(function (player) {
                                                var str = '成略';
                                                for (var suit of player.getStorage('hpp_chenglue_use')) str += get.translation(suit);
                                                if (player.marks.hpp_chenglue_use) player.marks.hpp_chenglue_use.firstChild.innerHTML = str;
                                            }, player);
                                        }
                                    }
                                },
                                ai: {
                                    order: 10,
                                    result: { player: 1 },
                                },
                                subSkill: {
                                    use: {
                                        charlotte: true,
                                        onremove: true,
                                        intro: {
                                            markcount: () => undefined,
                                            content: '使用$花色的牌无距离和次数限制',
                                        },
                                        mod: {
                                            cardUsable: function (card, player) {
                                                if (player.getStorage('hpp_chenglue_use').contains(get.suit(card, player))) return Infinity;
                                            },
                                            targetInRange: function (card, player) {
                                                if (player.getStorage('hpp_chenglue_use').contains(get.suit(card, player))) return true;
                                            },
                                        },
                                    },
                                },
                            },

                            // 许诸
                            hpp_luoyi: {
                                audio: 'reluoyi',
                                trigger: { player: 'phaseDrawBegin2' },
                                check: function (event, player) {
                                    if (player.countCards('h') < 3) return false;
                                    if (!player.hasSha()) return false;
                                    return game.hasPlayer(function (current) {
                                        return get.attitude(player, current) < 0 && player.canUse('sha', current);
                                    });
                                },
                                preHidden: true,
                                filter: function (event, player) {
                                    return !event.numFixed && event.num > 0;
                                },
                                content: function () {
                                    player.addTempSkill('hpp_luoyi2');
                                    trigger.num--;
                                }
                            },
                            hpp_luoyi2: {
                                trigger: { source: 'damageBegin1' },
                                filter: function (event) {
                                    return event.card && (event.card.name == 'sha' || event.card.name == 'juedou') && event.notLink();
                                },
                                forced: true,
                                content: function () {
                                    trigger.num++;
                                },
                                ai: {
                                    damageBonus: true
                                }
                            },
                            hpp_huchi: {
                                group: ['hpp_huchi_miss', 'hpp_huchi_draw'],
                                audio: 'hpphuchi',
                                trigger: { player: 'phaseEnd' },
                                frequent: true,
                                prompt: '是否发动【虎痴】，将手牌摸至两张？',
                                filter: function (event, player) {
                                    return player.countCards('h') < 2;
                                },
                                content: function () {
                                    player.drawTo(2);
                                },
                                marktext: '痴',
                                intro: { name: '虎痴', name2: '痴', content: 'mark' },
                                subSkill: {
                                    miss: {
                                        shaRelated: true,
                                        audio: 'hpp_huchi',
                                        trigger: { player: 'shaMiss' },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            player.addMark('hpp_huchi', 1);
                                        },
                                    },
                                    draw: {
                                        audio: 'hpp_huchi',
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            return player.countMark('hpp_huchi');
                                        },
                                        usable: 1,
                                        content: function () {
                                            var num = player.countMark('hpp_huchi');
                                            player.removeMark('hpp_huchi', num);
                                            player.draw(num);
                                        },
                                        ai: {
                                            order: 1,
                                            result: { player: 1 },
                                        },
                                    },
                                },
                            },

                            // 严夫人
                            hpp_channi: {
                                audio: 'channi',
                                inherit: 'channi',
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('hpp_channi_effect', { player: 'hpp_channiAfter' });
                                    player.give(cards, target);
                                    'step 1'
                                    if (target.countCards('h') > 0) {
                                        game.broadcastAll(function (num) {
                                            lib.skill.hpp_channi_backup.selectCard = [1, num];
                                        }, cards.length);
                                        var next = target.chooseToUse();
                                        next.set('openskilldialog', '将至多' + get.cnNumber(cards.length) + '张手牌当做【决斗】使用');
                                        next.set('norestore', true);
                                        next.set('addCount', false);
                                        next.set('_backupevent', 'hpp_channi_backup');
                                        next.set('custom', {
                                            add: {},
                                            replace: { window: function () { } }
                                        });
                                        next.backup('hpp_channi_backup');
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var evts = target.getHistory('useCard', function (evt) {
                                            return evt.card.name == 'juedou' && evt.getParent(2) == event;
                                        });
                                        if (!evts.length) return;
                                        var num = evts[0].cards.length;
                                        if (target.hasHistory('sourceDamage', function (evt) {
                                            return evt.card && evt.card.name == 'juedou' && evt.getParent(4) == event;
                                        })) target.draw(num);
                                    }
                                },
                                subSkill: {
                                    backup: {
                                        filterCard: function (card) {
                                            return get.itemtype(card) == 'card';
                                        },
                                        viewAs: { name: 'juedou' },
                                        position: 'h',
                                        filterTarget: lib.filter.targetEnabled,
                                        check: (card) => get.name(card) == 'sha' ? 7 : 5.5 - get.value(card),
                                        log: false,
                                        precontent: function () {
                                            delete event.result.skill;
                                        },
                                    },
                                    effect: {
                                        charlotte: true,
                                        trigger: { global: 'damageBegin2' },
                                        filter: function (event, player) {
                                            if (!player.countCards('h')) return false;
                                            var evt = event.getParent(5);
                                            return evt.skill == 'hpp_channi' && evt.player == player && evt.targets[0] == event.player;
                                        },
                                        prompt2: function (event, player) {
                                            return '弃置所有手牌，防止即将对' + get.translation(event.player) + '造成的伤害';
                                        },
                                        content: function () {
                                            player.discard(player.getCards('h'));
                                            trigger.cancel();
                                        },
                                    },
                                },
                            },
                            hpp_nifu: {
                                audio: 'nifu',
                                trigger: { global: 'phaseEnd' },
                                filter: function (event, player) {
                                    return player.countCards('h') < 3;
                                },
                                forced: true,
                                content: function () {
                                    player.drawTo(3);
                                },
                            },

                            // 杨修
                            hpp_jilei: {
                                audio: 'jilei',
                                trigger: { player: 'damageEnd' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseControl('basic', 'trick', 'equip', 'cancel2', function () {
                                        var source = _status.event.source;
                                        if (get.attitude(_status.event.player, source) > 0) return 'cancel2';
                                        var list = ['basic', 'trick', 'equip'].filter(function (name) {
                                            return (!source.storage.jilei2 || !source.storage.jilei2.contains(name));
                                        });
                                        if (!list.length) return 'cancel2';
                                        if (list.contains('trick') && source.countCards('h', function (card) {
                                            return get.type(card, source) == 'trick' && source.hasValueTarget(card);
                                        }) > 1) return 'trick';
                                        return list[0];
                                    }).set('prompt', get.prompt2('hpp_jilei', trigger.source)).set('source', trigger.source);
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_jilei', trigger.source);
                                        player.popup(get.translation(result.control) + '牌');
                                        var card = get.cardPile2(function (card) {
                                            return get.type2(card) == result.control;
                                        });
                                        if (card) player.gain(card, 'gain2');
                                        trigger.source.addTempSkill('jilei2', { player: 'phaseBegin' });
                                        trigger.source.storage.jilei2.add(result.control);
                                        trigger.source.updateMarks('jilei2');
                                    }
                                },
                                ai: {
                                    maixie_defend: true,
                                    threaten: 0.7
                                }
                            },

                            // 严畯
                            hpp_guanchao: {
                                audio: 'xinfu_guanchao',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var list = ['递增', '递减', '取消'];
                                    player.chooseControl(list).set('prompt', get.prompt2('hpp_guanchao')).set('ai', function () {
                                        return [0, 1].randomGet();
                                    }).set('choiceList', [
                                        '使用【杀】的次数上限+1，使用牌严格递增摸一张牌',
                                        '计算与其他角色之间的距离-1，使用牌严格递减摸一张牌'
                                    ]);
                                    'step 1'
                                    switch (result.control) {
                                        case '递增': {
                                            player.logSkill('hpp_guanchao');
                                            player.addTempSkill('hpp_guanchao_dizeng');
                                            break;
                                        }
                                        case '递减': {
                                            player.logSkill('hpp_guanchao');
                                            player.addTempSkill('hpp_guanchao_dijian');
                                            break;
                                        }
                                        case '取消': {
                                            break;
                                        }
                                    }
                                },
                                subSkill: {
                                    dizeng: {
                                        mark: true,
                                        marktext: '增',
                                        intro: { content: '使用【杀】的次数上限+1，使用牌严格递增摸一张牌' },
                                        trigger: { player: 'useCard' },
                                        audio: 'xinfu_guanchao',
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            },
                                            aiOrder: function (player, card, num) {
                                                if (typeof card.number != 'number') return;
                                                var history = player.getHistory('useCard');
                                                if (history.length == 0) return num + 10 * (14 - card.number);
                                                var num = get.number(history[0].card);
                                                if (!num) return;
                                                for (var i = 1; i < history.length; i++) {
                                                    var num2 = get.number(history[i].card);
                                                    if (!num2 || num2 <= num) return;
                                                    num = num2;
                                                }
                                                if (card.number > num) return num + 10 * (14 - card.number);
                                            },
                                        },
                                        filter: function (event, player) {
                                            var history = player.getHistory('useCard');
                                            if (history.length < 2) return false;
                                            var num = get.number(history[0].card);
                                            if (!num) return false;
                                            for (var i = 1; i < history.length; i++) {
                                                var num2 = get.number(history[i].card);
                                                if (!num2 || num2 <= num) return false;
                                                num = num2;
                                            }
                                            return true;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                    dijian: {
                                        mark: true,
                                        marktext: '减',
                                        intro: { content: '计算与其他角色之间的距离-1，使用牌严格递减摸一张牌' },
                                        trigger: { player: 'useCard' },
                                        audio: 'xinfu_guanchao',
                                        mod: {
                                            globalFrom: function (from, to, distance) {
                                                return distance - 1;
                                            },
                                            aiOrder: function (player, card, num) {
                                                if (typeof card.number != 'number') return;
                                                var history = player.getHistory('useCard');
                                                if (history.length == 0) return num + 10 * card.number;
                                                var num = get.number(history[0].card);
                                                if (!num) return;
                                                for (var i = 1; i < history.length; i++) {
                                                    var num2 = get.number(history[i].card);
                                                    if (!num2 || num2 >= num) return;
                                                    num = num2;
                                                }
                                                if (card.number < num) return num + 10 * card.number;
                                            },
                                        },
                                        filter: function (event, player) {
                                            var history = player.getHistory('useCard');
                                            if (history.length < 2) return false;
                                            var num = get.number(history[0].card);
                                            if (!num) return false;
                                            for (var i = 1; i < history.length; i++) {
                                                var num2 = get.number(history[i].card);
                                                if (!num2 || num2 >= num) return false;
                                                num = num2;
                                            }
                                            return true;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },
                            hpp_xunxian: {
                                audio: 'xinfu_xunxian',
                                trigger: { global: 'cardsDiscardAfter' },
                                filter: function (event, player) {
                                    if (!event.cards.filterInD('d').length) return false;
                                    var evt = event.getParent();
                                    if (evt.name != 'orderingDiscard') return false;
                                    var evtx = (evt.relatedEvent || evt.getParent());
                                    if (evtx.player != player) return false;
                                    return player.hasHistory('lose', function (evtxx) {
                                        return evtx == (evtxx.relatedEvent || evtxx.getParent()) && evtxx.cards2.length;
                                    });
                                },
                                usable: 1,
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_xunxian'), '令一名其他角色获得' + get.translation(trigger.cards.filterInD('d')), lib.filter.notMe).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        if (att < 3) return 0;
                                        if (target.hasJudge('lebu')) att /= 5;
                                        if (target.hasSha() && _status.event.sha) att /= 5;
                                        if (_status.event.wuxie && target.needsToDiscard(1)) att /= 5;
                                        return att / (1 + get.distance(player, target, 'absolute'));
                                    }).set('sha', trigger.cards.filterInD('d').filter(function (card) {
                                        return card.name == 'sha';
                                    }).length).set('wuxie', trigger.cards.filterInD('d').filter(function (card) {
                                        return card.name == 'wuxie';
                                    }).length);
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_xunxian', target);
                                        target.gain(trigger.cards.filterInD('d'), 'gain2');
                                    }
                                    else player.storage.counttrigger.hpp_xunxian--;
                                },
                                ai: { expose: 0.25 },
                            },

                            // 严夫人
                            hpp_channi: {
                                audio: 'channi',
                                inherit: 'channi',
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('hpp_channi_effect', { player: 'hpp_channiAfter' });
                                    player.give(cards, target);
                                    'step 1'
                                    if (target.countCards('h') > 0) {
                                        game.broadcastAll(function (num) {
                                            lib.skill.hpp_channi_backup.selectCard = [1, num];
                                        }, cards.length);
                                        var next = target.chooseToUse();
                                        next.set('openskilldialog', '将至多' + get.cnNumber(cards.length) + '张手牌当做【决斗】使用');
                                        next.set('norestore', true);
                                        next.set('addCount', false);
                                        next.set('_backupevent', 'hpp_channi_backup');
                                        next.set('custom', {
                                            add: {},
                                            replace: { window: function () { } }
                                        });
                                        next.backup('hpp_channi_backup');
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var evts = target.getHistory('useCard', function (evt) {
                                            return evt.card.name == 'juedou' && evt.getParent(2) == event;
                                        });
                                        if (!evts.length) return;
                                        var num = evts[0].cards.length;
                                        if (target.hasHistory('sourceDamage', function (evt) {
                                            return evt.card && evt.card.name == 'juedou' && evt.getParent(4) == event;
                                        })) target.draw(num);
                                    }
                                },
                                subSkill: {
                                    backup: {
                                        filterCard: function (card) {
                                            return get.itemtype(card) == 'card';
                                        },
                                        viewAs: { name: 'juedou' },
                                        position: 'h',
                                        filterTarget: lib.filter.targetEnabled,
                                        check: (card) => get.name(card) == 'sha' ? 7 : 5.5 - get.value(card),
                                        log: false,
                                        precontent: function () {
                                            delete event.result.skill;
                                        },
                                    },
                                    effect: {
                                        charlotte: true,
                                        trigger: { global: 'damageBegin2' },
                                        filter: function (event, player) {
                                            if (!player.countCards('h')) return false;
                                            var evt = event.getParent(5);
                                            return evt.skill == 'hpp_channi' && evt.player == player && evt.targets[0] == event.player;
                                        },
                                        prompt2: function (event, player) {
                                            return '弃置所有手牌，防止即将对' + get.translation(event.player) + '造成的伤害';
                                        },
                                        content: function () {
                                            player.discard(player.getCards('h'));
                                            trigger.cancel();
                                        },
                                    },
                                },
                            },
                            hpp_nifu: {
                                audio: 'nifu',
                                trigger: { global: 'phaseEnd' },
                                filter: function (event, player) {
                                    return player.countCards('h') < 3;
                                },
                                forced: true,
                                content: function () {
                                    player.drawTo(3);
                                },
                            },

                            // 颜良文丑
                            hpp_shuangxiong: {
                                audio: 'shuangxiong',
                                trigger: { player: 'phaseDrawBegin1' },
                                group: 'hpp_shuangxiong2',
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                content: function () {
                                    'step 0'
                                    trigger.changeToZero();
                                    event.cards = get.cards(3);
                                    event.videoId = lib.status.videoId++;
                                    game.broadcastAll(function (player, id, cards) {
                                        var str;
                                        if (player == game.me && !_status.auto) str = '【双雄】选择获得其中一种颜色的牌';
                                        else str = '双雄';
                                        var dialog = ui.create.dialog(str, cards);
                                        dialog.videoId = id;
                                    }, player, event.videoId, event.cards);
                                    event.time = get.utc();
                                    game.addVideo('showCards', player, ['双雄', get.cardsInfo(event.cards)]);
                                    game.addVideo('delay', null, 2);
                                    'step 1'
                                    player.chooseControl('红色', '黑色').set('ai', function () {
                                        var player = _status.event.player;
                                        var n1 = 0, n2 = 0;
                                        for (var i of _status.event.cards) {
                                            if (get.color(i, player) == 'red') n1++;
                                            else n2++;
                                        }
                                        if (n1 >= n2) return '红色';
                                        return '黑色';
                                    }).set('cards', cards);
                                    'step 2'
                                    event.cardsx = [];
                                    var color = (result.control == '红色' ? 'red' : 'black');
                                    for (var j of event.cards) {
                                        if (color == get.color(j)) event.cardsx.push(j);
                                        else game.cardsDiscard(j);
                                    }
                                    var time = 1000 - (get.utc() - event.time);
                                    if (time > 0) game.delay(0, time);
                                    'step 3'
                                    game.broadcastAll('closeDialog', event.videoId);
                                    player.gain(event.cardsx, 'gain2', 'log');
                                    player.addTempSkill('shuangxiong2');
                                    player.storage.shuangxiong = get.color(event.cardsx[0]);
                                },
                            },
                            hpp_shuangxiong2: {
                                trigger: { player: 'damageEnd' },
                                filter: function (event, player) {
                                    var evt = event.getParent();
                                    return (evt && evt.name == 'juedou' && evt[player == evt.player ? 'targetCards' : 'playerCards'].length) > 0;
                                },
                                usable: 3,
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var evt = trigger.getParent();
                                    var cards = evt[player == evt.player ? 'targetCards' : 'playerCards'].slice(0);
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.position(cards[i]) != 'd') cards.remove(cards[i--]);
                                    }
                                    if (!cards.length) event.finish();
                                    else {
                                        event.cards = cards;
                                        player.chooseBool(get.prompt('hpp_shuangxiong'), '获得' + get.translation(event.cards));
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        var skill = ['hpp_shuangxiong', 'shuangxiong2'].randomGet();
                                        player.logSkill(skill);
                                        player.gain(cards, 'gain2', 'log');
                                    }
                                    else player.storage.counttrigger.hpp_shuangxiong2--;
                                },
                            },

                            // 严颜
                            hpp_juzhan: {
                                group: 'hpp_juzhan_gain',
                                audio: 'nzry_juzhan_1',
                                trigger: { target: 'useCardToTargeted' },
                                prompt2: '当你成为其他角色【杀】的目标后，你可以与其各摸一张牌，然后其本回合内不能再对你使用牌。',
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                logTarget: 'player',
                                content: function () {
                                    'step 0'
                                    game.asyncDraw([player, trigger.player]);
                                    trigger.player.addTempSkill('hpp_juzhan_use1');
                                    trigger.player.markAuto('hpp_juzhan_use1', [player]);
                                    'step 1'
                                    game.delayx();
                                },
                                subSkill: {
                                    gain: {
                                        audio: 'nzry_juzhan_1',
                                        trigger: { player: 'useCardToPlayered' },
                                        prompt2: '当你使用【杀】指定一名角色为目标后，你可以获得其一张牌，然后你本回合内不能再对其使用红色【杀】',
                                        filter: function (event, player) {
                                            return event.card.name == 'sha' && event.target.countGainableCards(player, 'he');
                                        },
                                        check: function (event, player) {
                                            return get.effect(event.target, { name: 'guohe_copy2' }, player, player) > 0;
                                        },
                                        logTarget: 'target',
                                        content: function () {
                                            'step 0'
                                            player.gainPlayerCard(trigger.target, 'he', true);
                                            'step 1'
                                            player.addTempSkill('hpp_juzhan_use2');
                                            player.markAuto('hpp_juzhan_use2', [trigger.target]);
                                        },
                                    },
                                    use1: {
                                        charlotte: true,
                                        onremove: true,
                                        marktext: '拒',
                                        intro: { content: '不能对$使用牌' },
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if (player.getStorage('hpp_juzhan_use1').contains(target)) return false;
                                            },
                                        },
                                    },
                                    use2: {
                                        charlotte: true,
                                        onremove: true,
                                        marktext: '战',
                                        intro: { content: '不能对$使用红色【杀】' },
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if (player.getStorage('hpp_juzhan_use2').contains(target) && get.name(card) == 'sha' && get.color(card) == 'red') return false;
                                            },
                                        },
                                    },
                                },
                            },

                            // 尹夫人
                            hpp_yongbi: {
                                audio: 'dcyongbi',
                                inherit: 'dcyongbi',
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                filterTarget: lib.filter.notMe,
                                selectCard: [1, Infinity],
                                complexCard: true,
                                complexSelect: true,
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (!ui.selected.cards.some(cardx => get.suit(card, player) == get.suit(cardx, player))) return 8 - get.value(card);
                                    return 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_yongbi');
                                    if (player.hasSkill('dcyingyu', null, null, false)) player.storage.dcyingyu = true;
                                    player.give(cards, target);
                                    'step 1'
                                    var list = [];
                                    for (var i of cards) {
                                        list.add(get.suit(i, player));
                                        if (list.length >= 3) break;
                                    }
                                    if (list.length >= 2) {
                                        player.addMark('dcyongbi_eff1', 2, false);
                                        player.addSkill('dcyongbi_eff1');
                                        target.addMark('dcyongbi_eff1', 2, false);
                                        target.addSkill('dcyongbi_eff1');
                                    }
                                    if (list.length >= 3) {
                                        player.addMark('dcyongbi_eff2', 1, false);
                                        player.addSkill('dcyongbi_eff2');
                                        target.addMark('dcyongbi_eff2', 1, false);
                                        target.addSkill('dcyongbi_eff2');
                                    }
                                },
                            },

                            // 袁绍
                            hpp_luanji: {
                                audio: 'reluanji',
                                enable: 'phaseUse',
                                viewAs: { name: 'wanjian' },
                                filterCard: function (card, player) {
                                    if (!player.storage.hpp_luanji) return true;
                                    return !player.storage.hpp_luanji.contains(get.suit(card));
                                },
                                position: 'hs',
                                selectCard: 2,
                                check: function (card) {
                                    var player = _status.event.player;
                                    var targets = game.filterPlayer(function (current) {
                                        return player.canUse('wanjian', current);
                                    });
                                    var num = 0;
                                    for (var i = 0; i < targets.length; i++) {
                                        var eff = get.sgn(get.effect(targets[i], { name: 'wanjian' }, player, player));
                                        if (targets[i].hp == 1) {
                                            eff *= 1.5;
                                        }
                                        num += eff;
                                    }
                                    if (!player.needsToDiscard(-1)) {
                                        if (targets.length >= 7) {
                                            if (num < 2) return 0;
                                        }
                                        else if (targets.length >= 5) {
                                            if (num < 1.5) return 0;
                                        }
                                    }
                                    return 6 - get.value(card);
                                },
                                ai: {
                                    basic: {
                                        order: 8.9
                                    }
                                },
                                group: ['hpp_luanji_count', 'hpp_luanji_reset', 'hpp_luanji_damage', 'hpp_luanji_draw'],
                                subSkill: {
                                    reset: {
                                        trigger: { player: 'phaseAfter' },
                                        silent: true,
                                        content: function () {
                                            delete player.storage.hpp_luanji;
                                            delete player.storage.hpp_luanji2;
                                        }
                                    },
                                    count: {
                                        trigger: { player: 'useCard' },
                                        silent: true,
                                        filter: function (event) {
                                            return event.skill == 'hpp_luanji';
                                        },
                                        content: function () {
                                            player.storage.hpp_luanji2 = trigger.card;
                                            if (!player.storage.hpp_luanji) {
                                                player.storage.hpp_luanji = [];
                                            }
                                            for (var i = 0; i < trigger.cards.length; i++) {
                                                player.storage.hpp_luanji.add(get.suit(trigger.cards[i]));
                                            }
                                        }
                                    },
                                    damage: {
                                        trigger: { source: 'damage' },
                                        forced: true,
                                        silent: true,
                                        popup: false,
                                        filter: function (event, player) {
                                            return player.storage.hpp_luanji2 && event.card == player.storage.hpp_luanji2;
                                        },
                                        content: function () {
                                            delete player.storage.hpp_luanji2;
                                        },
                                    },
                                    wanjianDamage: {
                                        trigger: { source: 'damage' },
                                        forced: true,
                                        silent: true,
                                        popup: false,
                                        filter: function (event, player) {
                                            return event.card.name == 'wanjian' && player.storage.hpp_luanji2 == undefined;
                                        },
                                        content: function () {
                                            player.storage.hpp_luanji3 = true;
                                        },
                                    },
                                    draw: {
                                        trigger: { player: 'useCardAfter' },
                                        forced: true,
                                        silent: true,
                                        popup: false,
                                        filter: function (event, player) {
                                            return (player.storage.hpp_luanji2 && event.card == player.storage.hpp_luanji2) || player.storage.hpp_luanji3;
                                        },
                                        content: function () {
                                            player.draw(trigger.targets.length);
                                            delete player.storage.hpp_luanji2;
                                            player.storage.hpp_luanji3 = false;
                                        },
                                    },
                                }
                            },
                            hpp_xueyi: {
                                audio: 'xueyi',
                                trigger: { global: 'phaseBefore' },
                                forced: true,
                                zhuSkill: true,
                                unique: true,
                                filter: function (event, player) {
                                    return !player.storage.hpp_xueyi_inited && player.hasZhuSkill('hpp_xueyi');
                                },
                                content: function () {
                                    player.storage.hpp_xueyi_inited = true;
                                    var num = game.countPlayer(function (current) {
                                        return current.group == 'qun';
                                    });
                                    if (num) player.addMark('hpp_xueyi', num);
                                },
                                marktext: '裔',
                                intro: {
                                    name2: '裔',
                                    content: 'mark',
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (player.hasZhuSkill('hpp_xueyi')) return num + (player.countMark('hpp_xueyi') * 2);
                                    },
                                },
                                group: 'hpp_xueyi_draw',
                                subSkill: {
                                    draw: {
                                        audio: 'xueyi',
                                        enable: 'chooseToUse',
                                        filter: function (event, player) {
                                            if (!player.hasZhuSkill('hpp_xueyi') || !player.hasMark('hpp_xueyi')) return false;
                                            if (event.type == 'dying') {
                                                if (player != event.dying) return false;
                                                return true;
                                            }
                                            else if (event.parent.name == 'phaseUse') {
                                                return true;
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            player.removeMark('hpp_xueyi', 1);
                                            player.recover();
                                            player.draw();
                                        },
                                        ai: {
                                            order: 7,
                                            save: true,
                                            skillTagFilter: function (player, tag, target) {
                                                if (player != target || !player.hasZhuSkill('hpp_xueyi') || !player.hasMark('hpp_xueyi')) return false;
                                            },
                                            result: {
                                                player: function (player) {
                                                    return player.isDamaged() ? 1 : -1;
                                                },
                                            },
                                        },
                                    }
                                },
                            },
                            old_hpp_xueyi_draw: {
                                audio: 'xueyi',
                                enable: 'chooseToUse',
                                filter: function (event, player) {
                                    if (!player.hasZhuSkill('hpp_xueyi') || !player.hasMark('hpp_xueyi')) return false;
                                    if (event.type == 'dying') {
                                        if (player != event.dying) return false;
                                        return true;
                                    }
                                    else if (event.parent.name == 'phaseUse') {
                                        game.log('phaseUse***')
                                        return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    player.removeMark('hpp_xueyi', 1);
                                    player.recover();
                                    player.draw();
                                },
                                ai: {
                                    order: 7,
                                    save: true,
                                    skillTagFilter: function (player, tag, target) {
                                        if (player != target || !player.hasZhuSkill('hpp_xueyi') || !player.hasMark('hpp_xueyi')) return false;
                                    },
                                    result: {
                                        player: function (player) {
                                            return player.isDamaged() ? 1 : -1;
                                        },
                                    },
                                },
                            },

                            // 袁术
                            hpp_weidi: {
                                audio: 'weidi',
                                preHidden: true,
                                trigger: { player: 'phaseDiscardEnd' },
                                filter: function (event, player) {
                                    var cards = [];
                                    game.getGlobalHistory('cardMove', function (evt) {
                                        if (evt.name == 'cardsDiscard' && evt.getParent('phaseDiscard') == event) cards.addArray(evt.cards.filterInD('d'));
                                    });
                                    game.countPlayer2(function (current) {
                                        current.getHistory('lose', function (evt) {
                                            if (evt.type != 'discard' || evt.getParent('phaseDiscard') != event) return;
                                            cards.addArray(evt.cards.filterInD('d'));
                                        })
                                    });
                                    return cards.length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var cards = [];
                                    game.getGlobalHistory('cardMove', function (evt) {
                                        if (evt.name == 'cardsDiscard' && evt.getParent('phaseDiscard') == trigger) cards.addArray(evt.cards.filterInD('d'));
                                    });
                                    game.countPlayer2(function (current) {
                                        current.getHistory('lose', function (evt) {
                                            if (evt.type != 'discard' || evt.getParent('phaseDiscard') != trigger) return;
                                            cards.addArray(evt.cards.filterInD('d'));
                                        })
                                    });
                                    player.chooseCardButton(cards, '伪帝：是否将一张牌交给一名其他角色？').set('ai', function (button) {
                                        var player = _status.event.player;
                                        if (game.hasPlayer(function (current) {
                                            return current != player && get.attitude(player, current) > 0;
                                        })) return get.value(button.link);
                                        return 0;
                                    }).set('cards', cards).set('filterButton', function (button) {
                                        return _status.event.cards.contains(button.link);
                                    }).setHiddenSkill('hpp_weidi');
                                    'step 1'
                                    if (result.bool) {
                                        event.card = result.links[0];
                                        player.chooseTarget('将' + get.translation(event.card) + '交给一名其他角色', lib.filter.notMe, true).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.attitude(player, target) * get.value(event.card, target) * (target.hasSkillTag('nogain') ? 0.1 : 1);
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_weidi', target);
                                        target.gain(card, 'gain2');
                                    }
                                },
                            },

                            // 于吉
                            hpp_guhuo: {
                                audio: 'guhuo_guess',
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    var bool = player.getHistory('sourceDamage', function (evt) {
                                        return evt.card && evt.card == event.card;
                                    }).length;
                                    if (bool && player.hasSkill('hpp_guhuo_silent')) return false;
                                    if (get.type(event.card) != 'trick' && event.card.name != 'sha') return false;
                                    return get.tag(event.card, 'damage');
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    var bool = player.getHistory('sourceDamage', function (evt) {
                                        return evt.card && evt.card == trigger.card;
                                    }).length, cards = trigger.cards.filterInD();
                                    if (bool) player.addTempSkill('hpp_guhuo_silent');
                                    else if (cards.length) {
                                        player.addTempSkill('hpp_guhuo_card', 'phaseEnd');
                                        player.addToExpansion(cards, 'gain2').gaintag.add('hpp_guhuo_card');
                                    }
                                    'step 1'
                                    player.draw();
                                },
                                subSkill: {
                                    silent: { charlotte: true },
                                    card: {
                                        charlotte: true,
                                        intro: {
                                            content: 'expansion',
                                            markcount: 'expansion',
                                        },
                                        onremove: function (player, skill) {
                                            var cards = player.getExpansions(skill);
                                            if (cards.length) player.gain(cards, 'gain2');
                                        },
                                    },
                                },
                            },

                            // 于禁
                            hpp_yizhong: {
                                audio: 'yizhong',
                                trigger: { target: 'shaBefore' },
                                filter: function (event, player) {
                                    if (player.getEquip(2)) return false;
                                    return event.card.name == 'sha' && get.suit(event.card) == 'club';
                                },
                                forced: true,
                                content: function () {
                                    trigger.cancel();
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player == target && get.subtype(card) == 'equip2') {
                                                if (get.equipValue(card) <= 5.5) return 0;
                                            }
                                            if (target.getEquip(2)) return;
                                            if (card.name == 'sha' && get.suit(card) == 'club') return 'zerotarget';
                                        },
                                    },
                                },
                            },

                            // 张宝
                            hpp_zhoufu: {
                                audio: 'zhoufu',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('hs');
                                },
                                filterCard: true,
                                selectCard: [0, 1],
                                filterTarget: function (card, player, target) {
                                    if (player == target) return false;
                                    if (!ui.selected.cards.length) return target.getExpansions('hpp_zhoufu2').length;
                                    return !target.getExpansions('hpp_zhoufu2').length;
                                },
                                check: function (card) {
                                    return 6 - get.value(card);
                                },
                                usable: 1,
                                position: 'hs',
                                discard: false,
                                lose: false,
                                delay: false,
                                content: function () {
                                    if (!cards.length && target.getExpansions('hpp_zhoufu2').length) {
                                        var cardx = target.getExpansions('hpp_zhoufu2');
                                        target.loseToDiscardpile(cardx);
                                    }
                                    else {
                                        if (!target.storage.hpp_zhoufu2_markcount) target.storage.hpp_zhoufu2_markcount = 0;
                                        target.addToExpansion(cards, player, 'give').gaintag.add('hpp_zhoufu2');
                                    }
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        target: function (player, target) {
                                            if (target.getExpansions('hpp_zhoufu2').length && target.hp < 3) return -1;
                                            return -2;
                                        },
                                    },
                                },
                                group: ['hpp_zhoufu_judge', 'hpp_zhoufu_losehp'],
                                subSkill: {
                                    judge: {
                                        audio: 'zhoufu',
                                        trigger: { global: 'judgeBefore' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return !event.directresult && event.player.getExpansions('hpp_zhoufu2').length;
                                        },
                                        logTarget: 'player',
                                        content: function () {
                                            var cards = [trigger.player.getExpansions('hpp_zhoufu2')[0]];
                                            trigger.directresult = cards[0];
                                        },
                                    },
                                    losehp: {
                                        audio: 'zhoufu',
                                        trigger: { global: 'phaseEnd' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.hasHistory('lose', function (evt) {
                                                    if (!evt || !evt.xs || !evt.xs.length) return false;
                                                    for (var i in evt.gaintag_map) {
                                                        if (evt.gaintag_map[i].contains('hpp_zhoufu2')) return true;
                                                    }
                                                    return false;
                                                });
                                            });
                                        },
                                        logTarget: function (current) {
                                            return game.filterPlayer(function (current) {
                                                return current.hasHistory('lose', function (evt) {
                                                    if (!evt || !evt.xs || !evt.xs.length) return false;
                                                    for (var i in evt.gaintag_map) {
                                                        if (evt.gaintag_map[i].contains('hpp_zhoufu2')) return true;
                                                    }
                                                    return false;
                                                });
                                            }).sortBySeat();
                                        },
                                        content: function () {
                                            var targets = game.filterPlayer(function (current) {
                                                return current.hasHistory('lose', function (evt) {
                                                    if (!evt || !evt.xs || !evt.xs.length) return false;
                                                    for (var i in evt.gaintag_map) {
                                                        if (evt.gaintag_map[i].contains('hpp_zhoufu2')) return true;
                                                    }
                                                    return false;
                                                });
                                            }).sortBySeat();
                                            while (targets.length) {
                                                targets.shift().loseHp();
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_zhoufu2: { intro: { content: 'expansion' } },
                            hpp_zhoufu3: {},
                            hpp_yingbing: {
                                audio: 'yingbin',
                                trigger: { global: 'useCard' },
                                forced: true,
                                filter: function (event, player) {
                                    var cards = event.player.getExpansions('hpp_zhoufu2');
                                    return cards.length && get.color(cards[0]) == get.color(event.card);
                                },
                                logTarget: 'player',
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    'step 1'
                                    trigger.player.storage.hpp_zhoufu2_markcount++;
                                    if (trigger.player.storage.hpp_zhoufu2_markcount >= 2) {
                                        var cards = trigger.player.getExpansions('hpp_zhoufu2');
                                        trigger.player.loseToDiscardpile(cards);
                                    }
                                    else trigger.player.markSkill('hpp_zhoufu2');
                                },
                            },

                            // 张春华
                            hpp_jueqing: {
                                trigger: { source: 'damageBefore' },
                                forced: true,
                                audio: 'jueqing',
                                check: function () { return false; },
                                content: function () {
                                    trigger.cancel();
                                    trigger.player.loseHp(trigger.num);
                                },
                                ai: {
                                    jueqing: true
                                }
                            },
                            hpp_shangshi: {
                                audio: 'shangshi',
                                trigger: {
                                    player: ['loseAfter', 'changeHp', 'gainMaxHpAfter', 'loseMaxHpAfter', 'enterGame'],
                                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter', 'phaseBefore'],
                                },
                                filter: function (event, player) {
                                    return player.countCards('h') < Math.max(player.getDamagedHp(), 1) && (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                prompt2: function (event, player) {
                                    return '将手牌摸至' + get.cnNumber(Math.max(player.getDamagedHp(), 1)) + '张';
                                },
                                frequent: true,
                                content: function () {
                                    player.draw(Math.max(player.getDamagedHp(), 1) - player.countCards('h'));
                                },
                                ai: {
                                    noh: true,
                                    skillTagFilter: function (player, tag) {
                                        if (tag == 'noh' && Math.max(player.getDamagedHp(), 1) < player.countCards('h')) return false;
                                    },
                                },
                            },

                            // 张飞
                            hpp_tishen: {
                                group: 'hpp_tishen_effect',
                                audio: 'retishen',
                                trigger: { target: 'shaUnhirt' },
                                filter: function (event, player) {
                                    if (player.isPhaseUsing()) return false;
                                    if (get.itemtype(event.cards) != 'cards') return false;
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (event.cards[i].isInPile()) {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                frequent: true,
                                content: function () {
                                    var list = [];
                                    for (var i = 0; i < trigger.cards.length; i++) {
                                        if (trigger.cards[i].isInPile()) {
                                            list.push(trigger.cards[i]);
                                        }
                                    }
                                    player.gain(list, 'gain2');
                                },
                                subSkill: {
                                    effect: {
                                        audio: 'retishen',
                                        trigger: { player: 'shaMiss' },
                                        filter: function (event, player) {
                                            return player.isPhaseUsing();
                                        },
                                        frequent: true,
                                        content: function () {
                                            trigger.card.hpp_tishen_effect = true;
                                            player.addTempSkill('hpp_tishen_effect2', 'phaseUseAfter');
                                        },
                                    },
                                    effect2: {
                                        group: ['hpp_tishen_effect3', 'hpp_tishen_effect4'],
                                        audio: 'retishen',
                                        trigger: { player: 'useCardToPlayered' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return event.card.hpp_tishen_effect2;
                                        },
                                        logTarget: 'target',
                                        content: function () {
                                            var target = trigger.target;
                                            trigger.directHit.add(target);
                                            var id = target.playerid;
                                            var map = trigger.customArgs;
                                            if (!map[id]) map[id] = {};
                                            if (!map[id].extraDamage) map[id].extraDamage = 0;
                                            map[id].extraDamage++;
                                        },
                                    },
                                    effect3: {
                                        charlotte: true,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            return event.card.hpp_tishen_effect2;
                                        },
                                        direct: true,
                                        lastDo: true,
                                        content: function () {
                                            player.removeSkill('hpp_tishen_effect2');
                                        },
                                    },
                                    effect4: {
                                        charlotte: true,
                                        trigger: { player: 'useCard1' },
                                        filter: function (event, player) {
                                            if (!event.card || event.card.name != 'sha') return false;
                                            if (event.card.hpp_tishen_effect) return false;
                                            return true;
                                        },
                                        direct: true,
                                        firstDo: true,
                                        content: function () {
                                            trigger.card.hpp_tishen_effect2 = true;
                                        },
                                    },
                                },
                            },

                            // 张郃
                            hpp_qiaobian: {
                                audio: 'qiaobian',
                                group: ['hpp_qiaobian1', 'qiaobian2', 'qiaobian3', 'hpp_qiaobian4'],
                                trigger: { player: 'phaseEnd' },
                                filter: function (event, player) {
                                    return player.getHistory('skipped').length >= 3;
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    player.draw(2);
                                },
                            },
                            hpp_qiaobian1: {
                                trigger: { player: 'phaseJudgeBefore' },
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard(get.prompt('hpp_qiaobian'), '弃置一张手牌并跳过判定阶段').set('ai', function (card) {
                                        var player = _status.event.player, list = player.getHistory('skipped'), num = list.length + 1;
                                        if (player.countCards('j')) return 10 - get.useful(card);
                                        if (num >= 3) return -1;
                                        if (player.countCards('h') > 1) {
                                            if (!list.contains('phaseDraw')) {
                                                var check1 = function () {
                                                    var i, num = 0, num2 = 0, players = game.filterPlayer();
                                                    for (i = 0; i < players.length; i++) {
                                                        if (player != players[i] && players[i].countCards('h')) {
                                                            var att = get.attitude(player, players[i]);
                                                            if (att <= 0) num++;
                                                            if (att < 0) num2++;
                                                        }
                                                    }
                                                    return num >= 2 && num2 > 0;
                                                };
                                                if (check1()) num++;
                                            }
                                            if (!list.contains('phaseUse')) {
                                                var check;
                                                if (!player.canMoveCard(true)) check = false;
                                                else {
                                                    check = game.hasPlayer(function (current) {
                                                        return get.attitude(player, current) > 0 && current.countCards('j');
                                                    });
                                                    if (!check) {
                                                        if (player.countCards('h') > player.hp + 1) check = false;
                                                        else if (player.countCards('h', { name: ['wuzhong'] })) check = false;
                                                        else check = true;
                                                    }
                                                }
                                                if (check) num++;
                                            }
                                            if (num == 2 && !list.contains('phaseDiscard')) num++;
                                        }
                                        if (num == 3) return 10 - get.useful(card);
                                        return -1;
                                    }).set('logSkill', 'hpp_qiaobian').setHiddenSkill('hpp_qiaobian');
                                    'step 1'
                                    if (result.bool) trigger.cancel();
                                },
                            },
                            hpp_qiaobian4: {
                                trigger: { player: 'phaseDiscardBefore' },
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var next = player.chooseToDiscard(get.prompt('hpp_qiaobian'), '弃置一张手牌并跳过弃牌阶段').set('ai', function (card) {
                                        return _status.event.bool ? (100 - get.useful(card)) : -1;
                                    }).set('logSkill', 'hpp_qiaobian').setHiddenSkill('hpp_qiaobian').set('bool', player.needsToDiscard() || player.getHistory('skipped').length == 2);
                                    'step 1'
                                    if (result.bool) trigger.cancel();
                                },
                            },

                            // 张济
                            hpp_lueming: {
                                audio: 'xinfu_lveming',
                                inherit: 'xinfu_lveming',
                                filterTarget: function (card, player, target) {
                                    return player != target && target.countCards('e') <= player.countCards('e');
                                },
                                mark: false,
                                content: function () {
                                    'step 0'
                                    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13].map((i) => get.strNumber(i));
                                    target.chooseControl(list).set('ai', function () {
                                        return get.rand(0, 12);
                                    }).set('prompt', '掠命：请选择一个点数').set('prompt2', '若' + get.translation(player) + '的判定点数与你选择的点数相同，则对你造成2点伤害，否则其随机获得你区域里的一张牌');
                                    'step 1'
                                    if (result.control) {
                                        target.$damagepop(result.control, 'thunder');
                                        event.num = result.index + 1;
                                        game.log(target, '选择的点数为', '#y' + get.strNumber(event.num));
                                        player.judge(function (card) {
                                            if (card.number == _status.event.getParent('hpp_lueming').num) return 4;
                                            return 0;
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) target.damage(2);
                                    else player.gain(target.getCards('hej').randomGet(), target, 'giveAuto', 'bySelf');
                                },
                            },
                            hpp_tunjun: {
                                unique: true,
                                audio: 'xinfu_tunjun',
                                enable: 'phaseUse',
                                filterTarget: true,
                                skillAnimation: true,
                                animationColor: 'metal',
                                mark: true,
                                limited: true,
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_tunjun');
                                    event.num = player.getAllHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_lueming';
                                    }).length + 1;
                                    event.toequip = [];
                                    'step 1'
                                    var equip = get.cardPile(function (card) {
                                        var bool1 = true;
                                        for (var i = 0; i < event.toequip.length; i++) {
                                            if (get.type(card) == 'equip' && get.subtype(card) == get.subtype(event.toequip[i])) bool1 = false;
                                        }
                                        return (get.type(card) == 'equip' && !event.toequip.contains(card) && target.isEmpty(get.subtype(card)) && bool1);
                                    });
                                    if (equip) event.toequip.push(equip);
                                    else event.num = 0;
                                    event.num--;
                                    'step 2'
                                    if (event.num > 0) event.goto(1);
                                    'step 3'
                                    for (var i = 0; i < event.toequip.length; i++) {
                                        target.chooseUseTarget(event.toequip[i], true).set('animate', false).set('nopopup', true);
                                    }
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        player: function (player, target) {
                                            if (get.attitude(player, target) <= 0) return 0;
                                            if (target.countCards('e') + player.getAllHistory('useSkill', function (evt) {
                                                return evt.skill == 'hpp_lueming';
                                            }).length < 3) return 0;
                                            return 1 / (target.countCards('e') + 1);
                                        },
                                    },
                                },
                            },

                            // 张角
                            hpp_leiji: {
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + 2;
                                    },
                                },
                                audio: 'releiji',
                                trigger: { player: ['useCard', 'respond'] },
                                filter: function (event, player) {
                                    return event.card.name == 'shan' || event.card.name == 'shandian';
                                },
                                direct: true,
                                content: function () {
                                    'step 0';
                                    player.chooseTarget(get.prompt('hpp_leiji'), '令一名其他角色进行判定', lib.filter.notMe).set('ai', function (target) {
                                        if (target.hasSkill('hongyan')) return 0;
                                        return get.damageEffect(target, _status.event.player, _status.event.player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_leiji', result.targets);
                                        event.target = result.targets[0];
                                        event.target.judge(function (card) {
                                            var suit = get.suit(card);
                                            if (suit == 'spade') return -4;
                                            if (suit == 'club') return -2;
                                            return 0;
                                        }).judge2 = function (result) {
                                            return result.bool == false ? true : false;
                                        };
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.suit == 'club') {
                                        target.damage('thunder');
                                        player.recover();
                                    }
                                    else if (result.suit == 'spade') target.damage(2, 'thunder');
                                },
                                ai: {
                                    useShan: true,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') && !player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) {
                                                var hastarget = game.hasPlayer(function (current) {
                                                    return get.attitude(target, current) < 0;
                                                });
                                                var be = target.countCards('e', { color: 'black' });
                                                if (target.countCards('h', 'shan') && be) {
                                                    if (!target.hasSkill('hpp_guidao')) return 0;
                                                    return [0, hastarget ? target.countCards('he') / 2 : 0];
                                                }
                                                if (target.countCards('h', 'shan') && target.countCards('h') > 2) {
                                                    if (!target.hasSkill('hpp_guidao')) return 0;
                                                    return [0, hastarget ? target.countCards('h') / 4 : 0];
                                                }
                                                if (target.countCards('h') > 3 || (be && target.countCards('h') >= 2)) {
                                                    return [0, 0];
                                                }
                                                if (target.countCards('h') == 0) {
                                                    return [1.5, 0];
                                                }
                                                if (target.countCards('h') == 1 && !be) {
                                                    return [1.2, 0];
                                                }
                                                if (!target.hasSkill('hpp_guidao')) return [1, 0.05];
                                                return [1, Math.min(0.5, (target.countCards('h') + be) / 4)];
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_guidao: {
                                audio: 'xinguidao',
                                trigger: { global: 'judge' },
                                filter: function (event, player) {
                                    return player.countCards('hes', { color: 'black' }) > 0;
                                },
                                direct: true,
                                content: function () {
                                    "step 0"
                                    player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                                        get.translation(trigger.player.judging[0]) + '，' + get.prompt('hpp_guidao'), 'hes', function (card) {
                                            if (get.color(card) != 'black') return false;
                                            var player = _status.event.player;
                                            var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                                            if (mod2 != 'unchanged') return mod2;
                                            var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);
                                            if (mod != 'unchanged') return mod;
                                            return true;
                                        }).set('ai', function (card) {
                                            var trigger = _status.event.getTrigger();
                                            var player = _status.event.player;
                                            var judging = _status.event.judging;
                                            var result = trigger.judge(card) - trigger.judge(judging);
                                            var attitude = get.attitude(player, trigger.player);
                                            if (attitude == 0 || result == 0) {
                                                if (trigger.player != player) return 0;
                                                if (game.hasPlayer(function (current) {
                                                    return get.attitude(player, current) < 0;
                                                })) {
                                                    var checkx = lib.skill.xinleiji.judgeCheck(card, true) - lib.skill.xinleiji.judgeCheck(judging);
                                                    if (checkx > 0) return checkx;
                                                }
                                                return 0;
                                            };
                                            if (attitude > 0) {
                                                return result;
                                            }
                                            else {
                                                return -result;
                                            }
                                        }).set('judging', trigger.player.judging[0]);
                                    "step 1"
                                    if (result.bool) {
                                        player.respond(result.cards, 'highlight', 'hpp_guidao', 'noOrdering');
                                    }
                                    else {
                                        event.finish();
                                    }
                                    "step 2"
                                    if (result.bool) {
                                        player.$gain2(trigger.player.judging[0]);
                                        player.gain(trigger.player.judging[0]);
                                        var card = result.cards[0];
                                        if (get.suit(card) == 'spade' && get.number(card) > 1 && get.number(card) < 10) player.draw('nodelay');
                                        trigger.player.judging[0] = result.cards[0];
                                        trigger.orderingCards.addArray(result.cards);
                                        game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                    }
                                    "step 3"
                                    game.delay(2);
                                },
                                ai: {
                                    rejudge: true,
                                    tag: {
                                        rejudge: 1
                                    }
                                }
                            },
                            hpp_huangtian: {
                                audio: 'huangtian2',
                                unique: true,
                                zhuSkill: true,
                                global: 'hpp_huangtian2',
                                group: 'hpp_huangtian4',
                            },
                            hpp_huangtian2: {
                                audio: 'huangtian2',
                                enable: 'phaseUse',
                                discard: false,
                                lose: false,
                                delay: false,
                                line: true,
                                direct: true,
                                clearTime: true,
                                prepare: function (cards, player, targets) {
                                    targets[0].logSkill('hpp_huangtian');
                                },
                                prompt: function () {
                                    var player = _status.event.player;
                                    var list = game.filterPlayer(function (target) {
                                        return target != player && target.hasZhuSkill('hpp_huangtian', player);
                                    });
                                    var str = '将一张【闪】或【闪电】或黑桃手牌交给' + get.translation(list);
                                    if (list.length > 1) str += '中的一人';
                                    return str;
                                },
                                filter: function (event, player) {
                                    if (player.group != 'qun') return false;
                                    if (player.countCards('h', { name: ['shan', 'shandian'] }) + player.countCards('h', { suit: 'spade' }) == 0) return false;
                                    return game.hasPlayer(function (target) {
                                        return target != player && target.hasZhuSkill('hpp_huangtian', player) && !target.hasSkill('hpp_huangtian3');
                                    });
                                },
                                filterCard: function (card) {
                                    return card.name == 'shan' || card.name == 'shandian' || get.suit(card) == 'spade';
                                },
                                log: false,
                                visible: true,
                                filterTarget: function (card, player, target) {
                                    return target != player && target.hasZhuSkill('hpp_huangtian', player) && !target.hasSkill('hpp_huangtian3');
                                },
                                content: function () {
                                    target.gain(cards, player, 'giveAuto');
                                    target.addTempSkill('hpp_huangtian3', 'phaseUseEnd');
                                },
                                ai: {
                                    expose: 0.3,
                                    order: 10,
                                    result: { target: 1 },
                                },
                            },
                            hpp_huangtian3: {},
                            hpp_huangtian4: {
                                audio: 'huangtian2',
                                frequent: true,
                                trigger: { global: ['useCardAfter', 'responseAfter'] },
                                filter: function (event, player) {
                                    return event.player != player && event.card.isCard && event.card.name == 'shan' && event.cards.filterInD().length > 0 && event.player.group == 'qun' && player.hasZhuSkill('hpp_huangtian');
                                },
                                prompt2: function (event, player) {
                                    return '获得' + get.translation(event.cards.filterInD());
                                },
                                usable: 1,
                                logTarget: 'player',
                                content: function () {
                                    player.gain(trigger.cards.filterInD(), 'gain2');
                                },
                            },

                            // 张梁
                            hpp_jijun: {
                                audio: 'xinfu_jijun',
                                trigger: { global: 'useCardToPlayer' },
                                filter: function (event, player) {
                                    var bool1 = (event.targets.length == 1 && (event.card.name == 'sha' || get.type2(event.card) == 'trick'));
                                    var bool2 = (event.card.name == 'sha');
                                    if (event.player == player && bool1) return true;
                                    if (event.target == player && bool2) return true;
                                    return false;
                                },
                                forced: true,
                                content: function () {
                                    player.judge(function (card) {
                                        return get.color(card) == 'black' ? 1.5 : -1.5;
                                    }).set('callback', function () {
                                        if (event.judgeResult.color == 'black' && get.position(card, true) == 'o') player.addToExpansion('gain2', [card]).gaintag.add('hpp_jijun');
                                    });
                                },
                                marktext: '方',
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                            },
                            hpp_fangtong: {
                                audio: 'xinfu_fangtong',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return player.getExpansions('hpp_jijun').length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseButton([1, 3], [get.prompt2('hpp_fangtong'), player.getExpansions('hpp_jijun')]).set('ai', function (button) {
                                        var player = _status.event.player;
                                        if (player.getExpansions('hpp_jijun').length >= 3 && game.hasPlayer(function (current) {
                                            return get.damageEffect(current, player, player, 'thunder') > 0;
                                        })) return 3;
                                        if (ui.selected.buttons.length == 1 && player.isDamaged()) return 2;
                                        if (!ui.selected.buttons.length) return 1;
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.links) {
                                        player.logSkill('hpp_fangtong');
                                        var num = result.links.length;
                                        player.loseToDiscardpile(result.links);
                                        event.num = num;
                                    }
                                    else event.finish();
                                    'step 2'
                                    game.delay();
                                    'step 3'
                                    switch (num) {
                                        case 1:
                                            player.draw();
                                            break;
                                        case 2:
                                            if (player.isDamaged()) player.recover();
                                            break;
                                        case 3:
                                            player.chooseTarget('对一名角色造成2点雷属性伤害', true).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.damageEffect(target, player, player, 'thunder');
                                            });
                                            break;
                                    }
                                    if (num != 3) event.finish();
                                    'step 4'
                                    if (result.bool) {
                                        player.line(result.targets[0]);
                                        result.targets[0].damage(2, 'thunder');
                                    }
                                },
                            },

                            // 张辽
                            hpp_zhengbing: {
                                audio: 'hppzhengbing',
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (card.hasGaintag('hpp_zhengbing')) return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && card.hasGaintag('hpp_zhengbing')) return false;
                                    },
                                },
                                group: 'hpp_zhengbing_mark',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h', function (card) {
                                        return card.hasGaintag('hpp_zhengbing');
                                    });
                                },
                                filterCard: function (card) {
                                    return card.hasGaintag('hpp_zhengbing');
                                },
                                check: function (card) {
                                    return 7 - get.value(card);
                                },
                                prepare: function (cards, player) {
                                    player.$throw(cards, 1000);
                                    game.log(player, '将', cards, '置入了弃牌堆');
                                },
                                discard: false,
                                loseTo: 'discardPile',
                                visible: true,
                                delay: 0.5,
                                content: function () {
                                    player.draw(player.countCards('h', function (card) {
                                        return card.hasGaintag('hpp_zhengbing');
                                    }) ? 1 : 2);
                                },
                                ai: {
                                    order: 10,
                                    result: { player: 1 },
                                },
                                subSkill: {
                                    mark: {
                                        charlotte: true,
                                        trigger: { player: 'gainBegin' },
                                        filter: function (event, player) {
                                            return lib.translate[event.getParent(3).name] == '突袭';
                                        },
                                        direct: true,
                                        firstDo: true,
                                        content: function () {
                                            trigger.gaintag.add('hpp_zhengbing');
                                        },
                                    },
                                },
                            },

                            // 张松
                            hpp_xiantu: {
                                audio: 'xiantu1',
                                trigger: { global: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return event.player != player;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) > 0;
                                },
                                logTarget: 'player',
                                content: function () {
                                    'step 0'
                                    player.draw(2);
                                    player.addTempSkill('hpp_xiantu2', 'phaseUseAfter');
                                    'step 1'
                                    player.chooseCard(2, 'he', true, '交给' + get.translation(trigger.player) + '两张牌').set('ai', function (card) {
                                        if (ui.selected.cards.length && card.name == ui.selected.cards[0].name) return -1;
                                        if (get.tag(card, 'damage')) return 1;
                                        if (get.type(card) == 'equip') return 1;
                                        return 0;
                                    });
                                    'step 2'
                                    trigger.player.gain(result.cards, player, 'giveAuto');
                                },
                                ai: {
                                    expose: 0.3,
                                    threaten: 3,
                                },
                            },
                            hpp_xiantu2: {
                                charlotte: true,
                                audio: 'xiantu2',
                                trigger: { global: 'phaseUseEnd' },
                                filter: function (event, player) {
                                    return !event.player.getHistory('sourceDamage', function (evt) {
                                        return evt.getParent(4) == event;
                                    }).length;
                                },
                                forced: true,
                                content: function () {
                                    player.loseHp();
                                },
                            },

                            // 张星彩
                            hpp_qiangwu: {
                                audio: 'qiangwu',
                                enable: 'phaseUse',
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    player.judge();
                                    'step 1'
                                    if (get.position(result.card, true) == 'd') player.gain(result.card, 'gain2');
                                    player.storage.qiangwu = result.number;
                                    player.addTempSkill('qiangwu3', 'phaseUseAfter');
                                },
                                ai: {
                                    order: 11,
                                    result: { player: 1 },
                                },
                            },

                            // 张媱
                            hpp_yuanyu: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    'step 1'
                                    if (player.countCards('h') > 0 && game.hasPlayer(current => current != player)) {
                                        var suits = lib.suit.slice(0), cards = player.getExpansions('hpp_yuanyu');
                                        for (var i of cards) suits.remove(get.suit(i, false));
                                        var str = '选择一张手牌，作为“怨”置于武将牌上；同时选择一名其他角色，令该角色获得〖怨语〗的后续效果。'
                                        if (suits.length) {
                                            str += '目前“怨”中未包含的花色：';
                                            for (var i of suits) str += get.translation(i);
                                        }
                                        player.chooseCardTarget({
                                            filterCard: true,
                                            filterTarget: lib.filter.notMe,
                                            position: 'h',
                                            prompt: '怨语：选择置于武将牌上的牌和目标',
                                            prompt2: str,
                                            suits: suits,
                                            forced: true,
                                            ai1: function (card) {
                                                var val = get.value(card), evt = _status.event;
                                                if (evt.suits.contains(get.suit(card, false))) return 8 - get.value(card);
                                                return 5 - get.value(card);
                                            },
                                            ai2: function (target) {
                                                var player = _status.event.player;
                                                if (player.storage.hpp_yuanyu_damage && player.storage.hpp_yuanyu_damage.contains(target)) return 0;
                                                return -get.attitude(player, target);
                                            },
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    var target = result.targets[0];
                                    player.addSkill('hpp_yuanyu_damage');
                                    player.markAuto('hpp_yuanyu_damage', result.targets);
                                    player.line(target, 'green');
                                    if (!target.storage.hpp_yuanyu_mark) {
                                        target.storage.hpp_yuanyu_mark = player;
                                        target.markSkillCharacter('hpp_yuanyu_mark', player, '怨语', '已获得〖怨语〗效果');
                                        target.addSkill('hpp_yuanyu_mark');
                                    }
                                    player.addToExpansion(result.cards, player, 'give').gaintag.add('hpp_yuanyu');
                                },
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                    player.removeSkill('hpp_yuanyu_damage');
                                },
                                ai: {
                                    order: 7,
                                    result: {
                                        player: 1,
                                    },
                                },
                                subSkill: {
                                    mark: {
                                        mark: 'character',
                                        charlotte: true,
                                        intro: {
                                            content: '已获得〖怨语〗效果',
                                            onunmark: true,
                                        },
                                    },
                                    damage: {
                                        trigger: { global: ['damageSource', 'phaseDiscardBegin'] },
                                        forced: true,
                                        charlotte: true,
                                        onremove: function (player, skill) {
                                            if (player.storage[skill]) {
                                                for (var i of player.storage[skill]) {
                                                    if (i.storage.hpp_yuanyu_mark == player) i.unmarkSkill('hpp_yuanyu_mark');
                                                }
                                            }
                                            delete player.storage[skill];
                                        },
                                        filter: function (event, player) {
                                            if (event.name == 'damage') {
                                                var source = event.source;
                                                return source && player.getStorage('hpp_yuanyu_damage').contains(source) && source.countCards('h') > 0;
                                            }
                                            else {
                                                if (player == event.player) {
                                                    return player.getStorage('hpp_yuanyu_damage').some(function (target) {
                                                        return target.isIn() && target.countCards('h') > 0;
                                                    });
                                                }
                                                else if (player.getStorage('hpp_yuanyu_damage').contains(event.player)) {
                                                    return event.player.countCards('h') > 0;
                                                }
                                                return false;
                                            }
                                        },
                                        content: function () {
                                            'step 0'
                                            if (trigger.name == 'phaseDiscard') {
                                                if (trigger.player == player) {
                                                    event.targets = player.getStorage('hpp_yuanyu_damage').filter(function (target) {
                                                        return target.isIn() && target.countCards('h') > 0;
                                                    }).sortBySeat();
                                                }
                                                else event.targets = [trigger.player];
                                            }
                                            else event.targets = [trigger.source];
                                            'step 1'
                                            event.target = event.targets.shift();
                                            event.count = trigger.name == 'damage' ? trigger.num : 1;
                                            'step 2'
                                            event.count--;
                                            var suits = lib.suit.slice(0), cards = player.getExpansions('hpp_yuanyu');
                                            for (var i of cards) suits.remove(get.suit(i, false));
                                            var next = target.chooseCard('h', true, '将一张手牌置于' + get.translation(player) + '的武将牌上');
                                            next.set('suits', suits);
                                            next.set('ai', function (card) {
                                                var val = get.value(card), evt = _status.event;
                                                if (evt.suits.contains(get.suit(card, false))) return 5 - get.value(card);
                                                return 8 - get.value(card);
                                            });
                                            if (suits.length) {
                                                var str = '目前未包含的花色：';
                                                for (var i of suits) str += get.translation(i);
                                                next.set('prompt2', str);
                                            }
                                            'step 3'
                                            player.addToExpansion(result.cards, target, 'give').gaintag.add('hpp_yuanyu');
                                            'step 4'
                                            if (!player.hasSkill('hpp_yuanyu_damage')) event.finish();
                                            else if (event.count > 0 && target.countCards('h') > 0) event.goto(2);
                                            else if (event.targets.length > 0) event.goto(1);
                                        },
                                    },
                                },
                            },
                            hpp_xiyan: {
                                audio: 2,
                                trigger: { player: 'addToExpansionAfter' },
                                filter: function (event, player) {
                                    if (!event.gaintag.contains('hpp_yuanyu')) return false;
                                    var cards = player.getExpansions('hpp_yuanyu');
                                    if (cards.length < lib.suit.length) return false;
                                    var suits = lib.suit.slice(0);
                                    for (var i of cards) {
                                        suits.remove(get.suit(i));
                                        if (!suits.length) return true;
                                    }
                                    return false;
                                },
                                logTarget: () => _status.currentPhase,
                                prompt2: '获得所有“怨”',
                                check: () => true,
                                content: function () {
                                    'step 0'
                                    player.removeSkill('hpp_yuanyu_damage');
                                    var cards = player.getExpansions('hpp_yuanyu');
                                    player.gain(cards, 'gain2');
                                    'step 1'
                                    var target = _status.currentPhase;
                                    if (player == target) {
                                        player.addMark('hpp_xiyan_buff', 4, false);
                                        player.addTempSkill('hpp_xiyan_buff');
                                        delete player.getStat('skill').hpp_yuanyu;
                                        event.finish();
                                    }
                                    else {
                                        player.chooseBool('夕颜：是否令' + get.translation(target) + '本回合的手牌上限-4且不能使用基本牌？').set('ai', function () {
                                            return _status.event.bool;
                                        }).set('bool', get.attitude(player, target) < 0);
                                    }
                                    'step 2'
                                    if (result.bool) {
                                        var target = _status.currentPhase;
                                        target.addMark('hpp_xiyan_debuff', 4, false);
                                        target.addTempSkill('hpp_xiyan_debuff');
                                    }
                                },
                                subSkill: {
                                    buff: {
                                        charlotte: true,
                                        mark: true,
                                        marktext: " +4 ",
                                        intro: {
                                            content: "本回合手牌上限+4且使用牌无次数限制",
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + player.countMark('hpp_xiyan_buff');
                                            },
                                            cardUsable: function (card, player) {
                                                return Infinity;
                                            },
                                        },
                                        sub: true,
                                    },
                                    debuff: {
                                        charlotte: true,
                                        mark: true,
                                        marktext: " -4 ",
                                        intro: {
                                            content: "本回合手牌上限-#且不能使用基本牌",
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num - player.countMark('hpp_xiyan_debuff');
                                            },
                                            cardEnabled: function (card) {
                                                if (get.type(card) == 'basic') return false;
                                            },
                                            cardSavable: function (card) {
                                                if (get.type(card) == 'basic') return false;
                                            },
                                        },
                                        sub: true,
                                    },
                                },
                            },

                            // 张昭张纮
                            hpp_zhijian: {
                                audio: 'zhijian',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h', { type: 'equip' }) > 0;
                                },
                                filterCard: function (card) {
                                    return get.type(card) == 'equip';
                                },
                                check: function (card) {
                                    var player = _status.currentPhase;
                                    if (player.countCards('he', { subtype: get.subtype(card) }) > 1) {
                                        return 11 - get.equipValue(card);
                                    }
                                    return 6 - get.value(card);
                                },
                                filterTarget: function (card, player, target) {
                                    if (target.isMin()) return false;
                                    var type = get.subtype(card);
                                    // return player!=target&&target.isEmpty(type);
                                    return player != target;
                                },
                                content: function () {
                                    target.equip(cards[0]);
                                    player.draw();
                                },
                                discard: false,
                                prepare: function (cards, player, targets) {
                                    player.$give(cards, targets[0], false);
                                },
                                ai: {
                                    basic: {
                                        order: 10
                                    },
                                    result: {
                                        target: function (player, target) {
                                            var card = ui.selected.cards[0];
                                            if (card) return get.effect(target, card, target, target);
                                            return 0;
                                        },
                                    },
                                    threaten: 1.3
                                }
                            },
                            hpp_guzheng: {
                                audio: 'guzheng',
                                trigger: { global: 'phaseDiscardAfter' },
                                filter: function (event, player) {
                                    if (event.player != player && event.player.isIn()) {
                                        return event.player.getHistory('lose', function (evt) {
                                            return evt.type == 'discard' && evt.getParent('phaseDiscard') == event && evt.hs.filterInD('d').length > 0;
                                        }).length > 0;
                                    }
                                    return false;
                                },
                                checkx: function (event, player, cards, cards2) {
                                    if (cards.length > 2 || get.attitude(player, event.player) > 0) return true;
                                    for (var i = 0; i < cards2.length; i++) {
                                        if (get.value(cards2[i], event.player, 'raw') < 0) return true;
                                    }
                                    return false;
                                },
                                direct: true,
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    var cards = [];
                                    var cards2 = [];
                                    game.getGlobalHistory('cardMove', function (evt) {
                                        if (evt.name == 'cardsDiscard' && evt.getParent('phaseDiscard') == trigger) cards.addArray(evt.cards.filterInD('d'));
                                    });
                                    game.countPlayer2(function (current) {
                                        current.getHistory('lose', function (evt) {
                                            if (evt.type != 'discard' || evt.getParent('phaseDiscard') != trigger) return;
                                            cards.addArray(evt.cards.filterInD('d'));
                                            if (current == trigger.player) cards2.addArray(evt.hs.filterInD('d'));
                                        })
                                    });
                                    event.cards = cards;
                                    var check = lib.skill.hpp_guzheng.checkx(trigger, player, cards, cards2);
                                    player.chooseCardButton(cards, '固政：选择令' + get.translation(trigger.player) + '收回的牌').set('ai', function (button) {
                                        if (_status.event.check) {
                                            return 20 - get.value(button.link, _status.event.getTrigger().player);
                                        }
                                        return 0;
                                    }).set('check', check).set('cards', cards2).set('filterButton', function (button) {
                                        return _status.event.cards.contains(button.link);
                                    }).setHiddenSkill(event.name);
                                    'step 1'
                                    if (result.bool) {
                                        game.delay(0.5);
                                        player.logSkill('hpp_guzheng', trigger.player);
                                        trigger.player.gain(result.links[0]);
                                        trigger.player.$gain2(result.links[0]);
                                        game.log(trigger.player, '收回了', result.links[0]);
                                        event.cards.remove(result.links[0]);
                                        if (event.cards.length) {
                                            player.gain(event.cards);
                                            player.$gain2(event.cards);
                                            game.log(player, '收回了', event.cards);
                                        }
                                        else player.draw();
                                        game.delay();
                                    }
                                },
                                ai: { expose: 0.2 },
                            },

                            // 赵襄
                            hpp_fanghun: {
                                audio: 'fanghun',
                                mod: {
                                    aiValue: function (player, card, num) {
                                        if (card.name != 'sha' && card.name != 'shan') return;
                                        var geti = function () {
                                            var cards = player.getCards('hs', function (card) {
                                                return card.name == 'sha' || card.name == 'shan';
                                            });
                                            if (cards.contains(card)) {
                                                return cards.indexOf(card);
                                            }
                                            return cards.length;
                                        };
                                        return Math.max(num, [7, 5, 5, 3][Math.min(geti(), 3)]);
                                    },
                                },
                                frequent: true,
                                trigger: {
                                    player: 'useCard',
                                    target: 'useCardToTargeted',
                                },
                                filter: function (event) {
                                    return event.card && event.card.name == 'sha';
                                },
                                content: function () {
                                    player.addMark('fanghun', trigger.num || 1);
                                    player.addMark('fanghun2', trigger.num || 1, false);
                                },
                                group: ['hpp_fanghun_sha', 'hpp_fanghun_draw'],
                                subSkill: {
                                    draw: {
                                        trigger: { player: ['useCardAfter', 'respondAfter'] },
                                        forced: true,
                                        popup: false,
                                        filter: function (event) {
                                            return event.skill == 'hpp_fanghun_sha' || event.skill == 'hpp_fanghun_shan';
                                        },
                                        content: function () {
                                            player.draw();
                                        }
                                    },
                                    sha: {
                                        audio: 'fanghun',
                                        enable: ['chooseToUse', 'chooseToRespond'],
                                        prompt: '弃置一枚【梅影】标记，将杀当做闪，或将闪当做杀',
                                        viewAs: function (cards, player) {
                                            var name = false;
                                            switch (get.name(cards[0], player)) {
                                                case 'sha': name = 'shan'; break;
                                                case 'shan': name = 'sha'; break;
                                            }
                                            if (name) return { name: name };
                                            return null;
                                        },
                                        position: 'hs',
                                        check: function (card) {
                                            var player = _status.event.player;
                                            if (_status.event.type == 'phase') {
                                                var max = 0;
                                                var name2;
                                                var list = ['sha'];
                                                var map = { sha: 'shan' }
                                                for (var i = 0; i < list.length; i++) {
                                                    var name = list[i];
                                                    if (player.countCards('hs', map[name]) > 0 && player.getUseValue({ name: name }) > 0) {
                                                        var temp = get.order({ name: name });
                                                        if (temp > max) {
                                                            max = temp;
                                                            name2 = map[name];
                                                        }
                                                    }
                                                }
                                                if (name2 == get.name(card, player)) return 1;
                                                return 0;
                                            }
                                            return 1;
                                        },
                                        filterCard: function (card, player, event) {
                                            event = event || _status.event;
                                            var filter = event._backup.filterCard;
                                            var name = get.name(card, player);
                                            if (name == 'sha' && filter({ name: 'shan', cards: [card] }, player, event)) return true;
                                            if (name == 'shan' && filter({ name: 'sha', cards: [card] }, player, event)) return true;
                                            return false;
                                        },
                                        filter: function (event, player) {
                                            if (!player.storage.fanghun || player.storage.fanghun <= 0) return false;
                                            var filter = event.filterCard;
                                            if (filter({ name: 'sha' }, player, event) && player.countCards('hs', 'shan')) return true;
                                            if (filter({ name: 'shan' }, player, event) && player.countCards('hs', 'sha')) return true;
                                            return false;
                                        },
                                        onrespond: function () { return this.onuse.apply(this, arguments) },
                                        onuse: function (result, player) {
                                            player.removeMark('fanghun', 1);
                                        },
                                        ai: {
                                            respondSha: true,
                                            respondShan: true,
                                            skillTagFilter: function (player, tag) {
                                                if (!player.storage.fanghun || player.storage.fanghun < 0) return false;
                                                var name;
                                                switch (tag) {
                                                    case 'respondSha': name = 'shan'; break;
                                                    case 'respondShan': name = 'sha'; break;
                                                }
                                                if (!player.countCards('hs', name)) return false;
                                            },
                                            order: function (item, player) {
                                                if (player && _status.event.type == 'phase') {
                                                    var max = 0;
                                                    var list = ['sha'];
                                                    var map = { sha: 'shan' }
                                                    for (var i = 0; i < list.length; i++) {
                                                        var name = list[i];
                                                        if (player.countCards('hs', map[name]) > 0 && player.getUseValue({ name: name }) > 0) {
                                                            var temp = get.order({ name: name });
                                                            if (temp > max) max = temp;
                                                        }
                                                    }
                                                    if (max > 0) max += ((player.storage.refuhan || player.storage.twfuhan) ? 0.3 : -0.3);
                                                    return max;
                                                }
                                                if (!player) player = _status.event.player;
                                                return (player.storage.refuhan || player.storage.twfuhan) ? 4 : 1;
                                            },
                                        },
                                    },
                                }
                            },
                            hpp_fuhan: {
                                inherit: 'refuhan',
                                content: function () {
                                    'step 0'
                                    if (player.storage.fanghun) player.draw(player.storage.fanghun);
                                    player.removeMark('fanghun', player.storage.fanghun);
                                    player.awakenSkill('hpp_fuhan');
                                    'step 1'
                                    var list = [];
                                    for (var i in lib.character) {
                                        if (!(lib.skill.hpp_pingjian.getList()).contains(i)) continue;
                                        if (lib.character[i][1] == 'shu') list.push(i);
                                    }
                                    game.countPlayer2(function (current) {
                                        list.remove(current.name);
                                        list.remove(current.name1);
                                        list.remove(current.name2);
                                    });
                                    var players = game.players.concat(game.dead);
                                    for (var i = 0; i < players.length; i++) {
                                        list.remove(players[i].name);
                                        list.remove(players[i].name1);
                                        list.remove(players[i].name2);
                                    }
                                    list = list.randomGets(Math.max(4, game.countPlayer()));
                                    var skills = [];
                                    for (var i of list) {
                                        skills.addArray((lib.character[i][3] || []).filter(function (skill) {
                                            var info = get.info(skill);
                                            return info && !info.zhuSkill && !info.limited && !info.juexingji && !info.hiddenSkill && !info.charlotte && !info.dutySkill;
                                        }));
                                    }
                                    if (!list.length || !skills.length) { event.finish(); return; }
                                    if (player.isUnderControl()) {
                                        game.swapPlayerAuto(player);
                                    }
                                    var switchToAuto = function () {
                                        _status.imchoosing = false;
                                        event._result = {
                                            bool: true,
                                            skills: skills.randomGets(2),
                                        };
                                        if (event.dialog) event.dialog.close();
                                        if (event.control) event.control.close();
                                    };
                                    var chooseButton = function (list, skills) {
                                        var event = _status.event;
                                        if (!event._result) event._result = {};
                                        event._result.skills = [];
                                        var rSkill = event._result.skills;
                                        var dialog = ui.create.dialog('请选择获得至多两个技能', [list, 'character'], 'hidden');
                                        event.dialog = dialog;
                                        var table = document.createElement('div');
                                        table.classList.add('add-setting');
                                        table.style.margin = '0';
                                        table.style.width = '100%';
                                        table.style.position = 'relative';
                                        for (var i = 0; i < skills.length; i++) {
                                            var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                            td.link = skills[i];
                                            table.appendChild(td);
                                            td.innerHTML = '<span>' + get.translation(skills[i]) + '</span>';
                                            td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                                                if (_status.dragged) return;
                                                if (_status.justdragged) return;
                                                _status.tempNoButton = true;
                                                setTimeout(function () {
                                                    _status.tempNoButton = false;
                                                }, 500);
                                                var link = this.link;
                                                if (!this.classList.contains('bluebg')) {
                                                    if (rSkill.length >= 2) return;
                                                    rSkill.add(link);
                                                    this.classList.add('bluebg');
                                                }
                                                else {
                                                    this.classList.remove('bluebg');
                                                    rSkill.remove(link);
                                                }
                                            });
                                        }
                                        dialog.content.appendChild(table);
                                        dialog.add('　　');
                                        dialog.open();

                                        event.switchToAuto = function () {
                                            event.dialog.close();
                                            event.control.close();
                                            game.resume();
                                            _status.imchoosing = false;
                                        };
                                        event.control = ui.create.control('ok', function (link) {
                                            event.dialog.close();
                                            event.control.close();
                                            game.resume();
                                            _status.imchoosing = false;
                                        });
                                        for (var i = 0; i < event.dialog.buttons.length; i++) {
                                            event.dialog.buttons[i].classList.add('selectable');
                                        }
                                        game.pause();
                                        game.countChoose();
                                    };
                                    if (event.isMine()) {
                                        chooseButton(list, skills);
                                    }
                                    else if (event.isOnline()) {
                                        event.player.send(chooseButton, list, skills);
                                        event.player.wait();
                                        game.pause();
                                    }
                                    else {
                                        switchToAuto();
                                    }
                                    'step 2'
                                    var map = event.result || result;
                                    if (map && map.skills && map.skills.length) {
                                        for (var i of map.skills) player.addSkillLog(i);
                                    }
                                    game.broadcastAll(function (list) {
                                        game.expandSkills(list);
                                        for (var i of list) {
                                            var info = lib.skill[i];
                                            if (!info) continue;
                                            if (!info.audioname2) info.audioname2 = {};
                                            info.audioname2.old_yuanshu = 'weidi';
                                        }
                                    }, map.skills);
                                    'step 3'
                                    if (player.isMinHp()) player.recover();
                                },
                            },

                            // 赵云
                            hpp_longdan: {
                                audio: 'longdan_sha',
                                audioname: ['re_zhaoyun'],
                                group: ['hpp_longdan_sha', 'hpp_longdan_shan', 'hpp_longdan_draw'],
                                subSkill: {
                                    draw: {
                                        trigger: { player: ['useCard', 'respond'] },
                                        forced: true,
                                        popup: false,
                                        filter: function (event, player) {
                                            if (!get.zhu(player, 'shouyue')) return false;
                                            return event.skill == 'hpp_longdan_sha' || event.skill == 'hpp_longdan_shan';
                                        },
                                        content: function () {
                                            player.draw();
                                            player.storage.fanghun2++;
                                        }
                                    },
                                    sha: {
                                        audio: 'longdan_sha',
                                        audioname: ['re_zhaoyun'],
                                        enable: ['chooseToUse', 'chooseToRespond'],
                                        filterCard: { name: 'shan' },
                                        viewAs: { name: 'sha' },
                                        viewAsFilter: function (player) {
                                            if (!player.countCards('hs', 'shan')) return false;
                                        },
                                        position: 'hs',
                                        prompt: '将一张闪当杀使用或打出',
                                        check: function () { return 1 },
                                        ai: {
                                            effect: {
                                                target: function (card, player, target, current) {
                                                    if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                                }
                                            },
                                            respondSha: true,
                                            skillTagFilter: function (player) {
                                                if (!player.countCards('hs', 'shan')) return false;
                                            },
                                            order: function () {
                                                return get.order({ name: 'sha' }) + 0.1;
                                            },
                                            useful: -1,
                                            value: -1
                                        }
                                    },
                                    shan: {
                                        audio: 'longdan_sha',
                                        audioname: ['re_zhaoyun'],
                                        enable: ['chooseToRespond', 'chooseToUse'],
                                        filterCard: { name: 'sha' },
                                        viewAs: { name: 'shan' },
                                        prompt: '将一张杀当闪使用或打出',
                                        check: function () { return 1 },
                                        position: 'hs',
                                        viewAsFilter: function (player) {
                                            if (!player.countCards('hs', 'sha')) return false;
                                        },
                                        ai: {
                                            respondShan: true,
                                            skillTagFilter: function (player) {
                                                if (!player.countCards('hs', 'sha')) return false;
                                            },
                                            effect: {
                                                target: function (card, player, target, current) {
                                                    if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                                }
                                            },
                                            order: 4,
                                            useful: -1,
                                            value: -1
                                        }
                                    }
                                }
                            },
                            hpp_yajiao: {
                                group: 'hpp_yajiao_count',
                                audio: 'reyajiao',
                                trigger: { player: ['respond', 'useCard'] },
                                frequent: true,
                                filter: function (event, player) {
                                    return player != _status.currentPhase && get.itemtype(event.cards) == 'cards';
                                },
                                content: function () {
                                    'step 0'
                                    var card = get.cards()[0];
                                    event.card = card;
                                    player.showCards(card, get.translation(player) + '发动了【涯角】');
                                    player.chooseTarget('是否令一名角色获得' + get.translation(card) + '？').set('ai', function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (_status.event.du) {
                                            if (target.hasSkillTag('nodu')) return 0;
                                            return -att;
                                        }
                                        if (att > 0) return att + Math.max(0, 5 - target.countCards('h'));
                                        return att;
                                    }).set('du', event.card.name == 'du');
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target);
                                        target.gain(card, 'gain2');
                                    }
                                    else {
                                        player.$throw(card, 1000);
                                        game.delayx();
                                        game.cardsDiscard(card);
                                        game.log(card, '进入了弃牌堆');
                                    }
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'respond') && target.countCards('h') > 1) return [1, 0.2];
                                        },
                                    },
                                },
                                subSkill: {
                                    count: {
                                        trigger: { player: ['useCardAfter', 'respondAfter'] },
                                        forced: true,
                                        popup: false,
                                        filter: function (event, player) {
                                            return lib.translate[event.skill] == '龙胆' && player == _status.currentPhase;
                                        },
                                        content: function () {
                                            player.addTempSkill('hpp_yajiao_draw');
                                        },
                                    },
                                    draw: {
                                        audio: 'reyajiao',
                                        trigger: { player: 'phaseJieshuBegin' },
                                        // forced: true,
                                        // charlotte: true,
                                        // onremove: true,
                                        frequent: true,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },

                            // 甄姬
                            hpp_luoshen: {
                                audio: 'luoshen',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    var next = player.judge(function (card) {
                                        if (get.color(card) == 'black') return 1;
                                        return -1;
                                    });
                                    next.set('callback', function () {
                                        if (get.position(card, true) == 'o') player.gain(card, 'gain2');
                                    });
                                    'step 1'
                                    if (result.judge > 0) player.chooseBool('是否再次发动【洛神】？').set('frequentSkill', event.name);
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) event.goto(0);
                                },
                            },

                            // 钟会
                            hpp_quanji: {
                                group: 'hpp_quanji_phase',
                                audio: 'requanji',
                                trigger: { player: 'damageEnd' },
                                filter: function (event, player) {
                                    return event.num > 0;
                                },
                                frequent: true,
                                prompt2: '摸两张牌',
                                content: function () {
                                    'step 0'
                                    event.count = trigger.num;
                                    'step 1'
                                    event.count--;
                                    player.draw(2);
                                    'step 2'
                                    if (event.count > 0) player.chooseBool(get.prompt('hpp_quanji'), '摸两张牌').set('frequentSkill', 'hpp_quanji');
                                    else event.finish();
                                    'step 3'
                                    if (result.bool) {
                                        player.logSkill('hpp_quanji');
                                        event.goto(1);
                                    }
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions('quanji');
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + Math.min(5, player.getExpansions('quanji').length);
                                    },
                                },
                                subSkill: {
                                    phase: {
                                        audio: 'requanji',
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            return player.countCards('h');
                                        },
                                        prompt: '将任意张手牌置于武将牌上',
                                        selectCard: [1, Infinity],
                                        filterCard: true,
                                        delay: 0,
                                        discard: false,
                                        lose: false,
                                        delay: false,
                                        check: function (card) {
                                            var player = _status.event.player, num = player.needsToDiscard();
                                            if (!player.getExpansions('quanji').length || num - ui.selected.cards.length - Math.min(5, player.getExpansions('quanji').length + ui.selected.cards.length) > 0) return 5 - get.value(card);
                                            return -1;
                                        },
                                        content: function () {
                                            player.addToExpansion(cards, player, 'give').gaintag.add('quanji');
                                        },
                                        ai: {
                                            order: 5,
                                            result: { player: 1 },
                                        },
                                    },
                                },
                            },
                            hpp_paiyi: {
                                enable: 'phaseUse',
                                usable: 1,
                                audio: 'xinpaiyi',
                                audioname: ['re_zhonghui'],
                                filter: function (event, player) {
                                    return player.getExpansions('quanji').length > 0;
                                },
                                chooseButton: {
                                    dialog: function (event, player) {
                                        return ui.create.dialog('排异', player.getExpansions('quanji'), 'hidden')
                                    },
                                    backup: function (links, player) {
                                        return {
                                            audio: 'xinpaiyi',
                                            audioname: ['re_zhonghui'],
                                            filterTarget: true,
                                            filterCard: function () { return false },
                                            selectCard: -1,
                                            card: links[0],
                                            delay: false,
                                            content: lib.skill.hpp_paiyi.contentx,
                                            ai: {
                                                order: 10,
                                                result: {
                                                    target: function (player, target) {
                                                        if (player != target) return 0;
                                                        if (player.hasSkill('requanji') || (player.countCards('h') + 2 <= player.hp + player.getExpansions('quanji').length)) return 1;
                                                        return 0;
                                                    }
                                                },
                                            },
                                        }
                                    },
                                    prompt: function () { return '请选择〖排异〗的目标' },
                                },
                                contentx: function () {
                                    "step 0"
                                    var card = lib.skill.hpp_paiyi_backup.card;
                                    player.loseToDiscardpile(card);
                                    "step 1"
                                    target.draw(2);
                                    "step 2"
                                    if (target.countCards('h') > player.countCards('h')) {
                                        target.damage();
                                    }
                                },
                                ai: {
                                    order: 1,
                                    combo: 'quanji',
                                    result: {
                                        player: 1,
                                    }
                                }
                            },

                            // 钟繇
                            hpp_huomo: {
                                audio: 'huomo',
                                enable: 'chooseToUse',
                                hiddenCard: function (player, name) {
                                    return get.type(name) == 'basic' && player.hasCard(function (card) {
                                        return get.color(card) == 'black' && get.type(card) != 'basic';
                                    }, 'he');
                                },
                                filter: function (event, player) {
                                    for (var i of lib.inpile) {
                                        if (get.type(i) != 'basic') continue;
                                        if (event.filterCard({ name: i }, player, event)) {
                                            return player.hasCard(function (card) {
                                                return get.color(card) == 'black' && get.type(card) != 'basic';
                                            }, 'he');
                                        }
                                    }
                                    return false;
                                },
                                usable: 2,
                                chooseButton: {
                                    dialog: function (event, player) {
                                        var list = [];
                                        for (var i of lib.inpile) {
                                            if (get.type(i) != 'basic') continue;
                                            if (event.filterCard({ name: i }, player, event)) {
                                                list.push(['基本', '', i]);
                                                if (i == 'sha') for (var j of lib.inpile_nature) list.push(['基本', '', i, j]);
                                            }
                                        }
                                        return ui.create.dialog('活墨', [list, 'vcard'], 'hidden');
                                    },
                                    check: function (button) {
                                        var player = _status.event.player;
                                        var card = { name: button.link[2], nature: button.link[3] };
                                        if (game.hasPlayer(function (current) {
                                            return player.canUse(card, current) && get.effect(current, card, player, player) > 0;
                                        })) {
                                            switch (button.link[2]) {
                                                case 'tao': return 5;
                                                case 'jiu': return 3.01;
                                                case 'shan': return 3.01;
                                                case 'sha':
                                                    if (button.link[3] == 'fire') return 2.95;
                                                    else if (button.link[3] == 'fire') return 2.92;
                                                    else return 2.9;
                                            }
                                        }
                                        return 0;
                                    },
                                    backup: function (links, player) {
                                        return {
                                            check: function (card) {
                                                return 1 / Math.max(0.1, get.value(card));
                                            },
                                            filterCard: function (card) {
                                                return get.type(card) != 'basic' && get.color(card) == 'black';
                                            },
                                            viewAs: {
                                                name: links[0][2],
                                                nature: links[0][3],
                                                suit: 'none',
                                                number: null,
                                                isCard: true,
                                            },
                                            position: 'he',
                                            popname: true,
                                            ignoreMod: true,
                                            precontent: function () {
                                                'step 0'
                                                player.logSkill('hpp_huomo');
                                                var card = event.result.cards[0];
                                                event.card = card;
                                                player.$throw(card, 1000);
                                                game.log(player, '将', card, '置于牌堆顶');
                                                event.result.card = { name: event.result.card.name, nature: event.result.card.nature };
                                                event.result.cards = [];
                                                player.lose(card, ui.cardPile, 'visible', 'insert');
                                                'step 1'
                                                game.delay();
                                            },
                                        }
                                    },
                                    prompt: function (links, player) {
                                        return '将一张黑色非基本牌置于牌堆顶并视为使用一张' + get.translation(links[0][3] || '') + get.translation(links[0][2]);
                                    }
                                },
                                ai: {
                                    order: function () {
                                        var player = _status.event.player;
                                        var event = _status.event;
                                        if (event.filterCard({ name: 'jiu' }, player, event) && get.effect(player, { name: 'jiu' }) > 0) {
                                            return 3.1;
                                        }
                                        return 2.9;
                                    },
                                    respondSha: true,
                                    fireAttack: true,
                                    respondShan: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (player.hasCard(function (card) {
                                            return get.color(card) == 'black' && get.type(card) != 'basic';
                                        }, 'he')) {
                                            if (tag == 'respondSha' || tag == 'respondShan') {
                                                if (arg != 'use') return false;
                                            }
                                            return true;
                                        }
                                        else return false;
                                    },
                                    result: {
                                        player: 1
                                    },
                                },
                            },
                            hpp_zuoding: {
                                audio: 'zuoding',
                                trigger: { global: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    return get.suit(event.card) == 'spade' && _status.currentPhase == event.player && event.targets && event.targets.length && game.countPlayer2(function (current) {
                                        return current.getHistory('damage').length > 0;
                                    }) == 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_zuoding'), '令一名目标角色摸一张牌', function (card, player, target) {
                                        return _status.event.targets.contains(target);
                                    }).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    }).set('targets', trigger.targets);
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_zuoding', result.targets);
                                        result.targets[0].draw();
                                        if (result.targets[0] != player) player.addExpose(0.2);
                                    }
                                },
                            },

                            // 周仓
                            hpp_zhongyong: {
                                audio: 'zhongyong',
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    if (event.cards.filterInD().length) return true;
                                    var shan = [];
                                    game.countPlayer2(function (current) {
                                        current.getHistory('useCard', function (evt) {
                                            if (evt.card.name == 'shan' && evt.getParent(3) == event) shan.addArray(evt.cards);
                                        });
                                    });
                                    return shan.filterInD('d').length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    event.sha = trigger.cards.slice(0).filterInD();
                                    event.shan = [];
                                    game.countPlayer2(function (current) {
                                        current.getHistory('useCard', function (evt) {
                                            if (evt.card.name == 'shan' && evt.getParent(3) == trigger) event.shan.addArray(evt.cards);
                                        });
                                    });
                                    event.shan.filterInD('d');
                                    player.chooseTarget(get.prompt2('hpp_zhongyong'), function (card, player, target) {
                                        return !_status.event.source.contains(target) && target != player;
                                    }).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    }).set('source', trigger.targets);
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_zhongyong', target);
                                        if (event.sha.length && event.shan.length) {
                                            player.chooseControl().set('choiceList', [
                                                '将' + get.translation(event.sha) + '交给' + get.translation(target),
                                                '将' + get.translation(event.shan) + '交给' + get.translation(target),
                                            ]).set('ai', function () {
                                                return _status.event.choice;
                                            }).set('choice', function () {
                                                if (get.color(event.sha) != 'black') return 0;
                                                return 1;
                                            }());
                                        }
                                        else event._result = { index: event.sha.length ? 0 : 1 };
                                    }
                                    else event.finish();
                                    'step 2'
                                    var cards = result.index == 0 ? event.sha : event.shan;
                                    target.gain(cards, 'gain2');
                                    event.cards = cards;
                                    'step 3'
                                    if (cards.filter(function (card) {
                                        return get.color(card) == 'red';
                                    }).length) target.chooseToUse('忠勇：是否使用一张【杀】？', { name: 'sha' }).set('filterTarget', function (card, player, target) {
                                        return target != _status.event.sourcex && _status.event.sourcex.inRange(target) && lib.filter.targetEnabled.apply(this, arguments);
                                    }).set('sourcex', player).set('addCount', false);
                                    'step 4'
                                    if (cards.filter(function (card) {
                                        return get.color(card) == 'black';
                                    }).length) {
                                        player.draw('nodelay');
                                        target.draw();
                                    }
                                },
                            },
                            hpp_daopu: {
                                derivation: 'qinglong_skill',
                                group: 'hpp_qinglong',
                                mod: {
                                    aiOrder: function (player, card, num) {
                                        if (!player.getEquip('qinglong')) return;
                                        if (get.itemtype(card) == 'card' && card.name == 'sha' && get.color(card) == 'red') return num + 0.1;
                                    },
                                },
                                filter: function (event, player) {
                                    if (!player.getEquip('qinglong')) return false;
                                    return event.card && event.card.name == 'sha' && get.color(event.card) == 'red' && event.notLink();
                                },
                                inherit: 'hpp_wusheng_damage',
                            },
                            hpp_qinglong: {
                                derivation: 'qinglong_skill',
                                mod: {
                                    attackRange: function (player, num) {
                                        if (player.isEmpty(1)) return num + 2;
                                    },
                                },
                                audio: 'qinglong_skill',
                                trigger: { player: ['shaMiss', 'eventNeutralized'] },
                                filter: function (event, player) {
                                    if (!player.isEmpty(1) || !event.card || event.card.name != 'sha') return false;
                                    return event.target.isIn() && player.canUse('sha', event.target, false) && (player.hasSha() || _status.connectMode && player.countCards('h'));
                                },
                                direct: true,
                                locked: true,
                                content: function () {
                                    player.chooseToUse(get.prompt('qinglong', trigger.target), function (card, player, event) {
                                        if (get.name(card) != 'sha') return false;
                                        return lib.filter.filterCard.apply(this, arguments);
                                    }, trigger.target, -1).set('addCount', false).logSkill = 'hpp_qinglong';
                                },
                            },

                            // 周鲂
                            hpp_youdi: {
                                audio: 'xinfu_youdi',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_youdi'), function (card, player, target) {
                                        return player != target;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (player.countCards('h', 'sha') > player.countCards('h') / 3 && player.countCards('h', { color: 'red' }) > player.countCards('h') / 2) return 0;
                                        if (target.countCards('he') == 0) return 0.1;
                                        return -get.attitude(_status.event.player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        game.delay();
                                        player.logSkill('hpp_youdi', result.targets);
                                        event.target = result.targets[0];
                                        event.target.discardPlayerCard(player, 'h', true);
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.links[0].name != 'sha' && event.target.countCards('he')) {
                                        player.gainPlayerCard('he', event.target, true);
                                        player.draw();
                                    }
                                    if (get.color(result.links[0]) != 'black' && player.maxHp < 5) player.gainMaxHp();
                                },
                                ai: { expose: 0.25 },
                            },

                            // 周妃
                            hpp_liangyin: {
                                group: 'hpp_liangyin_discard',
                                audio: 'liangyin',
                                trigger: { global: ['loseAfter', 'addToExpansionAfter', 'cardsGotoSpecialAfter', 'loseAsyncAfter'] },
                                filter: function (event, player, name) {
                                    if (event.name == 'lose' || event.name == 'loseAsync') return event.getlx !== false && event.toStorage == true;
                                    if (event.name == 'cardGotoSpecial') return !event.notrigger;
                                    return true;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_liangyin'), '令一名角色摸一张牌').set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_liangyin', result.targets);
                                        result.targets[0].draw();
                                    }
                                },
                                subSkill: {
                                    discard: {
                                        trigger: { global: ['gainAfter', 'loseAfter'] },
                                        filter: function (event, player) {
                                            return event.fromStorage == true || game.hasPlayer2(function (current) {
                                                var evt = event.getl(current);
                                                return evt && evt.xs && evt.xs.length > 0;
                                            });
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('hpp_liangyin'), '令一名角色弃置一张牌').set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.effect(target, { name: 'guohe_copy2' }, player, player);
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_liangyin', result.targets);
                                                result.targets[0].chooseToDiscard('he', 1, true);
                                            }
                                        },
                                    },
                                },
                            },

                            // 周泰
                            hpp_buqu: {
                                audio: 'buqu',
                                trigger: { player: ['damageBegin2', 'loseHpBegin'] },
                                filter: function (event, player) {
                                    return player.countMark('hpp_buqu') < 4;
                                },
                                forced: true,
                                preHidden: true,
                                content: function () {
                                    trigger.cancel();
                                    player.addMark('hpp_buqu', 1);
                                },
                                marktext: '创',
                                intro: { name: '不屈', name2: '创', content: 'mark' },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('hpp_buqu');
                                    },
                                },
                            },
                            hpp_qingchuang: {
                                audio: 'hppqingchuang',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (!player.hasMark('hpp_buqu')) return false;
                                    return player.countCards('h', card => lib.skill.hpp_qingchuang.filterCard(card, player));
                                },
                                filterCard: function (card, player) {
                                    return get.name(card, player) == 'tao' || get.name(card, player) == 'jiu';
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    return 2 - ['tao', 'jiu'].indexOf(get.name(card, player));
                                },
                                usable: 1,
                                delay: 0,
                                content: function () {
                                    player.removeMark('hpp_buqu', 1);
                                    player.draw();
                                },
                                ai: {
                                    order: 7,
                                    result: { player: 1 },
                                },
                            },

                            // 周瑜
                            reyingzi_re_sunce: { audio: 2 },
                            reyingzi_re_heqi: { audio: 2 },
                            reyingzi_gexuan: { audio: 2 },
                            hpp_yingzi: {
                                audio: 'reyingzi',
                                audioname2: {
                                    hpp_sunce: 'reyingzi_re_sunce',
                                    hpp_heqi: 'reyingzi_re_heqi',
                                    hpp_gexuan: 'reyingzi_gexuan',
                                },
                                trigger: { player: 'phaseDrawBegin2' },
                                forced: true,
                                preHidden: true,
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                content: function () {
                                    trigger.num++;
                                },
                                ai: {
                                    threaten: 1.5
                                },
                                mod: {
                                    maxHandcardBase: function (player, num) {
                                        return player.maxHp;
                                    }
                                }
                            },
                            hpp_fanjian: {
                                audio: 'refanjian',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_fanjian'), lib.filter.notMe).ai = function (target) {
                                        return get.damageEffect(target, player, player);
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_fanjian', target);
                                        target.draw();
                                        target.damage();
                                    }
                                },
                            },

                            // 诸葛果
                            hpp_qirang: {
                                group: 'hpp_qirang_gain',
                                subfrequent: ['gain'],
                                audio: 'qirang',
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    if (get.type(event.card) != 'trick') return false;
                                    if (!event.targets || event.targets.length != 1) return false;
                                    var info = get.info(event.card);
                                    if (info.allowMultiple == false) return false;
                                    if (event.targets && !info.multitarget) {
                                        if (game.hasPlayer(function (current) {
                                            return !event.targets.contains(current) && lib.filter.targetEnabled2(event.card, player, current) && lib.filter.targetInRange(event.card, player, current);
                                        })) return true;
                                    }
                                    return false;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_qirang'), '为' + get.translation(trigger.card) + '增加一个目标', function (card, player, target) {
                                        var player = _status.event.player;
                                        return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);
                                    }).set('ai', function (target) {
                                        var trigger = _status.event.getTrigger();
                                        var player = _status.event.player;
                                        return get.effect(target, trigger.card, player, player) * (_status.event.targets.contains(target) ? -1 : 1);
                                    }).set('targets', trigger.targets).set('card', trigger.card);
                                    'step 1'
                                    if (result.bool) {
                                        if (!event.isMine() && !event.isOnline()) game.delayx();
                                        event.targets = result.targets;
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (targets) {
                                        player.logSkill('hpp_qirang', targets);
                                        trigger.targets.addArray(targets);
                                    }
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) return [1, 3];
                                        },
                                    },
                                },
                                subSkill: {
                                    gain: {
                                        audio: 'qirang',
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return get.type(event.card) == 'equip';
                                        },
                                        frequent: true,
                                        content: function () {
                                            var card = get.cardPile(function (card) {
                                                return get.type(card, 'trick') == 'trick';
                                            });
                                            if (card) player.gain(card, 'gain2');
                                        },
                                    },
                                },
                            },
                            hpp_yuhua: {
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (get.type(card) != 'basic') return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && get.type(card) != 'basic') return false;
                                    },
                                },
                                audio: 'yuhua',
                                trigger: { player: 'phaseJieshuBegin' },
                                forced: true,
                                locked: false,
                                content: function () {
                                    'step 0'
                                    var cards = get.cards(2);
                                    game.cardsGotoOrdering(cards);
                                    var next = player.chooseToMove();
                                    next.set('list', [
                                        ['牌堆顶', cards],
                                        ['牌堆底'],
                                        ['自己获得'],
                                    ]);
                                    next.set('prompt', '羽化：将一张牌移动到牌堆顶或牌堆底，然后获得另一张牌');
                                    next.set('filterOk', function (moved) {
                                        return moved[2].length == 1;
                                    });
                                    next.set('processAI', function (list) {
                                        var cards = list[0][1], player = _status.event.player;
                                        var target = (_status.event.getTrigger().name == 'phaseZhunbei') ? player : player.next;
                                        var att = get.sgn(get.attitude(player, target));
                                        var top = [];
                                        var judges = target.getCards('j');
                                        var stopped = false;
                                        if (player != target || !target.hasWuxie()) {
                                            for (var i = 0; i < judges.length; i++) {
                                                var judge = get.judge(judges[i]);
                                                cards.sort(function (a, b) {
                                                    return (judge(b) - judge(a)) * att;
                                                });
                                                if (judge(cards[0]) * att < 0) {
                                                    stopped = true; break;
                                                }
                                                else {
                                                    top.unshift(cards.shift());
                                                }
                                            }
                                        }
                                        var bottom;
                                        if (!stopped) {
                                            cards.sort(function (a, b) {
                                                return (get.value(b, player) - get.value(a, player)) * att;
                                            });
                                            while (cards.length) {
                                                if ((get.value(cards[0], player) <= 5) == (att > 0)) break;
                                                top.unshift(cards.shift());
                                            }
                                        }
                                        bottom = cards;
                                        var TempCards1 = top.slice(0);
                                        var TempCards2 = bottom.slice(0);
                                        var gain = TempCards1.addArray(TempCards2)[TempCards1.addArray(TempCards2).length - 1];
                                        top.remove(gain);
                                        bottom.remove(gain);
                                        return [top, bottom, [gain]];
                                    });
                                    'step 1'
                                    var top = result.moved[0];
                                    var bottom = result.moved[1];
                                    var gain = result.moved[2];
                                    top.reverse();
                                    for (var i = 0; i < top.length; i++) {
                                        ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);
                                    }
                                    for (i = 0; i < bottom.length; i++) {
                                        ui.cardPile.appendChild(bottom[i]);
                                    }
                                    player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(bottom.length) + '下');
                                    game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');
                                    game.updateRoundNumber();
                                    player.gain(gain, 'draw');
                                    game.log(player, '获得了一张牌');
                                },
                            },

                            // 诸葛瑾
                            hpp_hongyuan: {
                                audio: 'hongyuan',
                                trigger: { player: 'phaseDrawBegin2' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_hongyuan'), '令至多两名角色各摸一张牌', [1, 2]).set('ai', function (target) {
                                        return Math.sqrt(5 - Math.min(4, target.countCards('h'))) * get.attitude(_status.event.player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.logSkill('hpp_hongyuan', targets);
                                        if (targets.length == 1) {
                                            targets[0].draw();
                                            event.finish();
                                        }
                                        else game.asyncDraw(targets);
                                    }
                                    else event.finish();
                                    'step 2'
                                    game.delayx();
                                },
                            },

                            // 诸葛恪
                            hpp_aocai: {
                                audio: 'aocai',
                                enable: ['chooseToUse', 'chooseToRespond'],
                                hiddenCard: function (player, name) {
                                    if (player != _status.currentPhase && get.type(name) == 'basic' && lib.inpile.contains(name)) return true;
                                },
                                filter: function (event, player) {
                                    if (event.responded || player == _status.currentPhase || event.hpp_aocai) return false;
                                    for (var i of lib.inpile) {
                                        if (get.type(i) == 'basic' && event.filterCard({ name: i }, player, event)) return true;
                                    }
                                    return false;
                                },
                                delay: false,
                                content: function () {
                                    'step 0'
                                    var evt = event.getParent(2), aozhan = player.hasSkill('aozhan');
                                    evt.set('hpp_aocai', true);
                                    var cards = get.cards(player.countCards('h') == 0 ? 4 : 3);
                                    for (var i = cards.length - 1; i >= 0; i--) {
                                        ui.cardPile.insertBefore(cards[i].fix(), ui.cardPile.firstChild);
                                    }
                                    player.chooseButton(['傲才：选择要' + (evt.name == 'chooseToUse' ? '使用' : '打出') + '的牌', cards]).set('filterButton', function (button) {
                                        return _status.event.cards.contains(button.link);
                                    }).set('cards', cards.filter(function (card) {
                                        if (aozhan && card.name == 'tao') return false;
                                        return evt.filterCard(card, evt.player, evt);
                                    })).set('ai', function (button) {
                                        var evt = _status.event.getParent(3);
                                        if (evt && evt.ai) {
                                            var tmp = _status.event;
                                            _status.event = evt;
                                            var result = (evt.ai || event.ai1)(button.link, _status.event.player, evt);
                                            _status.event = tmp;
                                            return result;
                                        }
                                        return 1;
                                    });
                                    'step 1'
                                    var evt = event.getParent(2);
                                    if (result.bool && result.links && result.links.length) {
                                        var name = result.links[0].name;
                                        if (evt.name == 'chooseToUse') {
                                            game.broadcastAll(function (result, name) {
                                                lib.skill.aocai_backup.viewAs = { name: name, cards: [result], isCard: true };
                                                lib.skill.aocai_backup.prompt = '请选择' + get.translation(result) + '的目标';
                                            }, result.links[0], name);
                                            evt.set('_backupevent', 'aocai_backup');
                                            evt.backup('aocai_backup');
                                        }
                                        else {
                                            delete evt.result.skill;
                                            delete evt.result.used;
                                            evt.result.card = get.autoViewAs(result.links[0]);
                                            if (aozhan) evt.result.card.name = name;
                                            evt.result.cards = [result.links[0]];
                                            evt.redo();
                                            return;
                                        }
                                    }
                                    evt.goto(0);
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, effect) {
                                            if (get.tag(card, 'respondShan')) return 0.7;
                                            if (get.tag(card, 'respondSha')) return 0.7;
                                        },
                                    },
                                    order: 11,
                                    respondShan: true,
                                    respondSha: true,
                                    result: {
                                        player: function (player) {
                                            if (_status.event.dying) return get.attitude(player, _status.event.dying);
                                            return 1;
                                        },
                                    },
                                },
                            },
                            hpp_duwu: {
                                audio: 'duwu',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return !player.hasSkill('hpp_duwu2') && game.hasPlayer(function (current) {
                                        return current.hp > 0 && current.hp <= player.countCards('he') && player.inRange(current);
                                    });
                                },
                                filterCard: function () {
                                    if (ui.selected.targets.length) return false;
                                    return true;
                                },
                                position: 'he',
                                selectCard: [1, Infinity],
                                complexSelect: true,
                                complexCard: true,
                                filterTarget: function (card, player, target) {
                                    return target != player && target.hp > 0 && player.inRange(target) && ui.selected.cards.length == target.hp;
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (game.hasPlayer(function (current) {
                                        return current != player && current.hp > 0 && player.inRange(current) && ui.selected.cards.length == current.hp && get.damageEffect(current, player, player) > 0;
                                    })) return 0;
                                    switch (ui.selected.cards.length) {
                                        case 0: return 8 - get.value(card);
                                        case 1: return 6 - get.value(card);
                                        case 2: return 3 - get.value(card);
                                        default: return 0;
                                    }
                                },
                                content: function () {
                                    player.addTempSkill('hpp_duwu3');
                                    target.damage('nocard');
                                },
                                ai: {
                                    expose: 0.3,
                                    damage: true,
                                    order: 2,
                                    result: {
                                        target: function (player, target) {
                                            return get.damageEffect(target, player);
                                        },
                                    },
                                },
                            },
                            hpp_duwu2: { charlotte: true },
                            hpp_duwu3: {
                                trigger: { global: 'dyingAfter' },
                                charlotte: true,
                                filter: function (event, player) {
                                    return event.player.isIn() && event.reason && event.reason.getParent().name == 'hpp_duwu';
                                },
                                forced: true,
                                popup: false,
                                content: function () {
                                    player.draw();
                                    player.addTempSkill('hpp_duwu2');
                                },
                            },

                            // 诸葛亮
                            hpp_guanxing: {
                                audio: 'guanxing',
                                audioname2: { hpp_jiangwei: 'guanxing_ol_jiangwei' },
                                trigger: { player: ['phaseZhunbeiBegin', 'phaseJieshuBegin'] },
                                frequent: true,
                                preHidden: true,
                                content: function () {
                                    var num = Math.min(game.countPlayer() == 2 ? 3 : 5);
                                    player.chooseToGuanxing(num);
                                },
                            },
                            hpp_kongcheng: {
                                mod: {
                                    targetEnabled: function (card, player, target, now) {
                                        if (target.countCards('h') == 0) {
                                            if (card.name == 'sha' || card.name == 'juedou' || card.name == 'shunshou') return false;
                                        }
                                    },
                                },
                                audio: 'kongcheng1',
                                trigger: { player: 'loseEnd' },
                                forced: true,
                                firstDo: true,
                                filter: function (event, player) {
                                    if (player.countCards('h')) return false;
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (event.cards[i].original == 'h') return true;
                                    }
                                    return false;
                                },
                                content: function () { },
                                ai: {
                                    noh: true,
                                    skillTagFilter: function (player, tag) {
                                        return player.countCards('h') == 1;
                                    },
                                },
                            },

                            // 诸葛瞻
                            hpp_zuilun: {
                                audio: 'xinfu_zuilun',
                                trigger: { player: 'phaseEnd' },
                                check: function (event, player) {
                                    var num = 0;
                                    if (player.hasHistory('lose', function (evt) {
                                        return evt.type == 'discard';
                                    })) num++;
                                    if (!player.isMinHandcard()) num++;
                                    if (!player.getStat('damage')) num++;
                                    if (num == 0) return player.hp >= 2;
                                    return true;
                                },
                                prompt: function (event, player) {
                                    var num = 3;
                                    if (player.hasHistory('lose', function (evt) {
                                        return evt.type == 'discard';
                                    })) num--;
                                    if (!player.isMinHandcard()) num--;
                                    if (!player.getStat('damage')) num--;
                                    return get.prompt('hpp_zuilun') + '（可获得' + get.cnNumber(num) + '张牌）';
                                },
                                content: function () {
                                    'step 0'
                                    event.num = 0;
                                    event.cards = get.cards(4);
                                    game.cardsGotoOrdering(cards);
                                    if (!player.hasHistory('lose', function (evt) {
                                        return evt.type == 'discard';
                                    })) event.num++;
                                    if (player.isMinHandcard()) event.num++;
                                    if (player.getStat('damage')) event.num++;
                                    'step 1'
                                    var prompt = '罪论：将' + get.cnNumber(4 - num) + '牌置于牌堆顶';
                                    if (num > 0) prompt += '，并获得其余的牌';
                                    var next = player.chooseToMove(prompt, true);
                                    if (num > 0) {
                                        next.set('list', [
                                            ['牌堆顶', cards],
                                            ['获得'],
                                        ]);
                                        next.set('filterMove', function (from, to, moved) {
                                            if (to == 1 && moved[0].length <= 4 - _status.event.num) return false;
                                            return true;
                                        });
                                        next.set('filterOk', function (moved) {
                                            return moved[0].length == 4 - _status.event.num;
                                        });
                                    }
                                    else {
                                        next.set('list', [
                                            ['牌堆顶', cards],
                                        ]);
                                    }
                                    next.set('num', num);
                                    next.set('processAI', function (list) {
                                        var check = function (card) {
                                            var player = _status.event.player;
                                            var next = player.next;
                                            var att = get.attitude(player, next);
                                            var judge = next.getCards('j')[tops.length];
                                            if (judge) return get.judge(judge)(card) * att;
                                            return next.getUseValue(card) * att;
                                        }
                                        var cards = list[0][1].slice(0), tops = [];
                                        while (tops.length < 4 - _status.event.num) {
                                            list.sort(function (a, b) {
                                                return check(b) - check(a);
                                            });
                                            tops.push(cards.shift());
                                        }
                                        return [tops, cards];
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var list = result.moved[0];
                                        var num = list.length - 1;
                                        for (var i = 0; i < list.length; i++) {
                                            event.cards.remove(list[num - i]);
                                            ui.cardPile.insertBefore(list[num - i], ui.cardPile.firstChild);
                                        }
                                    }
                                    'step 3'
                                    game.updateRoundNumber();
                                    if (event.cards.length) {
                                        player.gain(event.cards, 'draw');
                                        game.log(player, '获得了' + get.cnNumber(event.cards.length) + '张牌');
                                        event.finish();
                                    }
                                    else if (game.countPlayer() > 1) {
                                        player.chooseTarget('请选择一名角色，与其一同失去1点体力', true, lib.filter.notMe).set('ai', function (target) {
                                            return -get.attitude(_status.event.player, target);
                                        });
                                    }
                                    else event.finish();
                                    'step 4'
                                    if (result.bool) {
                                        player.line(result.targets[0], 'fire');
                                        player.loseHp();
                                        result.targets[0].loseHp();
                                    }
                                },
                            },

                            // 朱桓
                            hpp_fenli: {
                                audio: 'fenli',
                                trigger: { player: ['phaseJudgeBefore', 'phaseUseBefore', 'phaseDiscardBefore'] },
                                filter: function (event, player) {
                                    switch (event.name) {
                                        case 'phaseJudge': return player.isMaxHandcard(); break;
                                        case 'phaseUse': return player.isMaxHp(); break;
                                        case 'phaseDiscard': return player.isMaxEquip(); break;
                                    }
                                    return false;
                                },
                                check: function (event, player) {
                                    switch (event.name) {
                                        case 'phaseJudge': {
                                            if (player.hasJudge('lebu') || player.hasJudge('bingliang')) return true;
                                            if (player.getHistory('skipped').length > 0) return false;
                                            return game.hasPlayer(function (current) {
                                                return get.attitude(player, current) < 0 && current.hp == 1 && get.damageEffect(current, player, player) > 0;
                                            });
                                            break;
                                        }
                                        case 'phaseUse': {
                                            if (!player.needsToDiscard() || (player.countCards('e') && player.isMaxEquip())) return true;
                                            if (player.getHistory('skipped').length > 0) return false;
                                            return game.hasPlayer(function (current) {
                                                return get.attitude(player, current) < 0 && current.hp == 1 && get.damageEffect(current, player, player) > 0;
                                            });
                                            break;
                                        }
                                        case 'phaseDiscard': {
                                            return true;
                                            break;
                                        }
                                    }
                                    return false;
                                },
                                prompt: function (event, player) {
                                    return get.prompt('hpp_fenli') + '（可跳过' + get.translation(event.name) + (event.name == 'phaseJudge' ? '和摸牌阶段' : '') + '）';
                                },
                                content: function () {
                                    trigger.cancel();
                                    game.log(player, '跳过了', '#y' + get.translation(trigger.name));
                                    if (trigger.name == 'phaseJudge') {
                                        player.skip('phaseDraw');
                                        game.log(player, '跳过了', '#y摸牌阶段');
                                    }
                                },
                            },
                            hpp_pingkou: {
                                audio: 'pingkou',
                                trigger: { player: 'phaseEnd' },
                                filter: function (event, player) {
                                    return player.getHistory('skipped').length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget([1, player.getHistory('skipped').length], get.prompt2('hpp_pingkou'), lib.filter.notMe).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.damageEffect(target, player, player) * (target.countCards('e') ? 2 : 1);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        event.targets = targets;
                                        player.logSkill('hpp_pingkou', targets);
                                        for (var i of targets) i.damage();
                                        if (targets.length == player.getHistory('skipped').length || !game.hasPlayer(function (current) {
                                            return current.countGainableCards(player, 'e') && targets.contains(current);
                                        })) event.finish();
                                    }
                                    else event.finish();
                                    'step 2'
                                    player.chooseTarget('请选择一名目标角色，获得其装备区中的一张牌', true, function (card, player, target) {
                                        return target.countGainableCards(player, 'e') && _status.event.targets.contains(target);
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return 1 + Math.random() - get.attitude(player, target);
                                    }).set('targets', targets);
                                    'step 3'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target);
                                        player.gainPlayerCard(target, 'e', true);
                                    }
                                },
                                ai: {
                                    combo: 'hpp_fenli',
                                    effect: {
                                        target: function (card) {
                                            if (card.name == 'lebu' || card.name == 'bingliang') return 0.5;
                                        },
                                    },
                                },
                            },

                            // 朱然
                            hpp_danshou: {
                                audio: 'xindanshou',
                                trigger: {
                                    global: 'phaseJieshuBegin',
                                    target: 'useCardToTargeted',
                                },
                                direct: true,
                                filter: function (event, player, name) {
                                    return ((name == 'phaseJieshuBegin' && event.player != player && player.countCards('he') >= event.player.countCards('h')) ||
                                        (event.targets && event.targets.contains(player) && ['basic', 'trick'].contains(get.type(event.card, 'trick'))))
                                        && !player.hasSkill('hpp_danshou_as');
                                },
                                content: function () {
                                    'step 0'
                                    if (event.triggername == 'phaseJieshuBegin') {
                                        var num = trigger.player.countCards('h');
                                        if (num > 0) player.chooseToDiscard(get.prompt('hpp_danshou', trigger.player), num, '弃置' + get.cnNumber(num) + '张牌并对' + get.translation(trigger.player) + '造成1点伤害', 'he').set('logSkill', ['hpp_danshou', trigger.player]).set('ai', function (card) {
                                            if (get.damageEffect(_status.event.getTrigger().player, _status.event.player, _status.event.player) > 0) return Math.max(5.5, 8 - _status.event.selectTarget) - get.value(card);
                                            return -1;
                                        });
                                        else player.chooseBool(get.prompt('hpp_danshou', trigger.player), '对' + get.translation(trigger.player) + '造成1点伤害').ai = function () {
                                            return get.damageEffect(trigger.player, player, player) > 0
                                        };
                                    }
                                    else {
                                        var num = 0;
                                        game.countPlayer2(function (current) {
                                            var history = current.getHistory('useCard');
                                            for (var j = 0; j < history.length; j++) {
                                                // if (['basic', 'trick'].contains(get.type(history[j].card, 'trick')) && history[j].targets && history[j].targets.contains(player)) num++;
                                                if (history[j].targets && history[j].targets.contains(player)) num++;
                                            }
                                        });
                                        event.num = num;
                                        player.chooseBool(get.prompt('hpp_danshou') + '（可摸' + get.cnNumber(num) + '张牌）', get.translation('hpp_danshou_info')).set('ai', function () {
                                            return _status.event.choice;
                                        }).set('choice', function () {
                                            if (player.isPhaseUsing()) {
                                                if (player.countCards('h', function (card) {
                                                    return ['basic', 'trick'].contains(get.type(card, 'trick')) && player.canUse(card, player, null, true) && get.effect(player, card, player) > 0 && player.getUseValue(card, null, true) > 0;
                                                })) return false;
                                                return true;
                                            }
                                            if (num > 2) return true;
                                            var card = trigger.card;
                                            if (get.tag(card, 'damage') && player.hp <= trigger.getParent().baseDamage && (!get.tag(card, 'respondShan') || !player.hasShan()) && (!get.tag(card, 'respondSha') || !player.hasSha())) return true;
                                            var source = _status.currentPhase, todis = (source.countCards('h') - Math.max(0, source.needsToDiscard()));
                                            if (todis <= Math.max(Math.min(2 + (source.hp <= 1 ? 1 : 0), player.countCards('he', function (card) {
                                                return get.value(card, player) < Math.max(5.5, 8 - todis)
                                            })), player.countCards('he', function (card) {
                                                return get.value(card, player) <= 0;
                                            })) && get.damageEffect(source, player, player) > 0) return false;
                                            if (!source.isPhaseUsing() || get.attitude(player, source) > 0) return true;
                                            if (card.name == 'sha' && !source.getCardUsable('sha')) return true;
                                            return Math.random() < num / 3;
                                        }());
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        if (!result.cards || !result.cards.length) {
                                            player.logSkill('hpp_danshou', trigger.player);
                                        }
                                        if (event.triggername == 'useCardToTargeted') {
                                            player.draw(num);
                                            player.addTempSkill('hpp_danshou_as');
                                        }
                                        else {
                                            trigger.player.damage('nocard');
                                        }
                                    }
                                },
                                subSkill: { as: { sub: true } },
                                ai: {
                                    threaten: 0.6,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (typeof card != 'object' || target.hasSkill('hpp_danshou_as') || !['basic', 'trick'].contains(get.type(card, 'trick'))) return;
                                            var num = 0;
                                            game.countPlayer2(function (current) {
                                                var history = current.getHistory('useCard');
                                                for (var j = 0; j < history.length; j++) {
                                                    if (['basic', 'trick'].contains(get.type(history[j].card, 'trick')) && history[j].targets && history[j].targets.contains(player)) num++;
                                                }
                                            });
                                            if (player == target && current > 0) return [1.1, num];
                                            return [0.9, num];
                                        },
                                    },
                                },
                            },

                            // 祝融
                            hpp_juxiang: {
                                group: 'juxiang1',
                                audio: 'juxiang1',
                                preHidden: ['juxiang1', 'hpp_juxiang'],
                                trigger: { global: ['useCardAfter', 'loseAfter'] },
                                filter: function (event, player) {
                                    if (event.name == 'useCard') return (event.cards.filterInD().length || game.hasPlayer2(function (current) {
                                        return current.getHistory('damage', function (evt) {
                                            return evt.card && evt.card == event.card;
                                        }).length;
                                    })) && event.card.name == 'nanman' && event.player != player;
                                    if (event.type != 'discard' || event.getlx === false) return false;
                                    var cards = event.cards2.slice(0);
                                    var evt = event.getl(player);
                                    if (evt && evt.cards) cards.removeArray(evt.cards);
                                    return cards.filter(function (card) {
                                        return card.name == 'nanman' && get.position(card, true) == 'd';
                                    }).length;
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    if (trigger.name == 'lose') {
                                        var cards = trigger.cards2.slice(0);
                                        var evt = trigger.getl(player);
                                        if (evt && evt.cards) cards.removeArray(evt.cards);
                                        player.gain(cards.filter(function (card) {
                                            return card.name == 'nanman' && get.position(card, true) == 'd';
                                        }), 'gain2');
                                        event.finish();
                                        return;
                                    }
                                    if (trigger.cards.filterInD().length) player.gain(trigger.cards.filterInD(), 'gain2');
                                    'step 1'
                                    if (game.hasPlayer2(function (current) {
                                        return current.getHistory('damage', function (evt) {
                                            return evt.card && evt.card == trigger.card;
                                        }).length;
                                    })) player.draw();
                                },
                                ai: {
                                    effect: {
                                        target: function (card) {
                                            if (card.name == 'nanman') return [0, 1];
                                        },
                                    },
                                },
                            },
                            hpp_lieren: {
                                group: 'hpp_lieren_gain',
                                shaRelated: true,
                                audio: 'lieren',
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && player.canCompare(event.target);
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseToCompare(trigger.target).clear = false;
                                    'step 1'
                                    if (result.bool) {
                                        if (trigger.target.countGainableCards(player, 'he')) player.gainPlayerCard(trigger.target, true, 'he');
                                        ui.clear();
                                    }
                                },
                                subSkill: {
                                    gain: {
                                        trigger: { player: 'chooseToCompareAfter' },
                                        filter: function (event, player) {
                                            if (event.getParent().name != 'hpp_lieren') return false;
                                            return get.position(event.card2, true) == 'o';
                                        },
                                        direct: true,
                                        content: function () {
                                            player.gain(trigger.card2, 'gain2');
                                        },
                                    },
                                },
                            },

                            // 朱治
                            hpp_anguo: {
                                audio: 'anguo',
                                enable: 'phaseUse',
                                usable: 1,
                                filterTarget: true,
                                content: function () {
                                    'step 0'
                                    if (target.isMinHandcard()) {
                                        target.draw();
                                        event.h = true;
                                    }
                                    'step 1'
                                    if (target.isMinHp() && target.isDamaged()) {
                                        target.recover();
                                        event.hp = true;
                                    }
                                    'step 2'
                                    var equip = get.cardPile(function (card) {
                                        return get.type(card) == 'equip' && target.hasUseTarget(card);
                                    });
                                    if (target.isMinEquip() && equip) {
                                        target.chooseUseTarget(equip, 'nothrow', 'nopopup', true);
                                        event.e = true;
                                    }
                                    'step 3'
                                    game.updateRoundNumber();
                                    if (!event.h && player.isMinHandcard()) {
                                        player.draw();
                                    }
                                    'step 4'
                                    if (!event.hp && player.isMinHp() && player.isDamaged()) {
                                        player.recover();
                                    }
                                    'step 5'
                                    if (!event.e && player.isMinEquip()) {
                                        var equip = get.cardPile(function (card) {
                                            return get.type(card) == 'equip' && player.hasUseTarget(card);
                                        });
                                        if (equip) player.chooseUseTarget(equip, 'nothrow', 'nopopup', true);
                                    }
                                    'step 6'
                                    game.updateRoundNumber();
                                },
                                ai: {
                                    order: 9,
                                    result: {
                                        player: function (player, target) {
                                            if (get.attitude(player, target) <= 0) {
                                                if (target.isMinHandcard() || target.isMinEquip() || target.isMinHp()) return -1;
                                            }
                                            var num = 0;
                                            if (player.isMinHandcard() || target.isMinHandcard()) num++;
                                            if (player.isMinEquip() || target.isMinEquip()) num++;
                                            if ((player.isMinHp() && player.isDamaged()) || (target.isMinHp() && target.isDamaged())) num += 2.1;
                                            return num;
                                        },
                                    },
                                },
                            },

                            // 祖茂
                            hpp_yinbing: {
                                group: 'hpp_yinbing_discard',
                                audio: 'yinbing',
                                trigger: { player: 'phaseDiscardBefore' },
                                direct: true,
                                filter: function (event, player) {
                                    return player.countCards('he', { type: 'basic' }) < player.countCards('he');
                                },
                                marktext: '引兵',
                                content: function () {
                                    'step 0'
                                    player.chooseCard([1, player.countCards('he') - player.countCards('he', { type: 'basic' })], 'he', get.prompt('hpp_yinbing'), function (card) {
                                        return get.type(card) != 'basic';
                                    }).set('ai', function (card) {
                                        return 6 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_yinbing');
                                        player.addToExpansion(result.cards, player, 'give').gaintag.add('hpp_yinbing');
                                    }
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (card.name == 'sha' && current < 0) return 1.2;
                                        },
                                    },
                                    threaten: function (player, target) {
                                        if (target.getExpansions('hpp_yinbing').length) return 2;
                                        return 1;
                                    }
                                },
                                subSkill: {
                                    discard: {
                                        audio: 'yinbing',
                                        trigger: { player: 'damageEnd' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return event.card && player.getExpansions('hpp_yinbing').length > 0 &&
                                                event.card.name == 'sha';
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseCardButton('移去一张引兵牌', player.getExpansions('hpp_yinbing'), true);
                                            'step 1'
                                            if (result.bool) {
                                                player.loseToDiscardpile(result.links);
                                                player.draw();
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_juedi: {
                                audio: 'juedi',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return player.getExpansions('hpp_yinbing').length > 0;
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_juedi'), true, function (card, player, target) {
                                        return player.hp >= target.hp;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        if (att < 2) return att - 10;
                                        var num = att / 10;
                                        if (target == player) {
                                            num += player.maxHp - player.countCards('h') + 0.5;
                                        }
                                        else {
                                            num += _status.event.n2 * 2;
                                            if (target.isDamaged()) {
                                                if (target.hp == 1) {
                                                    num += 3;
                                                }
                                                else if (target.hp == 2) {
                                                    num += 2;
                                                }
                                                else {
                                                    num += 0.5;
                                                }
                                            }
                                        }
                                        if (target.hasJudge('lebu')) {
                                            num /= 2;
                                        }
                                        return num;
                                    }).set('n2', player.getExpansions('hpp_yinbing').length);
                                    'step 1'
                                    if (result.bool) {
                                        player.line(result.targets[0], 'green');
                                        var cards = player.getExpansions('hpp_yinbing');
                                        if (result.targets[0] == player) {
                                            player.loseToDiscardpile(cards);
                                            var num = player.maxHp - player.countCards('h') + 1;
                                            if (num > 0) player.draw(num);
                                        }
                                        else {
                                            var target = result.targets[0];
                                            target.recover();
                                            target.gain(cards, player, 'give');
                                            target.draw(cards.length);
                                        }
                                    }
                                },
                            },

                            // 左慈
                            hpp_shendao: {
                                audio: 'hppshendao',
                                trigger: { player: 'judge' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var str = '你的' + (trigger.judgestr || '') + '判定牌为' + get.translation(trigger.player.judging[0]) + '，是否修改判定花色？';
                                    player.chooseControl('spade', 'heart', 'diamond', 'club', 'cancel2').set('prompt', str).set('ai', function () {
                                        var judging = _status.event.judging;
                                        var trigger = _status.event.getTrigger();
                                        var res1 = trigger.judge(judging);
                                        var list = lib.suit.slice(0);
                                        var attitude = get.attitude(player, trigger.player);
                                        if (attitude == 0) return 0;
                                        var getj = function (suit) {
                                            return trigger.judge({
                                                name: get.name(judging),
                                                nature: get.nature(judging),
                                                suit: suit,
                                                number: get.number(judging),
                                            })
                                        };
                                        list.sort(function (a, b) {
                                            return (getj(b) - getj(a)) * get.sgn(attitude);
                                        });
                                        if ((getj(list[0]) - res1) * attitude > 0) return list[0];
                                        return 'cancel2';
                                    }).set('judging', trigger.player.judging[0]);
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_shendao');
                                        player.popup(result.control + 2);
                                        game.log(player, '将判定结果改为了', '#y' + get.translation(result.control + 2));
                                        trigger.fixedResult = {
                                            suit: result.control,
                                            color: get.color({ suit: result.control }),
                                        };
                                    }
                                },
                                ai: {
                                    rejudge: true,
                                    tag: {
                                        rejudge: 0.3,
                                    },
                                },
                            },
                            hpp_xinsheng: {
                                audio: 'hppxinsheng',
                                trigger: { player: 'damageEnd' },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    event.cards = get.cards(3);
                                    game.cardsGotoOrdering(event.cards);
                                    event.videoId = lib.status.videoId++;
                                    game.broadcastAll(function (player, id, cards) {
                                        var str;
                                        if (player == game.me && !_status.auto) str = '新生：获得花色不同的牌各一张';
                                        else str = '新生';
                                        var dialog = ui.create.dialog(str, cards);
                                        dialog.videoId = id;
                                    }, player, event.videoId, event.cards);
                                    event.time = get.utc();
                                    game.addVideo('showCards', player, ['新生', get.cardsInfo(event.cards)]);
                                    game.addVideo('delay', null, 2);
                                    'step 1'
                                    var next = player.chooseButton([0, 3], true);
                                    next.set('dialog', event.videoId);
                                    next.set('filterButton', function (button) {
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            if (get.suit(ui.selected.buttons[i].link) == get.suit(button.link)) return false;
                                        }
                                        return true;
                                    });
                                    next.set('ai', function (button) {
                                        return get.value(button.link, _status.event.player);
                                    });
                                    'step 2'
                                    if (result.bool && result.links) event.cards2 = result.links;
                                    else event.finish();
                                    var time = 1000 - (get.utc() - event.time);
                                    if (time > 0) game.delay(0, time);
                                    'step 3'
                                    game.broadcastAll('closeDialog', event.videoId);
                                    var cards2 = event.cards2;
                                    player.gain(cards2, 'gain2');
                                    'step 4'
                                    var card = get.cardPile(function (card) {
                                        if (name == 'tao') return ['tao', 'zong'].contains(card.name);
                                        if (name == 'jiu') return ['jiu', 'xionghuangjiu'].contains(card.name);
                                        if (name == 'wuzhong') return ['wuzhong', 'zengbin', 'sadouchengbing', 'dongzhuxianji', 'tongzhougongji'].contains(card.name);
                                        return card.name == name;
                                    });
                                    if (card) player.gain(card, 'gain2');
                                },
                            },

                            // SP蔡文姬
                            hpp_chenqing: {
                                audio: 'chenqing',
                                trigger: { global: 'dying' },
                                filter: function (event, player) {
                                    return event.player.hp <= 0 && !player.getHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_chenqing';
                                    }).length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_chenqing'), function (card, player, target) {
                                        return target != _status.event.getTrigger().player;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var trigger = _status.event.getTrigger();
                                        if (get.attitude(player, trigger.player) > 0) {
                                            var att1 = get.attitude(target, player);
                                            var att2 = get.attitude(target, trigger.player);
                                            var att3 = get.attitude(player, target);
                                            if (att3 < 0) return 0;
                                            return att1 / 2 + att2 + att3;
                                        }
                                        else return 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_chenqing', target);
                                        target.draw(5);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var target = event.target;
                                    var tosave = trigger.player;
                                    var att = get.attitude(target, tosave);
                                    var hastao = target.countCards('h', 'tao');
                                    target.chooseToDiscard(4, true, 'he').set('ai', function (card) {
                                        var hastao = _status.event.hastao;
                                        var att = _status.event.att;
                                        if (!hastao && att > 0) {
                                            var suit = get.suit(card);
                                            for (var i = 0; i < ui.selected.cards.length; i++) {
                                                if (get.suit(ui.selected.cards[i]) == suit) {
                                                    return -4 - get.value(card);
                                                }
                                            }
                                        }
                                        if (att < 0 && ui.selected.cards.length == 3) {
                                            var suit = get.suit(card);
                                            for (var i = 0; i < ui.selected.cards.length; i++) {
                                                if (get.suit(ui.selected.cards[i]) == suit) {
                                                    return -get.value(card);
                                                }
                                            }
                                            return -10 - get.value(card);
                                        }
                                        return -get.value(card);
                                    }).set('hastao', hastao).set('att', att);
                                    'step 3'
                                    if (result.cards && result.cards.length == 4) {
                                        var suits = [];
                                        for (var i = 0; i < result.cards.length; i++) suits.add(get.suit(result.cards[i]));
                                        if (suits.length == 4 && game.checkMod({ name: 'tao', isCard: true }, player, trigger.player, 'unchanged', 'cardSavable', player)) target.useCard({ name: 'tao', isCard: true }, trigger.player);
                                    }
                                },
                                ai: { expose: 0.2 },
                            },
                            hpp_mozhi: {
                                audio: 'mozhi',
                                trigger: { player: 'phaseJieshuBegin' },
                                direct: true,
                                filter: function (event, player) {
                                    return player.getHistory('useCard', function (evt) {
                                        return evt.isPhaseUsing() && ['basic', 'trick'].contains(get.type(evt.card));
                                    }).length > 0 && player.countCards('hs') > 0;
                                },
                                content: function () {
                                    "step 0"
                                    event.count = 2;
                                    event.history = player.getHistory('useCard', function (evt) {
                                        return evt.isPhaseUsing() && ['basic', 'trick'].contains(get.type(evt.card));
                                    })
                                    "step 1"
                                    event._result = {};
                                    if (event.count && event.history.length && player.countCards('hs')) {
                                        event.count--;
                                        var card = event.history.shift().card;
                                        card = { name: card.name, nature: card.nature };
                                        if (lib.filter.cardEnabled(card)) {
                                            if (game.hasPlayer(function (current) {
                                                return player.canUse(card, current);
                                            })) {
                                                lib.skill.hpp_mozhix.viewAs = card;
                                                var next = player.chooseToUse();
                                                if (next.isOnline()) {
                                                    player.send(function (card) {
                                                        lib.skill.hpp_mozhix.viewAs = card;
                                                    }, card)
                                                }
                                                next.logSkill = 'hpp_mozhi';
                                                next.set('openskilldialog', '默识：将一张手牌当' + get.translation(card) + '使用');
                                                next.set('norestore', true);
                                                next.set('_backupevent', 'hpp_mozhix');
                                                next.set('custom', {
                                                    add: {},
                                                    replace: { window: function () { } }
                                                });
                                                next.backup('hpp_mozhix');
                                            }
                                        }
                                    }
                                    "step 2"
                                    if (result && result.bool) event.goto(1);
                                },
                            },
                            hpp_mozhix: {
                                filterCard: function (card) {
                                    return get.itemtype(card) == 'card';
                                },
                                selectCard: 1,
                                position: 'hs',
                                popname: true,
                            },

                            // SP曹仁
                            hpp_weikui: {
                                audio: 'kuiwei',
                                enable: 'phaseUse',
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h');
                                },
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    player.loseHp();
                                    player.viewHandcards(target);
                                    'step 1'
                                    if (target.countCards('h', { name: 'shan' })) {
                                        player.chooseButton(['伪溃：选择获得一张牌', target.getCards()], true);
                                    }
                                    else {
                                        player.discardPlayerCard(target, 'visible', true, 'h').set('ai', function (button) {
                                            return get.value(button.link, _status.event.target);
                                        });
                                        if (player.canUse({ name: 'sha', isCard: true }, target, false)) player.useCard({ name: 'sha', isCard: true }, target, false);
                                        player.storage.weikui2 = target;
                                        player.addTempSkill('weikui2');
                                        event.finish();
                                    }
                                    'step 2'
                                    if (result.bool) {
                                        var card = result.links[0];
                                        if (lib.filter.canBeGained(card, player, target)) player.gain(card, target, 'giveAuto', 'bySelf');
                                        else game.log('但', card, '不能被', player, '获得！');
                                        player.recover();
                                    }
                                },
                                ai: {
                                    order: 8,
                                    result: {
                                        target: function (player, target) {
                                            if (!target.countCards('h', { name: 'shan' })) {
                                                if (player.hp <= 2) return 0;
                                                if (player.hp == 3) return target.hp <= 2 ? -1 : 0;
                                            }
                                            return -1;
                                        },
                                    },
                                },
                            },
                            hpp_lizhan: {
                                audio: 'yanzheng',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(current => current.isDamaged());
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_lizhan'), [1, Infinity], function (card, player, target) {
                                        return target.isDamaged();
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        event.targets = targets;
                                        player.logSkill('lizhan', targets);
                                        game.asyncDraw(targets);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var num = targets.filter(target => target.countCards('h') == target.getHp());
                                    if (num) player.draw(num);
                                    else game.delayx();
                                },
                                ai: { threaten: 1.5 },
                            },

                            // SP大乔
                            hpp_yanxiao: {
                                audio: 'yanxiao',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('he', { suit: 'diamond' }) && game.hasPlayer(function (target) {
                                        return target.canAddJudge({ name: 'hpp_yanxiao_card' }) && !target.hasJudge('hpp_yanxiao_card');
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    return target.canAddJudge({ name: 'hpp_yanxiao_card' }) && !target.hasJudge('hpp_yanxiao_card');
                                },
                                filterCard: { suit: 'diamond' },
                                check: function (card) {
                                    return 7 - get.value(card);
                                },
                                position: 'he',
                                discard: false,
                                lose: false,
                                delay: false,
                                prepare: 'give',
                                content: function () {
                                    'step 0'
                                    game.addGlobalSkill('hpp_yanxiao_global');
                                    target.addJudge({ name: 'hpp_yanxiao_card' }, cards);
                                    'step 1'
                                    game.delayx();
                                },
                                ai: {
                                    order: 8,
                                    result: {
                                        target: function (player, target) {
                                            if (target.countCards('j', function (card) {
                                                return get.effect(target, {
                                                    name: card.viewAs || card.name,
                                                    cards: [card],
                                                }, target, target) < 0;
                                            })) return 3;
                                            return 1;
                                        },
                                    },
                                },
                                subSkill: {
                                    global: {
                                        audio: 'yanxiao',
                                        forceaudio: true,
                                        trigger: { player: 'phaseJudgeBegin' },
                                        filter: function (event, player) {
                                            return player.countCards('j') && player.hasJudge('hpp_yanxiao_card');
                                        },
                                        forced: true,
                                        content: function () {
                                            'step 0'
                                            player.gain(player.getCards('j'), 'gain2');
                                            player.judge();
                                            'step 1'
                                            if (result.color == 'red') player.draw();
                                            else player.addTempSkill('hpp_yanxiao_sha');
                                        },
                                        ai: {
                                            effect: {
                                                target: function (card, player, target) {
                                                    if (get.type(card) == 'delay' && target.hasJudge('hpp_yanxiao_card')) return [0, 0, 0, 0.1];
                                                },
                                            },
                                        },
                                    },
                                    sha: {
                                        charlotte: true,
                                        mark: true,
                                        marktext: '+1',
                                        intro: { content: '出【杀】次数+1' },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_anxian: {
                                audio: 'anxian',
                                group: 'hpp_anxian_target',
                                trigger: { player: 'useCardToPlayer' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && event.target.countCards('h') && !event.card.hpp_anxian;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) <= 0;
                                },
                                prompt2: function (event, player) {
                                    return '令' + get.translation(event.target) + '弃置一张手牌';
                                },
                                logTarget: 'target',
                                content: function () {
                                    trigger.target.chooseToDiscard('h', true);
                                },
                                subSkill: {
                                    target: {
                                        trigger: { target: 'useCardToTarget' },
                                        filter: function (event, player) {
                                            return event.card.name == 'sha' && player.countCards('h');
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseToDiscard(get.prompt('hpp_anxian'), '弃置一张手牌令' + get.translation(trigger.card) + '对你无效，然后' + get.translation(trigger.player) + '摸一张牌' + (player.canUse({ name: 'sha', isCard: true }, trigger.player, false) ? '，若你弃置了方片花色的牌，则你视为对' + get.translation(trigger.player) + '使用一张不触发〖安娴〗的【杀】' : '')).set('ai', function (card) {
                                                var player = _status.event.player;
                                                var trigger = _status.event.getTrigger();
                                                if (get.suit(card) == 'diamond' && player.canUse({ name: 'sha', isCard: true }, trigger.player, false)) return get.attitude(player, trigger.player) > 0 ? 0 : 9 - get.value(card);
                                                return 6 - get.value(card);
                                            }).logSkill = ['hpp_anxian', trigger.player];
                                            'step 1'
                                            if (result.bool) {
                                                trigger.player.draw();
                                                trigger.getParent().excluded.push(player);
                                                if (get.suit(result.cards[0], player) == 'diamond') {
                                                    var card = { name: 'sha', isCard: true };
                                                    if (player.canUse(card, trigger.player, false)) player.useCard(card, trigger.player).card.hpp_anxian = true;
                                                }
                                            }
                                        },
                                    },
                                },
                            },

                            // SP貂蝉
                            hpp_lihun: {
                                audio: 'lihun',
                                inherit: 'lihun',
                                filterTarget: lib.filter.notMe,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countCards('h');
                                    });
                                },
                                filterCard: () => false,
                                selectCard: -1,
                            },
                            hpp_pianyi: {
                                audio: 'rebiyue',
                                trigger: { player: 'phaseJieshuBegin' },
                                frequent: true,
                                content: function () {
                                    var num = 1;
                                    if (player.isTurnedOver()) num = 3;
                                    player.draw(num);
                                },
                            },

                            // SP关羽
                            hpp_spwusheng: {
                                group: ['hpp_spwusheng_wusheng', 'hpp_spwusheng_effect'],
                                audio: 'wusheng',
                                audioname2: {
                                    Mbaby_jsp_guanyu: 'wusheng_jsp_guanyu',
                                    Mbaby_guansuo: 'wusheng_guansuo',
                                },
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                locked: false,
                                content: function () {
                                    var card = get.cardPile(function (card) {
                                        return get.color(card) == 'red';
                                    });
                                    if (card) player.gain(card, 'gain2');
                                },
                                subSkill: {
                                    wusheng: {
                                        audio: 'wusheng',
                                        audioname2: {
                                            Mbaby_jsp_guanyu: 'wusheng_jsp_guanyu',
                                            Mbaby_guansuo: 'wusheng_guansuo',
                                        },
                                        enable: ['chooseToRespond', 'chooseToUse'],
                                        filterCard: function (card, player) {
                                            return get.color(card) == 'red';
                                        },
                                        position: 'hes',
                                        viewAs: { name: 'sha' },
                                        viewAsFilter: function (player) {
                                            if (!player.countCards('hes', { color: 'red' })) return false;
                                        },
                                        prompt: '武圣：将一张红色牌当作【杀】使用或打出',
                                        check: function (card) {
                                            var val = get.value(card);
                                            if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                                            return 5 - val;
                                        },
                                        ai: {
                                            respondSha: true,
                                            skillTagFilter: function (player) {
                                                if (!player.countCards('hes', { color: 'red' })) return false;
                                            },
                                        },
                                    },
                                    effect: {
                                        mod: {
                                            aiOrder: function (player, card, num) {
                                                if (get.itemtype(card) == 'card' && card.name == 'sha' && get.color(card) == 'red') return num + 0.1;
                                            },
                                            targetInRange: function (card) {
                                                if (get.suit(card) == 'diamond' && card.name == 'sha') return true;
                                            },
                                        },
                                        audio: 'wusheng',
                                        audioname2: {
                                            Mbaby_jsp_guanyu: 'wusheng_jsp_guanyu',
                                            Mbaby_guansuo: 'wusheng_guansuo',
                                        },
                                        inherit: 'jie',
                                        filter: function (event, player) {
                                            return lib.skill.jie.filter(event) && event.card.isCard;
                                        },
                                    },
                                },
                            },
                            hpp_danji: {
                                unique: true,
                                derivation: ['miniyuma', 'hpp_nuzhan'],
                                audio: 'danji',
                                trigger: { player: ['useCard', 'respond'], source: 'damageSource' },
                                filter: function (event, player) {
                                    if (event.name != 'damage') return player.getAllHistory('useCard').length + player.getAllHistory('respond').length >= 5;
                                    var num = 0;
                                    player.getAllHistory('sourceDamage', evt => num += evt.num);
                                    return num >= 6;
                                },
                                forced: true,
                                juexingji: true,
                                skillAnimation: true,
                                animationColor: 'water',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_danji');
                                    if (player.isDamaged()) player.recover(player.maxHp - player.hp);
                                    'step 1'
                                    for (var skill of ['miniyuma', 'hpp_nuzhan']) player.addSkillLog(skill);
                                },
                            },
                            hpp_nuzhan: {
                                audio: 'dcnuchen',
                                trigger: { player: 'useCard1', source: 'damageBegin1' },
                                filter: function (event, player) {
                                    if (!(event.card && event.card.name == 'sha' && event.cards && event.cards.length && !event.card.isCard)) return false;
                                    if (event.name == 'useCard') return event.addCount !== false && get.type2(event.cards[0]) != 'trick';
                                    return get.type2(event.cards[0]) == 'trick';
                                },
                                forced: true,
                                content: function () {
                                    var card = trigger.cards[0];
                                    if (get.type2(card) != 'trick') {
                                        trigger.addCount = false;
                                        if (player.stat[player.stat.length - 1].card.sha > 0) {
                                            player.stat[player.stat.length - 1].card.sha--;
                                        }
                                        game.log(event.card, '不计入次数限制');
                                    }
                                    else trigger.num++;
                                },
                            },

                            // SP黄月英
                            hpp_jiqiao: {
                                audio: 'jiqiao',
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return player.countCards('he') - player.countCards('he', { type: 'trick' }) > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard(get.prompt2('hpp_jiqiao'), [1, player.countCards('he') - player.countCards('he', { type: 'trick' })], 'he', function (card) {
                                        return get.type2(card) != 'trick';
                                    }).set('ai', function (card) {
                                        if (card.name == 'bagua') return 10;
                                        return 7 - get.value(card);
                                    }).logSkill = 'jiqiao';
                                    'step 1'
                                    if (result.bool) {
                                        event.cards = get.cards(2 * result.cards.length);
                                        player.showCards(event.cards);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var gained = [];
                                    var tothrow = [];
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (get.type2(event.cards[i]) == 'trick') gained.push(event.cards[i]);
                                        else tothrow.push(event.cards[i]);
                                    }
                                    if (gained.length) player.gain(gained, 'gain2');
                                    else {
                                        var card = get.cardPile(function (card) {
                                            return get.type2(card) == 'trick';
                                        });
                                        if (card) player.gain(card, 'gain2');
                                    }
                                    if (tothrow.length) game.cardsDiscard(tothrow);
                                },
                            },
                            hpp_linglong: {
                                derivation: ['bagua_skill', 'hpp_jizhi', 'qicai'],
                                audio: 'linglong',
                                group: ['linglong_bagua', 'hpp_linglong_jizhi'],
                                locked: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (player.getEquip(3) || player.getEquip(4) || player.getEquip(6)) return;
                                        return num + 1;
                                    },
                                    targetInRange: function (card, player, target, now) {
                                        if (player.countCards('e')) return;
                                        var type = get.type(card);
                                        if (type == 'trick' || type == 'delay') return true;
                                    },
                                },
                            },
                            hpp_linglong_jizhi: {
                                audio: 'rejizhi',
                                inherit: 'hpp_jizhi',
                                filter: function (event, player) {
                                    return !player.countCards('e') && get.type2(event.card) == 'trick';
                                },
                            },

                            // SP姜维
                            hpp_kunfen: {
                                audio: 'kunfen',
                                trigger: { player: 'phaseJieshuBegin' },
                                check: function (event, player) {
                                    if (player.hp > 3) return true;
                                    if (player.hp == 3 && player.countCards('h') < 3) return true;
                                    if (player.hp == 2 && player.countCards('h') == 0) return true;
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    player.loseHp();
                                    'step 1'
                                    player.draw(2);
                                    'step 2'
                                    player.chooseUseTarget('huogong', false);
                                },
                            },
                            hpp_fengliang: {
                                unique: true,
                                derivation: 'hpp_tiaoxin',
                                audio: 'fengliang',
                                trigger: { player: 'dying' },
                                juexingji: true,
                                forced: true,
                                skillAnimation: true,
                                animationColor: 'thunder',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_fengliang');
                                    'step 1'
                                    player.loseMaxHp();
                                    'step 2'
                                    if (player.hp < 3) player.recover(3 - player.hp);
                                    'step 3'
                                    player.addSkillLog('hpp_tiaoxin');
                                },
                            },

                            // SP贾诩
                            hpp_jianshu: {
                                audio: 'jianshu',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                filterTarget: function (card, player, target) {
                                    if (target == player) return false;
                                    if (ui.selected.targets.length) {
                                        return ui.selected.targets[0] != target && !ui.selected.targets[0].hasSkillTag('noCompareSource') && target.countCards('h') && !target.hasSkillTag('noCompareTarget');
                                    }
                                    return true;
                                },
                                usable: 1,
                                targetprompt: ['发起者', '拼点目标'],
                                filterCard: true,
                                discard: false,
                                lose: false,
                                delay: false,
                                check: function (card) {
                                    if (_status.event.player.hp == 1) return 8 - get.value(card);
                                    return 6 - get.value(card);
                                },
                                selectTarget: 2,
                                multitarget: true,
                                content: function () {
                                    'step 0'
                                    player.give(cards, targets[0], 'give');
                                    'step 1'
                                    targets[0].chooseToCompare(targets[1]);
                                    'step 2'
                                    player.addTempSkill('hpp_jianshu_check', 'phaseUseAfter');
                                    if (result.bool) {
                                        var cards = targets[0].getCards('he');
                                        if (cards.length) player.gain(cards.randomGet(), targets[0], 'giveAuto');
                                        targets[1].loseHp();
                                    }
                                    else if (result.tie) {
                                        targets[0].loseHp();
                                        targets[1].loseHp();
                                    }
                                    else {
                                        var cards = targets[1].getCards('he');
                                        if (cards.length) player.gain(cards.randomGet(), targets[1], 'giveAuto');
                                        targets[0].loseHp();
                                    }
                                },
                                subSkill: {
                                    check: {
                                        trigger: { global: 'dieAfter' },
                                        charlotte: true,
                                        forced: true,
                                        popup: false,
                                        filter: function (event, player) {
                                            return event.getParent(3).name == 'hpp_jianshu';
                                        },
                                        content: function () {
                                            delete player.getStat('skill').hpp_jianshu;
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.4,
                                    order: 4,
                                    result: {
                                        target: function (player, target) {
                                            if (ui.selected.targets.length) return -1;
                                            return -0.5;
                                        },
                                    },
                                },
                            },
                            hpp_yongdi: {
                                unique: true,
                                audio: 'yongdi',
                                mark: true,
                                limited: true,
                                enable: 'phaseUse',
                                filterTarget: true,
                                animationColor: 'thunder',
                                skillAnimation: 'legend',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_yongdi');
                                    if (!game.hasPlayer(current => current.maxHp < target.maxHp)) target.gainMaxHp();
                                    'step 1'
                                    if (target.isMinHp()) target.recover();
                                    'step 2'
                                    if (target.isMinHandcard()) target.draw(Math.min(5, target.maxHp));
                                    'step 3'
                                    game.delayx();
                                },
                                ai: {
                                    expose: 0.3,
                                    order: 1,
                                    result: {
                                        target: function (player, target) {
                                            var val = 0;
                                            var bool1 = !game.hasPlayer(current => current.maxHp < target.maxHp), bool2 = target.isMinHp(), bool3 = target.isMinHandcard();
                                            if (bool1) val += 5;
                                            if (bool2) {
                                                if (bool1) target.maxHp++;
                                                val += Math.max(0, get.recoverEffect(target, player, player));
                                                if (bool1) target.maxHp--;
                                            }
                                            if (bool3) {
                                                var num = Math.max(0, Math.min(5, target.maxHp + (bool1 ? 1 : 0)));
                                                val += 5 * num;
                                            }
                                            return val;
                                        },
                                    },
                                },
                            },

                            // SP马超
                            hpp_zhuiji: {
                                mod: {
                                    globalFrom: function (from, to) {
                                        if (from.hp >= to.hp) return -Infinity;
                                    },
                                },
                                shaRelated: true,
                                trigger: { player: 'useCardToPlayered' },
                                logTarget: 'target',
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    return event.target.hp >= player.hp;
                                },
                                forced: true,
                                preHidden: true,
                                logTarget: 'target',
                                content: function () {
                                    trigger.getParent().directHit.push(trigger.target);
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (arg.card.name != 'sha') return false;
                                        return arg.target.hp > player.hp;
                                    },
                                },
                            },
                            hpp_shichou: {
                                group: ['hpp_shichou2', 'hpp_shichou4'],
                                audio: 'ol_shichou',
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && game.hasPlayer(function (current) {
                                        return !event.targets.contains(current) && lib.filter.filterTarget(event.card, player, current);
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var num = Math.min(player.getDamagedHp() + 1, game.countPlayer(function (current) {
                                        return !trigger.targets.contains(current) && lib.filter.filterTarget(trigger.card, player, current);
                                    }));
                                    player.chooseTarget(get.prompt('hpp_shichou'), '令至多' + get.cnNumber(num) + '名其他角色也成为' + get.translation(trigger.card) + '的目标', [1, num], function (card, player, target) {
                                        var evt = _status.event.getTrigger();
                                        return target != player && !evt.targets.contains(target) && lib.filter.targetEnabled2(evt.card, player, target) && lib.filter.targetInRange(evt.card, player, target);
                                    }).ai = function (target) {
                                        return get.effect(target, { name: 'sha' }, _status.event.player);
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets;
                                        player.logSkill('hpp_shichou', targets);
                                        player.line(targets, trigger.card.nature);
                                        trigger.targets.addArray(targets);
                                    }
                                },
                            },
                            hpp_shichou2: {
                                audio: 'ol_shichou',
                                trigger: { source: 'damageSource' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && player.countMark('hpp_shichou3') < 3;
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    var num = Math.min(trigger.num, 3 - player.countMark('hpp_shichou3'));
                                    player.draw(num);
                                    player.addTempSkill('hpp_shichou3');
                                    player.addMark('hpp_shichou3', num, false);
                                },
                            },
                            hpp_shichou3: { charlotte: true, onremove: true },
                            hpp_shichou4: {
                                audio: 'ol_shichou',
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && !player.getHistory('sourceDamage', function (evt) {
                                        return evt.card == event.card;
                                    }).length;
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    var card = get.cardPile2(function (card) {
                                        return card.name == 'sha';
                                    });
                                    if (card) player.gain(card, 'gain2');
                                },
                            },

                            // SP孟获
                            hpp_manwang: {
                                init: function () {
                                    lib.skill.sppanqin.subSkill.eff.filter = function (event, player) {
                                        return event.card.name == 'nanman' && event.getParent(2).name == 'sppanqin' && player.countMark('spmanwang') < 4 && (player.hasSkill('spmanwang') || player.hasSkill('hpp_manwang')) && event.cards.length <= event.targets.length;
                                    };
                                },
                                derivation: ['sppanqin', 'hpp_huoshou'],
                                audio: 'spmanwang',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                filterCard: true,
                                position: 'he',
                                selectCard: [1, Infinity],
                                check: function (card) {
                                    var player = _status.event.player;
                                    var max = Math.min(player.isDamaged() ? 3 : 2, 4 - player.countMark('spmanwang'));
                                    if (!max && !player.hasSkill('sppanqin')) return 0;
                                    if (max == 0 && ui.selected.length > 0) return 0;
                                    return 7 - ui.selected.cards.length - get.value(card);
                                },
                                content: function () {
                                    var num = Math.min(cards.length, 4 - player.countMark('spmanwang'));
                                    if (num >= 1) player.addSkill('sppanqin');
                                    if (num >= 2) player.draw();
                                    if (num >= 3) player.recover();
                                    if (num >= 4) {
                                        player.draw(2);
                                        player.removeSkill('sppanqin');
                                    }
                                    player.addTempSkill('hpp_huoshou', { player: 'phaseBegin' });
                                },
                                ai: {
                                    order: 2,
                                    result: {
                                        player: function (player, target) {
                                            if (player.getUseValue({ name: 'nanman' }) <= 0) return 0;
                                            if (player.getStat('skill').spmanwang && player.hasSkill('sppanqin')) return 0;
                                            return 1;
                                        },
                                    },
                                },
                            },

                            // SP庞德
                            hpp_juesi: {
                                audio: 'juesi',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h', { name: 'sha' });
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('he') > 0 && player.inRange(target);
                                },
                                filterCard: { name: 'sha' },
                                content: function () {
                                    'step 0'
                                    target.chooseToDiscard('he', true);
                                    'step 1'
                                    if (result.bool) {
                                        if (target.hp >= player.hp && result.cards[0].name != 'sha') player.draw(2);
                                        if (result.cards[0].name == 'sha' && player.canUse({ name: 'juedou', isCard: true }, target, false)) player.useCard({ name: 'juedou', isCard: true }, target, false);
                                    }
                                },
                                ai: {
                                    order: 2,
                                    result: {
                                        target: function (player, target) {
                                            if (get.effect(target, { name: 'juedou' }, player, player) <= 0) {
                                                return 0;
                                            }
                                            if (target.hp < player.hp) {
                                                if (player.countCards('h') > player.hp) return -0.1;
                                                return 0;
                                            }
                                            var hs1 = target.getCards('h', 'sha');
                                            var hs2 = player.getCards('h', 'sha');
                                            if (hs1.length > hs2.length) {
                                                return 0;
                                            }
                                            var hsx = target.getCards('h');
                                            if (hsx.length > 2 && hs2.length <= 1 && hsx[0].number < 6) {
                                                return 0;
                                            }
                                            if (hsx.length > 3 && hs2.length <= 1) {
                                                return 0;
                                            }
                                            if (hs1.length > hs2.length - 1 && hs1.length > 0 && (hs2.length <= 1 || hs1[0].number > hs2[0].number)) {
                                                return 0;
                                            }
                                            return -1;
                                        },
                                    },
                                },
                            },

                            // SP庞统
                            hpp_guolun: {
                                audio: 'xinfu_guolun',
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h');
                                },
                                content: function () {
                                    'step 0'
                                    player.choosePlayerCard(target, true, 'h');
                                    'step 1'
                                    event.cardt = result.cards[0];
                                    target.showCards(event.cardt);
                                    player.chooseCard('he').set('ai', function (card) {
                                        var event = _status.event.getParent(), player = event.player;
                                        var numt = get.number(event.cardt);
                                        var att = get.attitude(player, target);
                                        var value = get.value(event.cardt);
                                        var num = get.number(card);
                                        if (num < numt || att > 2) return value + 6 - get.value(card);
                                        else if (num == numt) return value - get.value(card);
                                        return -1;
                                    });
                                    'step 2'
                                    if (!result.bool) event.finish();
                                    else {
                                        player.showCards(result.cards);
                                        event.cardp = result.cards[0];
                                    }
                                    'step 3'
                                    var nump = get.number(event.cardp, player);
                                    var numt = get.number(event.cardt, target);
                                    if (nump < numt) {
                                        player.swapHandcards(target, [event.cardp], [event.cardt]);
                                        player.draw(2);
                                    }
                                    else if (nump > numt) {
                                        player.swapHandcards(target, [event.cardp], [event.cardt]);
                                        target.draw();
                                        player.recover();
                                    }
                                },
                                ai: {
                                    order: 8,
                                    result: {
                                        player: function (player, target) {
                                            if (get.attitude(player, target) > 0) return 1.5;
                                            return 0.5;
                                        },
                                    },
                                },
                            },
                            hpp_songsang: {
                                audio: 'xinfu_songsang',
                                trigger: { global: 'dieAfter' },
                                content: function () {
                                    player.gainMaxHp();
                                    player.recover();
                                },
                                ai: {
                                    threaten: 1.5
                                }
                            },
                            hpp_zhanji: {
                                audio: 'xinfu_zhanji',
                                trigger: {
                                    player: "gainAfter",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (!player.isPhaseUsing()) return false;
                                    return event.getParent().name == 'draw' && event.getParent(2).name != 'hpp_zhanji';
                                },
                                content: function () {
                                    player.draw('nodelay');
                                },
                            },

                            // SP孙尚香
                            hpp_liangzhu: {
                                audio: 'liangzhu',
                                trigger: { global: 'recoverAfter' },
                                direct: true,
                                filter: function (event, player) {
                                    return event.player.isPhaseUsing();
                                },
                                content: function () {
                                    'step 0'
                                    var list = ['摸一张', '摸两张'];
                                    if (trigger.player.getEquip(1)) list.push('拿武器');
                                    list.push('cancel2');
                                    player.chooseControl(list).set('prompt', get.prompt2('hpp_liangzhu')).set('ai', function () {
                                        var player = _status.event.player;
                                        var trigger = _status.event.getTrigger();
                                        if (get.attitude(player, trigger.player) > 0) return '摸两张';
                                        return '摸一张';
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_liangzhu', trigger.player);
                                        switch (result.control) {
                                            case '摸一张':
                                                player.draw();
                                                break;
                                            case '摸两张':
                                                trigger.player.draw(2);
                                                break;
                                            case '拿武器':
                                                player.gain(trigger.player.getEquip(1), trigger.player, 'give');
                                                break;
                                        }
                                    }
                                },
                            },
                            xiaoji_sp_sunshangxiang: { audio: 2 },
                            hpp_fanxiang: {
                                skillAnimation: true,
                                animationColor: 'fire',
                                audio: 'fanxiang',
                                unique: true,
                                juexingji: true,
                                forceunique: true,
                                derivation: ['xiaoji', 'hpp_wujian'],
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return player.getAllHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_liangzhu';
                                    }).length;
                                },
                                forced: true,
                                content: function () {
                                    player.awakenSkill('hpp_fanxiang');
                                    player.gainMaxHp();
                                    player.recover();
                                    for (var i of lib.skill.hpp_fanxiang.derivation) player.addSkillLog(i);
                                    player.removeSkill('hpp_liangzhu');
                                },
                            },
                            hpp_wujian: {
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('e', function (card) {
                                        return !player.getStorage('hpp_wujian_alka').contains(get.subtype(card));
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && player.canUse({ name: 'sha' }, target);
                                },
                                position: 'e',
                                filterCard: function (card, player) {
                                    return !player.getStorage('hpp_wujian_alka').contains(get.subtype(card));
                                },
                                check: function (card) {
                                    return 1 / (get.value(card) || 0.5);
                                },
                                content: function () {
                                    player.addTempSkill('hpp_wujian_alka');
                                    player.markAuto('hpp_wujian_alka', [get.subtype(cards[0])]);
                                    player.useCard({ name: 'sha' }, target, false);
                                },
                                ai: {
                                    order: function (item, player) {
                                        return get.order({ name: 'sha' }, player) + 1;
                                    },
                                    result: {
                                        target: function (player, target) {
                                            return get.effect(target, { name: 'sha' }, player, target);
                                        },
                                    },
                                },
                                subSkill: { alka: { charlotte: true, onremove: true } },
                            },

                            // SP太史慈
                            hpp_jixu: {
                                audio: 'xinfu_jixu',
                                enable: 'phaseUse',
                                // filter: function (event, player) {
                                //     return player.countCards('h');
                                // },
                                filterTarget: lib.filter.notMe,
                                selectTarget: [1, 4],
                                usable: 1,
                                multitarget: true,
                                multiline: true,
                                content: function () {
                                    'step 0'
                                    targets.sortBySeat();
                                    event.num = 0;
                                    'step 1'
                                    if (!event.caicuolist) event.caicuolist = [];
                                    targets[event.num].chooseBool('是否押杀？').ai = function (event, player) {
                                        var evt = _status.event.getParent();
                                        if (get.attitude(targets[event.num], evt.player) > 0) return evt.player.countCards('h', 'sha') ? false : true;
                                        return Math.random() < 0.5;
                                    };
                                    'step 2'
                                    var target = targets[event.num];
                                    var num1 = result.bool ? 1 : -1;
                                    var num2 = player.countCards('h', 'sha') ? 1 : -1;
                                    if (num1 != num2) {
                                        event.caicuolist.push(target);
                                        target.chat('猜错');
                                        game.log(target, '猜', '#y错', '了');
                                    }
                                    else {
                                        target.chat('猜对');
                                        game.log(target, '猜', '#g对', '了');
                                    }
                                    event.num++;
                                    game.delay();
                                    if (event.num < targets.length) event.goto(1);
                                    'step 3'
                                    if (event.caicuolist.length) {
                                        for (var i of event.caicuolist) {
                                            player.discardPlayerCard(i, 'he', true);
                                            player.useCard({ name: 'sha', isCard: true }, i, false);
                                        }
                                    }
                                    var num = targets.length - event.caicuolist.length + 1;
                                    player.addTempSkill('hpp_jixu_hand');
                                    // player.draw(num);
                                    var cards = [];
                                    while (cards.length < num) {
                                        var card = get.discardPile(function (card) {
                                            return !cards.contains(card);
                                        });
                                        if (card) cards.push(card);
                                        else break;
                                    }
                                    if (cards.length) player.gain(cards, 'gain2');
                                    player.addMark('hpp_jixu_hand', num, false);
                                },
                                ai: {
                                    order: function () {
                                        return get.order({ name: 'sha' }) + 0.6;
                                    },
                                    result: {
                                        target: function (player, target) {
                                            return get.effect(target, { name: 'guohe_copy2' }, player, target);
                                        },
                                    },
                                    expose: 0.25,
                                },
                                subSkill: {
                                    hand: {
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + player.countMark('hpp_jixu_hand');
                                            },
                                        },
                                        intro: { content: '手牌上限+#' },
                                    },
                                },
                            },

                            // SP小乔
                            hpp_xingwu: {
                                audio: 'hppxingwu',
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('h');
                                },
                                filterCard: true,
                                filterTarget: lib.filter.notMe,
                                check: function (card) {
                                    return 8 - get.value(card);
                                },
                                contentBefore: function () {
                                    _status.event.player = player;
                                    _status.event.trigger('useXingWu');
                                },
                                content: function () {
                                    'step 0'
                                    player.turnOver();
                                    if (target.countCards('e')) player.discardPlayerCard(target, 'e', true);
                                    'step 1'
                                    var num = 2;
                                    if (target.sex == 'female') num = 1;
                                    target.damage(num);
                                },
                                ai: {
                                    damage: 2,
                                    order: 9,
                                    result: {
                                        target: function (player, target) {
                                            if (get.attitude(player, target) > 0) return 0;
                                            return get.damageEffect(target, player);
                                        },
                                    },
                                },
                            },
                            hpp_luoyan: {
                                audio: 'hppluoyan',
                                derivation: ['hpp_tianxiang', 'hpp_hongyan'],
                                trigger: { player: 'hpp_xingwuAfter' },
                                forced: true,
                                content: function () {
                                    for (var i of lib.skill.hpp_luoyan.derivation) player.addTempSkill(i, { player: 'phaseUseBegin' });
                                },
                            },
                            hpp_huimou: {
                                audio: 'hpphuimou',
                                trigger: { player: ['useCard', 'respond', 'loseAfter'], global: 'loseAsyncAfter' },
                                filter: function (event, player) {
                                    if (!game.hasPlayer(function (current) {
                                        return current.isTurnedOver();
                                    })) return false;
                                    if (event.name.indexOf('lose') != 0) return player != _status.currentPhase && get.suit(event.card, player) == 'heart';
                                    if (event.type != 'discard' || event.getlx === false || get.translation(event.getParent(2).name) != '天香') return false;
                                    return event.getl(player).cards2.filter(function (card) {
                                        return get.suit(card, player) == 'heart';
                                    }).length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_huimou'), '令一名背面朝上的角色翻至正面', function (card, player, target) {
                                        return target.isTurnedOver();
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_huimou', target);
                                        if (target.isTurnedOver()) target.turnOver();
                                    }
                                },
                            },
                            old_hpp_huimou: {
                                audio: 'hpphuimou',
                                trigger: { player: ['useCard', 'respond', 'hpp_tianxiangEnd'] },
                                filter: function (event, player) {
                                    if (!game.hasPlayer(function (current) {
                                        return current.isTurnedOver();
                                    })) return false;
                                    if (event.card) return !player.isPhaseUsing() && get.suit(event.card) == 'heart';
                                    return true;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_huimou'), '令一名背面朝上的角色翻至正面', function (card, player, target) {
                                        return target.isTurnedOver();
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.attitude(player, target) - 3;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_huimou', target);
                                        if (target.isTurnedOver()) target.turnOver();
                                    }
                                },
                            },

                            // SP张飞
                            hpp_sppaoxiao: {
                                mod: {
                                    cardUsable: function (card, player) {
                                        if (get.name(card, player) == 'sha') return Infinity;
                                    },
                                    targetInRange: function (card, player) {
                                        if (get.name(card, player) == 'sha') return true;
                                    },
                                },
                                audio: 'paoxiao',
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    return player.getHistory('useCard', evt => evt.card.name == 'sha').indexOf(event) > 0;
                                },
                                forced: true,
                                content: function () {
                                    trigger.baseDamage++;
                                    player.addTempSkill('hpp_sppaoxiao_ai');
                                    if (player.getHistory('useCard', evt => evt.card.name == 'sha').indexOf(trigger) > 1) {
                                        trigger.directHit.addArray(game.filterPlayer());
                                        player.addTempSkill('hpp_sppaoxiao_unequip');
                                    }
                                },
                                subSkill: {
                                    ai: {
                                        charlotte: true,
                                        ai: {
                                            directHit_ai: true,
                                            unequip_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (!arg || !arg.card || arg.card.name != 'sha' || !player.hasSkill('hpp_sppaoxiao')) return false;
                                            },
                                        },
                                    },
                                    unequip: {
                                        charlotte: true,
                                        ai: {
                                            unequip: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (!arg || !arg.card || arg.card.name != 'sha' || !player.hasSkill('hpp_sppaoxiao')) return false;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_xvhe: {
                                audio: 'retishen',
                                trigger: { player: ['shaMiss', 'useCard', 'respond'] },
                                filter: function (event, player, name) {
                                    return name == 'shaMiss' || event.card.name == 'shan';
                                },
                                forced: true,
                                content: function () {
                                    player.draw();
                                },
                            },

                            // SP张郃
                            hpp_zhouxuan: {
                                group: 'hpp_zhouxuan_use',
                                audio: 'spolzhouxuan',
                                trigger: { player: 'phaseDiscardBegin' },
                                filter: function (event, player) {
                                    return player.countCards('h') > 0 && player.getExpansions('hpp_zhouxuan').length < 5;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCard('h', get.prompt('hpp_zhouxuan'), [1, 5 - player.getExpansions('hpp_zhouxuan').length], '将至多' + get.cnNumber(5 - player.getExpansions('hpp_zhouxuan').length) + '张手牌置于武将牌上').set('ai', function (card) {
                                        if (ui.selected.cards.length >= player.needsToDiscard()) return 6 - get.value(card);
                                        return 100 - get.useful(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var cards = result.cards;
                                        player.logSkill('hpp_zhouxuan');
                                        player.addToExpansion(cards, player, 'give').gaintag.add('hpp_zhouxuan');
                                    }
                                },
                                marktext: '旋',
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                subSkill: {
                                    use: {
                                        trigger: { player: ['useCard', 'respond'] },
                                        filter: function (event, player) {
                                            if (player.getExpansions('hpp_zhouxuan').length) return true;
                                            return event.name != 'respond' && event.cards && event.cards.length;
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            if (player.getExpansions('hpp_zhouxuan').length) {
                                                player.logSkill('hpp_zhouxuan');
                                                var bool = (!player.isMaxHandcard(true));
                                                player.draw(bool ? player.getExpansions('hpp_zhouxuan').length : 1);
                                                player.loseToDiscardpile(player.getExpansions('hpp_zhouxuan').randomGets(bool && player.getExpansions('hpp_zhouxuan').length > 1 ? 2 : 1));
                                                event.finish();
                                            }
                                            else player.chooseBool(get.prompt('hpp_zhouxuan'), '令' + get.translation(trigger.cards) + '结算完毕后置于武将牌上，称为“旋”').set('choice', (get.type(trigger.card) != 'equip' || (trigger.card.name == 'baiyin' && player.isDamaged())) && get.type(trigger.card) != 'delay');
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_zhouxuan');
                                                player.addTempSkill('hpp_zhouxuan_use2');
                                                player.markAuto('hpp_zhouxuan_use2', [trigger.card]);
                                            }
                                        },
                                    },
                                    use2: {
                                        charlotte: true,
                                        onremove: true,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            return event.cards.filterInD('oej').length && player.getStorage('hpp_zhouxuan_use2').includes(event.card);
                                        },
                                        forced: true,
                                        popup: false,
                                        content: function () {
                                            player.addToExpansion(trigger.cards.filterInD('oej'), 'gain2').gaintag.add('hpp_zhouxuan');
                                        },
                                    },
                                },
                            },

                            // SP张辽
                            hpp_mubing: {
                                audio: 'mubing',
                                enable: 'phaseUse',
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    event.cards = game.cardsGotoOrdering(get.cards(4)).cards;
                                    game.log(player, '展示了', event.cards);
                                    event.videoId = lib.status.videoId++;
                                    game.broadcastAll(function (player, id, cards) {
                                        var str = get.translation(player) + '发动了【募兵】';
                                        var dialog = ui.create.dialog(str, cards);
                                        dialog.videoId = id;
                                    }, player, event.videoId, event.cards);
                                    game.addVideo('showCards', player, [get.translation(player) + '发动了【募兵】', get.cardsInfo(event.cards)]);
                                    game.delay(2);
                                    'step 1'
                                    var numa = 0;
                                    cards.sort(function (a, b) {
                                        return a.number - b.number;
                                    });
                                    for (var i of cards) {
                                        if (get.value(i, player) > 0) numa += get.number(i);
                                    }
                                    player.chooseToDiscard([1, Infinity], 'h').set('ai', function (card) {
                                        var player = _status.event.player;
                                        var numa = _status.event.numa;
                                        var num = 0;
                                        for (var i of ui.selected.cards) {
                                            num += i.number;
                                        }
                                        if (num >= numa) return 0;
                                        if (card.number + num >= numa) return 15 - get.value(card);
                                        if (!ui.selected.cards.length) {
                                            var min = _status.event.min;
                                            if (card.number < min && !player.countCards('h', function (xcard) {
                                                return xcard != card && card.number + xcard.number > min;
                                            })) return 0;
                                            return card.number;
                                        }
                                        return Math.max(5 - get.value(card), card.number);
                                    }).set('prompt', false).set('numa', numa).set('min', cards[0].number);
                                    var func = function (id) {
                                        var dialog = get.idDialog(id);
                                        if (dialog) dialog.content.firstChild.innerHTML = '请选择要弃置的牌';
                                    };
                                    if (player == game.me) func(event.videoId);
                                    else if (player.isOnline()) player.send(func, event.videoId);
                                    'step 2'
                                    if (!result.bool) { return; }
                                    var numx = 0;
                                    for (var i of result.cards) {
                                        numx += get.number(i);
                                    }
                                    event.numx = numx;
                                    var next = player.chooseButton([0, num]);
                                    next.set('dialog', event.videoId);
                                    next.set('filterButton', function (button) {
                                        var num = 0
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            num += get.number(ui.selected.buttons[i].link);
                                        }
                                        return (num + get.number(button.link) <= _status.event.maxNum);
                                    });
                                    next.set('maxNum', event.numx);
                                    next.set('ai', function (button) {
                                        return get.value(button.link, _status.event.player);
                                    });
                                    var func = function (id) {
                                        var dialog = get.idDialog(id);
                                        if (dialog) dialog.content.firstChild.innerHTML = '请选择要获得的牌';
                                    };
                                    if (player == game.me) func(event.videoId);
                                    else if (player.isOnline()) player.send(func, event.videoId);
                                    'step 3'
                                    if (!result.bool) event.cards = [];
                                    else event.cards = result.links;
                                    'step 4'
                                    game.broadcastAll('closeDialog', event.videoId);
                                    game.addVideo('cardDialog', null, event.videoId);
                                    if (!cards.length) {
                                        event.finish();
                                        return;
                                    }
                                    player.gain(cards, 'gain2').gaintag.add('hpp_mubing');
                                },
                                onremove: function (player) {
                                    player.removeGaintag('hpp_mubing');
                                },
                                ai: {
                                    order: 9,
                                    result: { player: 1 },
                                },
                            },
                            hpp_ziqu: {
                                audio: 'ziqu',
                                trigger: { source: 'damageBegin2' },
                                filter: function (event, player) {
                                    return !player.getStorage('hpp_ziqu_round').includes(event.player) && event.player.countCards('he') > 0;
                                },
                                check: function (event, player) {
                                    var target = event.player;
                                    var eff = get.damageEffect(target, player, player);
                                    if (get.attitude(player, target) > 0) {
                                        if (eff >= 0) return false;
                                        return true;
                                    }
                                    if (eff <= 0) return true;
                                    if (target.hp == 1) return false;
                                    if (event.num > 1) return false;
                                    var cards = target.getCards('he');
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.number(cards[i]) > 10) return true;
                                    }
                                    return false;
                                },
                                logTarget: 'player',
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('hpp_ziqu_round', 'roundStart');
                                    player.markAuto('hpp_ziqu_round', [trigger.player]);
                                    trigger.cancel();
                                    if (trigger.player != player) {
                                        trigger.player.chooseCard(true, 'he', function (card, player) {
                                            return !player.countCards('he', function (cardx) {
                                                return cardx.number > card.number;
                                            });
                                        });
                                    }
                                    else event.finish();
                                    'step 1'
                                    if (result.bool) trigger.player.give(result.cards, player);
                                },
                                subSkill: {
                                    round: {
                                        charlotte: true,
                                        mark: true,
                                        intro: { content: '本轮已对$发动过此技能' },
                                    },
                                },
                            },
                            hpp_diaoling: {
                                audio: 'diaoling',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h', card => card.hasGaintag('hpp_mubing')) && game.countPlayer() > 1;
                                },
                                filterCard: function (card, player) {
                                    return card.hasGaintag('hpp_mubing');
                                },
                                selectCard: [1, Infinity],
                                filterTarget: lib.filter.notMe,
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (ui.selected.cards.some(cardx => Math.abs(get.number(cardx, player) - get.number(card, player)) <= 1)) return 10 - get.value(card);
                                    return 5 - get.value(card);
                                },
                                discard: false,
                                lose: false,
                                delay: 0,
                                content: function () {
                                    'step 0'
                                    player.give(cards, target);
                                    'step 1'
                                    var nums = [];
                                    for (var card of cards) nums.add(get.number(card, player));
                                    nums.sort((a, b) => a - b);
                                    if (cards.length > 1 && cards.length == nums.length && nums[nums.length - 1] - nums[0] == nums.length - 1) {
                                        player.chooseTarget('请选择至多' + get.cnNumber(nums.length - 1) + '名有牌的其他角色，获得这些角色的各一张牌。', [1, nums.length - 1], function (card, player, target) {
                                            return target != player && target.countGainableCards(player, 'he') > 0;
                                        }).set('ai', function (target) {
                                            return -get.attitude(_status.event.player, target) + 0.5;
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.line(targets);
                                        player.gainMultiple(targets, 'he');
                                    }
                                },
                                ai: {
                                    order: 8,
                                    result: { target: 1 },
                                },
                            },

                            // SP赵云
                            hpp_chongzhen: {
                                group: ['hpp_chongzhen1', 'hpp_chongzhen2'],
                                audio: 'chongzhen1',
                                ai: {
                                    combo: 'hpp_longdan',
                                    mingzhi: false,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') || get.tag(card, 'respondSha')) {
                                                if (get.attitude(target, player) <= 0) {
                                                    if (current > 0) return;
                                                    if (target.countCards('h') == 0) return 1.6;
                                                    if (target.countCards('h') == 1) return 1.2;
                                                    if (target.countCards('h') == 2) return [0.8, 0.2, 0, -0.2];
                                                    return [0.4, 0.7, 0, -0.7];
                                                }
                                            }
                                        },
                                    },
                                }
                            },
                            hpp_chongzhen1: {
                                audio: 'chongzhen1',
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    if (event.skill != 'hpp_longdan_shan' && event.skill != 'hpp_longdan_sha' && event.skill != 'fanghun_shan'
                                        && event.skill != 'fanghun_sha' && event.skill != 'hpp_longdan') return false;
                                    var target = lib.skill.hpp_chongzhen1.logTarget(event, player);
                                    return target && target.countGainableCards(player, 'h') > 0;
                                },
                                logTarget: function (event, player) {
                                    if (event.card.name == 'sha') return event.targets[0];
                                    return event.respondTo[0];
                                },
                                prompt2: '当你发动【龙胆】时，你可以获得对方的一张手牌。',
                                content: function () {
                                    var target = lib.skill.hpp_chongzhen1.logTarget(trigger, player);
                                    player.gainPlayerCard(target, 'h', true);
                                }
                            },
                            hpp_chongzhen2: {
                                audio: 'chongzhen2',
                                trigger: { player: 'respond' },
                                filter: function (event, player) {
                                    if (event.skill != 'hpp_longdan_shan' && event.skill != 'hpp_longdan_sha' &&
                                        event.skill != 'fanghun_shan' && event.skill != 'fanghun_sha' && event.skill != 'hpp_longdan') return false;
                                    return event.source && event.source.countGainableCards(player, 'h') > 0;
                                },
                                logTarget: 'source',
                                prompt2: '当你发动【龙胆】时，你可以获得对方的一张手牌。',
                                content: function () {
                                    player.gainPlayerCard(trigger.source, 'h', true);
                                }
                            },

                            // SP甄姬
                            hpp_jinghong: {
                                audio: 'hppjinghong',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countCards('h');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var num = Math.min(game.countPlayer(function (current) {
                                        return current != player && current.countCards('h');
                                    }), game.countPlayer() - 1, 4);
                                    player.chooseTarget(get.prompt2('hpp_jinghong'), [1, num], lib.filter.notMe).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (!target.countCards('h')) return 0;
                                        return (1 - get.sgn(get.attitude(player, target))) / target.countCards('h');
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        event.targets = targets;
                                        player.logSkill('hpp_jinghong', targets);
                                        player.addTempSkill('hpp_jinghong_effect');
                                    }
                                    else event.finish();
                                    'step 2'
                                    var target = event.targets.shift();
                                    event.target = target;
                                    player.line(target);
                                    if (!target.countCards('h')) event.redo();
                                    'step 3'
                                    var card = target.getCards('h').randomGet();
                                    player.showCards(card, get.translation(player) + '展示的' + get.translation(target) + '的手牌');
                                    if (get.color(card, target) == 'black') player.gain(card, target, 'giveAuto', 'bySelf').gaintag.add('hpp_jinghong');
                                    if (get.color(card, target) == 'red') target.discard(card);
                                    'step 4'
                                    if (event.targets.length) event.goto(2);
                                },
                                subSkill: {
                                    effect: {
                                        charlotte: true,
                                        onremove: function (player) {
                                            player.removeGaintag('hpp_jinghong');
                                        },
                                        mod: {
                                            ignoredHandcard: function (card, player) {
                                                if (card.hasGaintag('hpp_jinghong')) return true;
                                            },
                                            cardDiscardable: function (card, player, name) {
                                                if (name == 'phaseDiscard' && card.hasGaintag('hpp_jinghong')) return false;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_spluoshen: {
                                mod: {
                                    aiValue: function (player, card, num) {
                                        if (get.name(card) != 'shan' && get.color(card) != 'black') return;
                                        var cards = player.getCards('hs', function (card) {
                                            return get.name(card) == 'shan' || get.color(card) == 'black';
                                        });
                                        cards.sort(function (a, b) {
                                            return (get.name(b) == 'shan' ? 1 : 2) - (get.name(a) == 'shan' ? 1 : 2);
                                        });
                                        var geti = function () {
                                            if (cards.includes(card)) {
                                                return cards.indexOf(card);
                                            }
                                            return cards.length;
                                        };
                                        if (get.name(card) == 'shan') return Math.min(num, [6, 4, 3][Math.min(geti(), 2)]) * 0.6;
                                        return Math.max(num, [6.5, 4, 3][Math.min(geti(), 2)]);
                                    },
                                    aiUseful: function () {
                                        return lib.skill.hpp_spluoshen.mod.aiValue.apply(this, arguments);
                                    },
                                },
                                audio: 'hppspluoshen',
                                enable: ['chooseToRespond', 'chooseToUse'],
                                filterCard: function (card) {
                                    return get.color(card) == 'black';
                                },
                                frequent: true,
                                locked: false,
                                position: 'hes',
                                viewAs: { name: 'shan' },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hes', { color: 'black' })) return false;
                                },
                                onuse: function (links, player) {
                                    player.addTempSkill('hpp_spluoshen_effect');
                                },
                                onrespond: function (links, player) {
                                    player.addTempSkill('hpp_spluoshen_effect');
                                },
                                prompt: '将一张黑色牌当作【闪】使用或打出',
                                check: () => 1,
                                ai: {
                                    order: function (item, player) {
                                        if (!player.hasSkill('hpp_spluoshen_used')) return 1145141919810
                                        return 2;
                                    },
                                    respondShan: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('hes', { color: 'black' })) return false;
                                    },
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                        },
                                    },
                                },
                                subSkill: {
                                    used: { charlotte: true },
                                    effect: {
                                        charlotte: true,
                                        trigger: { player: ['useCardAfter', 'respondAfter'] },
                                        filter: function (event, player) {
                                            return event.skill == 'hpp_spluoshen' && !player.hasSkill('hpp_spluoshen_used');
                                        },
                                        prompt2: '进行一次判定并获得判定牌，若结果为黑色，你可以重复此流程',
                                        content: function () {
                                            'step 0'
                                            player.addTempSkill('hpp_spluoshen_used', 'roundStart');
                                            event.cards = [];
                                            'step 1'
                                            var next = player.judge(function (card) {
                                                var color = get.color(card);
                                                return color == 'black' ? 1 : -1;
                                            });
                                            next.judge2 = function (result) {
                                                return result.bool;
                                            };
                                            next.set('callback', function () {
                                                if (get.position(card, true) == 'o') player.gain(card, 'gain2');
                                            });
                                            'step 2'
                                            if (result.judge > 0) player.chooseBool('是否继续进行【洛神】判定？').set('frequentSkill', 'hpp_spluoshen');
                                            else event.finish();
                                            'step 3'
                                            if (result.bool) event.goto(1);
                                        },
                                    },
                                },
                            },

                            // 卧龙诸葛
                            hpp_bazhen: {
                                audio: 'bazhen',
                                group: 'bazhen_bagua',
                                trigger: { player: 'judgeEnd' },
                                filter: function (event, player) {
                                    return event.skill == 'bagua' && event.result.card && get.color(event.result.card, player) != 'red';
                                },
                                forced: true,
                                content: function () {
                                    player.draw();
                                },
                            },
                            hpp_huoji: {
                                group: 'hpp_huoji_viewAs',
                                audio: 'huoji',
                                trigger: { player: 'huogongBegin' },
                                direct: true,
                                priority: -1,
                                content: function () {
                                    trigger.setContent(lib.skill.hpp_huoji.huogongContent);
                                },
                                ai: { fireAttack: true },
                                subSkill: {
                                    viewAs: {
                                        audio: 'huoji',
                                        position: 'hs',
                                        enable: "chooseToUse",
                                        filterCard: function (card) {
                                            return get.color(card) == 'red';
                                        },
                                        viewAs: {
                                            name: 'huogong',
                                            nature: "fire",
                                        },
                                        viewAsFilter: function (player) {
                                            if (!player.countCards('hs', { color: 'red' })) return false;
                                        },
                                        prompt: "将一张红色手牌当火攻使用",
                                        check: function (card) {
                                            var player = _status.currentPhase;
                                            if (player.countCards('h') > player.hp) {
                                                return 6 - get.value(card);
                                            }
                                            return 4 - get.value(card)
                                        },
                                        ai: {
                                            fireAttack: true,
                                        },
                                    }
                                },
                                huogongContent: function () {
                                    'step 0'
                                    if (!target.countCards('h')) event.finish();
                                    else if (player.hasSkill('olhuoji')) event._result = { cards: target.getCards('h').randomGets(1) };
                                    else target.chooseCard(true).set('ai', function (card) {
                                        if (_status.event.getRand() < 0.5) return Math.random();
                                        return get.value(card);
                                    });
                                    'step 1'
                                    event.dialog = ui.create.dialog(get.translation(target) + '展示的手牌', result.cards);
                                    event.videoId = lib.status.videoId++;
                                    game.broadcast('createDialog', event.videoId, get.translation(target) + '展示的手牌', result.cards);
                                    game.addVideo('cardDialog', null, [get.translation(target) + '展示的手牌', get.cardsInfo(result.cards), event.videoId]);
                                    event.card2 = result.cards[0];
                                    game.log(target, '展示了', event.card2);
                                    event._result = {};
                                    'step 2'
                                    game.delay(2);
                                    if (!player.hasSkill('hpp_huoji')) event.goto(4);
                                    'step 3'
                                    var cards = get.cards(4), card = event.card2;
                                    player.chooseButton(['火计：是否选择一张牌作为弃置牌？', cards]).set('filterButton', function (button) {
                                        var trigger = _status.event.getParent(), card = _status.event.card;
                                        if (trigger.player.hasSkill('olhuoji')) return get.color(button.link, trigger.player) == get.color(card, trigger.target);
                                        return get.suit(button.link, trigger.player) == get.suit(card, trigger.target);
                                    }).set('ai', function (button) {
                                        var trigger = _status.event.getParent();
                                        if (get.damageEffect(trigger.target, trigger.player, trigger.player, 'fire') <= 0) return -1;
                                        return 1 + Math.random();
                                    }).set('card', card);
                                    event.cards = cards;
                                    'step 4'
                                    if (result.bool) {
                                        cards.removeArray(result.links);
                                        player.logSkill('hpp_huoji');
                                        event._result = {
                                            bool: true,
                                            cards: result.links,
                                        };
                                        player.lose(result.links, ui.discardPile).type = 'discard';
                                        player.$throw(result.links, 1000);
                                        game.log(player, '弃置了', result.links, '#g（源自牌堆）');
                                        game.delay();
                                        event.goto(6);
                                    }
                                    for (var i = cards.length - 1; i >= 0; i--) {
                                        ui.cardPile.insertBefore(cards[i].fix(), ui.cardPile.firstChild);
                                    }
                                    'step 5'
                                    player.chooseToDiscard(player.hasSkill('olhuoji') ? { color: get.color(event.card2) } : { suit: get.suit(event.card2) }, player.hasSkill('olhuoji') ? 'he' : 'h', function (card) {
                                        var evt = _status.event.getParent();
                                        if (get.damageEffect(evt.target, evt.player, evt.player, 'fire') > 0) {
                                            return 7 - get.value(card, evt.player);
                                        }
                                        return -1;
                                    }).set('prompt', false);
                                    'step 6'
                                    game.updateRoundNumber();
                                    if (result.bool) target.damage('fire', event.baseDamage || 1);
                                    else target.addTempSkill('huogong2');
                                    event.dialog.close();
                                    game.addVideo('cardDialog', null, event.videoId);
                                    game.broadcast('closeDialog', event.videoId);
                                },
                            },
                            hpp_kanpo: {
                                group: 'hpp_kanpo_wuxie',
                                audio: 'kanpo',
                                trigger: { player: 'useCard' },
                                filter: function (event) {
                                    return event.card.name == 'wuxie';
                                },
                                direct: true,
                                content: function () {
                                    trigger.nowuxie = true;
                                    game.log(trigger.card, '不可被响应');
                                },
                                subSkill: {
                                    wuxie: {
                                        mod: {
                                            aiValue: function (player, card, num) {
                                                if (get.name(card) != 'wuxie' && get.color(card) != 'black') return;
                                                var cards = player.getCards('hs', function (card) {
                                                    return get.name(card) == 'wuxie' || get.color(card) == 'black';
                                                });
                                                cards.sort(function (a, b) {
                                                    return (get.name(b) == 'wuxie' ? 1 : 2) - (get.name(a) == 'wuxie' ? 1 : 2);
                                                });
                                                var geti = function () {
                                                    if (cards.contains(card)) {
                                                        return cards.indexOf(card);
                                                    }
                                                    return cards.length;
                                                };
                                                if (get.name(card) == 'wuxie') return Math.min(num, [6, 4, 3][Math.min(geti(), 2)]) * 0.6;
                                                return Math.max(num, [6, 4, 3][Math.min(geti(), 2)]);
                                            },
                                            aiUseful: function () {
                                                return lib.skill.rekanpo.mod.aiValue.apply(this, arguments);
                                            },
                                        },
                                        locked: false,
                                        audio: 'rekanpo',
                                        position: "hs",
                                        enable: "chooseToUse",
                                        filterCard: function (card) {
                                            return get.color(card) == 'black';
                                        },
                                        viewAsFilter: function (player) {
                                            return player.countCards('hs', { color: 'black' }) > 0;
                                        },
                                        viewAs: {
                                            name: "wuxie",
                                        },
                                        prompt: "将一张黑色手牌当无懈可击使用",
                                        check: function (card) { return 8 - get.value(card) },
                                    },
                                }
                            },

                            // 喵
                            // 逗猫
                            hpp_doumao: {
                                trigger: { player: ['phaseZhunbeiBegin', 'phaseEnd'] },
                                filter: function (event, player) {
                                    return player.countCards('he');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    if (trigger.name == 'phase') {
                                        player.logSkill('hpp_doumao');
                                        player.chooseToDiscard(true);
                                        event.finish();
                                    }
                                    else {
                                        player.chooseCardTarget({
                                            prompt: get.prompt('hpp_doumao'),
                                            prompt2: '弃置一张牌，失去【逗猫】并令一名角色获得【逗猫】，然后其摸一张牌',
                                            filterTarget: function (card, player, target) {
                                                return !target.hasSkill('hpp_doumao');
                                            },
                                            filterCard: lib.filter.cardDiscardable,
                                            position: 'he',
                                            ai1: function (card) {
                                                return 8 - get.value(card);
                                            },
                                            ai2: function (target) {
                                                var player = _status.event.player;
                                                var att = get.attitude(player, target);
                                                //献州
                                                if (target.awakenedSkills.contains('hpp_miaoxianzhou') && att > 0) return 10;
                                                //集智
                                                if (target.hasSkill('hpp_miaojizhi')) return 9 * (-get.sgn(att));
                                                //枪舞
                                                if (player.hasSkill('hpp_miaoqiangwu')) {
                                                    player._hpp_miaoqiangwu_check = true;
                                                    var cards = player.getCards('hs', function (card) {
                                                        return card.name == 'sha' && player.canUse(card, target);
                                                    });
                                                    if (cards.length > 1) {
                                                        if (att >= 0) return 0;
                                                        var sum = 0;
                                                        for (var card of cards) sum += get.effect(target, card, player, player);
                                                        if (sum <= 0) return 0;
                                                        else {
                                                            while (sum < 1 || sum > 10) {
                                                                if (sum < 1) sum = sum * 10;
                                                                if (sum > 10) sum = sum / 10;
                                                            }
                                                            return sum;
                                                        }
                                                    }
                                                    return 0;
                                                }
                                                if (player._hpp_miaoqiangwu_check) delete player._hpp_miaoqiangwu_check;
                                                //奇才
                                                if (target.hasSkill('hpp_miaoqicai') && att > 0) return 0.5;
                                                //甚贤
                                                if (target.hasSkill('hpp_miaoshenxian') && att > 0) return 0.3;
                                                //烈刃
                                                if (player.hasSkill('hpp_miaolieren')) return 0.05 * (2 + get.sgn(att));
                                                if (att <= 0) return 1;
                                                return get.sgn(att);
                                            },
                                        });
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_doumao', target);
                                        player.discard(result.cards);
                                        player.removeSkill('hpp_doumao');
                                        target.addSkillLog('hpp_doumao');
                                    }
                                    else event.finish();
                                    'step 2'
                                    target.draw();
                                },
                            },
                            // 喵蔡夫人
                            hpp_miaoqieting: {
                                audio: 'qieting',
                                trigger: { global: 'phaseEnd' },
                                filter: function (event, player) {
                                    return event.player != player;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var list = ['摸一张牌'], target = trigger.player, str = get.translation(target);
                                    event.target = target;
                                    if (target.hasSkill('hpp_doumao') && target.countCards('h') > 0) list.push('观看' + str + '的两张手牌并获得其中一张');
                                    if (!target.hasSkill('hpp_doumao') && target.countCards('e', function (card) {
                                        return player.canEquip(card);
                                    }) > 0) list.push('将' + str + '装备区内的一张牌移动至自己的装备区');
                                    player.chooseControl('cancel2').set('choiceList', list).set('prompt', get.prompt('hpp_miaoqieting', target)).set('ai', function () {
                                        var evt = _status.event.getParent();
                                        var player = evt.player, target = evt.target;
                                        var list = _status.event.choiceList;
                                        if (get.attitude(player, target) > 0 || list.length == 1) return 0;
                                        if (target.hasSkill('hpp_doumao')) return 1;
                                        var val = (target.hasSkillTag('noe') ? 6 : 0);
                                        if (target.countCards('e', function (card) {
                                            return player.canEquip(card) && get.value(card, target) > val && get.effect(player, card, player, player) > 0;
                                        }) > 0) return 1;
                                        return 0;
                                    }).set('list', list);
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_miaoqieting', target);
                                        if (result.index == 0) {
                                            player.draw();
                                            event.finish();
                                        }
                                        else if (target.hasSkill('hpp_doumao')) {
                                            player.choosePlayerCard(target, 'h', 2, true);
                                            player.addExpose(0.2);
                                            event.goto(3);
                                        }
                                        else {
                                            player.addExpose(0.1);
                                            player.choosePlayerCard(target, 'e', true).set('filterButton', function (button) {
                                                return _status.event.player.canEquip(button.link);
                                            }).set('ai', function (button) {
                                                var player = _status.event.player;
                                                return get.effect(player, button.link, player, player);
                                            });
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        var card = result.cards[0];
                                        target.$give(card, player, false);
                                        game.delay(0.5);
                                        player.equip(card);
                                    }
                                    event.finish();
                                    'step 3'
                                    if (result.bool) player.chooseButton(['选择获得一张牌', result.cards], true);
                                    else event.finish();
                                    'step 4'
                                    if (result.bool) {
                                        var card = result.links[0];
                                        if (lib.filter.canBeGained(card, player, target)) player.gain(card, target, 'giveAuto', 'bySelf');
                                        else game.log('但', card, '不能被', player, '获得！');
                                    }
                                },
                            },
                            hpp_miaoxianzhou: {
                                unique: true,
                                limited: true,
                                audio: 'xianzhou',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                filterCard: true,
                                selectCard: [1, Infinity],
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (ui.selected.cards.length >= player.hp) return 0;
                                    return 7 - get.value(card);
                                },
                                filterTarget: lib.filter.notMe,
                                discard: false,
                                lose: false,
                                delay: false,
                                skillAnimation: true,
                                animationColor: 'gray',
                                content: function () {
                                    'step 0'
                                    player.addSkill('hpp_miaoxianzhou_restore');
                                    player.awakenSkill('hpp_miaoxianzhou');
                                    player.give(cards, target);
                                    'step 1'
                                    var list = game.filterPlayer(function (current) {
                                        return target.inRange(current);
                                    });
                                    if (list.length) {
                                        var max = Math.min(list.length, cards.length);
                                        target.chooseTarget([1, max], '献州：对至多' + get.cnNumber(max) + '名范围内的角色各造成1点伤害，或点“取消”令' + get.translation(player) + '回复' + cards.length + '点体力', function (card, player, target) {
                                            return _status.event.list.includes(target);
                                        }).set('list', list).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.damageEffect(target, player, player);
                                        });
                                    }
                                    else event._result = { bool: false };
                                    'step 2'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        target.line(targets, 'green');
                                        for (var i of targets) i.damage('nocard', target);
                                    }
                                    else player.recover(cards.length);
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        target: 1,
                                        player: function (player) {
                                            var bool = true, players = game.filterPlayer();
                                            for (var i = 0; i < players.length; i++) {
                                                if (players[i] != player && get.attitude(player, players[i]) > 2 && get.attitude(players[i], player) > 2) {
                                                    bool = false; break;
                                                }
                                            }
                                            if (bool) return -10;
                                            if (player.hp == 1) return 1;
                                            return -10;
                                        }
                                    },
                                },
                                subSkill: {
                                    restore: {
                                        audio: 'hpp_miaoxianzhou',
                                        trigger: { global: 'logSkill' },
                                        filter: function (event, player) {
                                            if (event.skill != 'hpp_doumao' || !event.targets) return false;
                                            return event.targets[0] == player;
                                        },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            player.restoreSkill('hpp_miaoxianzhou');
                                            player.removeSkill('hpp_miaoxianzhou_restore');
                                        },
                                    },
                                },
                            },
                            // 喵蔡文姬
                            hpp_miaobeige: {
                                audio: 'beige',
                                trigger: { global: 'damageEnd' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && event.source && event.source.isIn() && event.player.isIn() && player.countCards('he');
                                },
                                direct: true,
                                preHidden: true,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('he', get.prompt2('hpp_miaobeige', trigger.player)).set('ai', function (card) {
                                        var player = _status.event.player;
                                        var target = _status.event.list[0];
                                        var source = _status.event.list[1];
                                        var att1 = get.attitude(player, target);
                                        var att2 = get.attitude(player, source);
                                        switch (get.suit(card, player)) {
                                            case 'heart': case 'diamond':
                                                if (att1 > 0) return 10 - get.value(card);
                                                return 0;
                                                break;
                                            case 'club':
                                                if (att2 < 0) return (7 - get.value(card)) * (source.countCards('he') ? 1 : 0);
                                                return 0;
                                                break;
                                            case 'spade':
                                                if (att2 > 0 && source.isTurnedOver()) return 20 - get.value(card);
                                                if (att2 < 0 && !source.isTurnedOver()) return 10 - get.value(card);
                                                return 0;
                                                break;
                                        }
                                    }).setHiddenSkill('hpp_miaobeige').set('list', [trigger.player, trigger.source]).logSkill = 'hpp_miaobeige';
                                    'step 1'
                                    if (result.bool) {
                                        switch (get.suit(result.cards[0], player)) {
                                            case 'heart':
                                                player.line(trigger.player);
                                                trigger.player.recover();
                                                break;
                                            case 'diamond':
                                                player.line(trigger.player);
                                                trigger.player.draw(2);
                                                break;
                                            case 'club':
                                                player.line(trigger.source);
                                                trigger.source.chooseToDiscard('he', 2, true);
                                                break;
                                            case 'spade':
                                                player.line(trigger.source);
                                                trigger.source.turnOver();
                                                break;
                                        }
                                        if (player.hasSkill('hpp_doumao')) { event.finish(); return; }
                                        player.chooseButton([
                                            '悲歌：是否额外选择一个效果执行',
                                            [[
                                                ['heart', '令' + get.translation(trigger.player) + '回复1点体力'],
                                                ['diamond', '令' + get.translation(trigger.player) + '摸两张牌'],
                                                ['club', '令' + get.translation(trigger.source) + '弃置两张牌'],
                                                ['spade', '令' + get.translation(trigger.source) + '将武将牌翻面']
                                            ].filter(list => list[0] != get.suit(result.cards[0], player)), 'textbutton']
                                        ]).set('ai', function (button) {
                                            var player = _status.event.player;
                                            var target = _status.event.list[0];
                                            var source = _status.event.list[1];
                                            var att1 = get.attitude(player, target);
                                            var att2 = get.attitude(player, source);
                                            switch (button.link) {
                                                case 'heart':
                                                    if (att1 > 0) return 3;
                                                    return 0;
                                                    break;
                                                case 'diamond':
                                                    if (att1 > 0) return 2;
                                                    return 0;
                                                    break;
                                                case 'club':
                                                    if (att2 < 0) return 1;
                                                    return 0;
                                                    break;
                                                case 'spade':
                                                    if (att2 > 0 && source.isTurnedOver()) return 5;
                                                    if (att2 < 0 && !source.isTurnedOver()) return 4;
                                                    return 0;
                                                    break;
                                            }
                                        }).set('list', [trigger.player, trigger.source]);
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        if (result.links.includes('heart')) {
                                            player.line(trigger.player);
                                            trigger.player.recover();
                                        }
                                        if (result.links.includes('diamond')) {
                                            player.line(trigger.player);
                                            trigger.player.draw(2);
                                        }
                                        if (result.links.includes('club')) {
                                            player.line(trigger.source);
                                            trigger.source.chooseToDiscard('he', 2, true);
                                        }
                                        if (result.links.includes('spade')) {
                                            player.line(trigger.source);
                                            trigger.source.turnOver();
                                        }
                                    }
                                },
                                ai: { expose: 0.25 },
                            },
                            hpp_miaoduanchang: {
                                group: 'duanchang',
                                audio: 'duanchang',
                                trigger: { player: 'dying' },
                                filter: function (event, player) {
                                    if (!player.hasSkill('hpp_doumao')) return false;
                                    return event.getParent().name == 'damage' && event.source && event.source.countCards('he');
                                },
                                forced: true,
                                logTarget: 'source',
                                content: function () {
                                    trigger.source.chooseToDiscard('he', true, 2);
                                },
                            },
                            // 喵大乔
                            hpp_miaoguose: {
                                audio: 'guose',
                                inherit: 'sbguose',
                                content: function () {
                                    'step 0'
                                    if (target.hasJudge('lebu')) target.discard(target.getJudge('lebu'));
                                    else player.useCard({ name: 'lebu' }, target, cards).audio = false;
                                    'step 1'
                                    player.draw(target.hasSkill('hpp_doumao') ? 2 : 1);
                                    if (target.hasSkill('hpp_doumao')) player.chooseToDiscard(true, 'he', '国色：请弃置一张牌');
                                },
                                ai: {
                                    order: 9,
                                    result: {
                                        target: function (player, target) {
                                            var num = (target.hasSkill('hpp_doumao') ? 2 : 1);
                                            if (target.hasJudge('lebu')) return -get.effect(target, { name: 'lebu' }, player, target) * num;
                                            return get.effect(target, { name: 'lebu' }, player, target) * num;
                                        },
                                    },
                                },
                            },
                            hpp_miaoliuli: {
                                audio: 'liuli',
                                trigger: { target: 'useCardToTarget' },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    if (!player.countCards('he')) return false;
                                    return game.hasPlayer(function (current) {
                                        return player.inRange(current) && current != event.player &&
                                            current != player && lib.filter.targetEnabled(event.card, event.player, current);
                                    });
                                },
                                direct: true,
                                preHidden: true,
                                content: function () {
                                    "step 0"
                                    var next = player.chooseCardTarget({
                                        position: 'he',
                                        filterCard: lib.filter.cardDiscardable,
                                        filterTarget: function (card, player, target) {
                                            var trigger = _status.event;
                                            if (player.inRange(target) && target != trigger.source) {
                                                if (lib.filter.targetEnabled(trigger.card, trigger.source, target)) return true;
                                            }
                                            return false;
                                        },
                                        selectTarget: function () {
                                            return _status.event.player.hasSkill('hpp_doumao') ? 1 : [1, 2];
                                        },
                                        complexSelect: true,
                                        ai1: function (card) {
                                            return get.unuseful(card) + 9;
                                        },
                                        ai2: function (target) {
                                            var player = _status.event.player;
                                            var att = get.attitude(player, target);
                                            if (player.countCards('h', 'shan')) return -att;
                                            if (!ui.selected.targets.length) {
                                                if (att < 5) return 6 - att;
                                                if (hp == 1 && !player.countCards('h', 'shan')) return 10 - att;
                                                if (player.hp == 2 && !player.countCards('h', 'shan')) return 8 - att;
                                            }
                                            return -1;
                                        },
                                        prompt: get.prompt('hpp_miaoliuli'),
                                        prompt2: function () {
                                            var player = _status.event.player;
                                            if (player.hasSkill('hpp_doumao')) return '弃置一张牌，将此【杀】转移给攻击范围内的一名其他角色';
                                            return '弃置一张牌，将此【杀】转移给攻击范围内的至多两名其他角色';
                                        },
                                        source: trigger.player,
                                        card: trigger.card,
                                    }).setHiddenSkill('hpp_miaoliuli');
                                    "step 1"
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.logSkill('hpp_miaoliuli', targets);
                                        player.discard(result.cards);
                                        var evt = trigger.getParent();
                                        evt.triggeredTargets2.remove(player);
                                        evt.targets.remove(player);
                                        evt.targets.addArray(targets);
                                    }
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (target.countCards('he') == 0) return;
                                            if (card.name != 'sha') return;
                                            var min = 1;
                                            var friend = get.attitude(player, target) > 0;
                                            var vcard = { name: 'shacopy', nature: card.nature, suit: card.suit };
                                            var players = game.filterPlayer();
                                            for (var i = 0; i < players.length; i++) {
                                                if (player != players[i] && get.attitude(target, players[i]) < 0 && target.canUse(card, players[i])) {
                                                    if (!friend) return 0;
                                                    if (get.effect(players[i], vcard, player, player) > 0) {
                                                        if (!player.canUse(card, players[0])) return [0, 0.1];
                                                        min = 0;
                                                    }
                                                }
                                            }
                                            return min;
                                        },
                                    },
                                },
                            },
                            // 喵貂蝉
                            hpp_miaolijian: {
                                audio: 'lijian',
                                inherit: 'sblijian',
                                filter: function (event, player) {
                                    return !player.hasSkill('hpp_doumao') && lib.skill.sblijian.filter(event, player);
                                },
                                usable: 1,
                                group: 'hpp_miaolijian_lijian',
                                subSkill: {
                                    lijian: {
                                        audio: 'lijian',
                                        inherit: 'sblijian',
                                        filter: function (event, player) {
                                            return player.hasSkill('hpp_doumao') && lib.skill.sblijian.filter(event, player);
                                        },
                                        usable: 1,
                                        selectCard: [0, Infinity],
                                        selectTarget: () => ui.selected.cards.length,
                                        filterOk: function () {
                                            return ui.selected.targets.length == ui.selected.cards.length;
                                        },
                                        prompt: () => lib.translate.hpp_miaolijian_info,
                                    },
                                },
                            },
                            hpp_miaobiyue: {
                                audio: 'biyue',
                                trigger: { player: 'phaseJieshuBegin' },
                                forced: true,
                                content: function () {
                                    player.draw(Math.min(5, game.countPlayer2(function (current) {
                                        return current.getHistory('damage').length > 0;
                                    }) + (player.hasSkill('hpp_doumao') ? 1 : 2)));
                                },
                            },
                            // 喵黄月英
                            hpp_miaojizhi: {
                                audio: 'rejizhi',
                                trigger: { player: 'useCard' },
                                frequent: true,
                                group: 'hpp_miaojizhi_miaojizhi2',
                                filter: function (event) {
                                    return (get.type(event.card, 'trick') == 'trick' && event.card.isCard);
                                },
                                content: function () {
                                    player.draw();
                                },
                                ai: {
                                    threaten: 1.4,
                                    noautowuxie: true,
                                },
                                subSkill: {
                                    miaojizhi2: {
                                        audio: 'jizhi',
                                        usable: 1,
                                        trigger: { global: 'useCard' },
                                        filter: function (event, player) {
                                            if (get.type(event.card) != 'trick') return false;
                                            return !player.hasSkill('hpp_doumao') && event.player != player;
                                        },
                                        frequent: true,
                                        content: function () {
                                            player.draw();
                                        },
                                        ai: { threaten: 4 },
                                    }
                                }
                            },
                            hpp_miaoqicai: {
                                mod: {
                                    targetInRange: function (card, player, target, now) {
                                        var type = get.type2(card);
                                        if (type == 'trick' || type == 'delay') return true;
                                    },
                                    canBeDiscarded: function (card) {
                                        if (get.position(card) == 'e' && get.subtype(card) == 'equip2') return false;
                                    },
                                },
                                trigger: { global: 'logSkill' },
                                filter: function (event, player) {
                                    if (event.skill != 'hpp_doumao' || !event.targets) return false;
                                    return event.targets[0] != player;
                                },
                                forced: true,
                                content: function () {
                                    var card = get.cardPile2(function (card) {
                                        return get.type2(card) == 'trick';
                                    });
                                    if (card) player.gain(card, 'gain2');
                                },
                            },
                            // 喵孙尚香
                            hpp_miaojieyi: {
                                audio: 'jeiyin',
                                inherit: 'hpp_jieyi',
                                content: function () {
                                    'step 0'
                                    if (get.position(cards[0]) == 'e') {
                                        player.$give(cards, target);
                                        target.equip(cards[0]);
                                    }
                                    else player.give(cards, target, true);
                                    'step 1'
                                    player.recover();
                                    player.draw();
                                    'step 2'
                                    if (player.hasSkill('hpp_doumao')) { event.finish(); return; }
                                    player.chooseBool('结姻：是否令' + get.translation(target) + '回复1点体力并摸一张牌？').set('choice', get.attitude(player, target) > 0);
                                    'step 3'
                                    if (result.bool) {
                                        player.line(target);
                                        target.recover();
                                        target.draw();
                                    }
                                },
                            },
                            hpp_miaoxiaoji: {
                                audio: 'xiaoji',
                                trigger: {
                                    player: 'loseAfter',
                                    global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                },
                                filter: function (event, player) {
                                    var evt = event.getl(player);
                                    return evt && evt.player == player && evt.es && evt.es.length > 0;
                                },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    event.count = trigger.getl(player).es.length;
                                    'step 1'
                                    event.count--;
                                    player.draw(2);
                                    if (player.hasSkill('hpp_doumao')) { event.goto(3); return; }
                                    player.chooseTarget('是否弃置场上的一张牌？', function (card, player, target) {
                                        return target.countDiscardableCards(player, 'ej');
                                    }).set('ai', target => {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        if (att > 0 && (target.countCards('j') > 0 || target.countCards('e', function (card) {
                                            return get.value(card, target) < 0;
                                        }))) return 2;
                                        if (att < 0 && target.countCards('e') > 0 && !target.hasSkillTag('noe')) return -1;
                                        return 0;
                                    });
                                    'step 2'
                                    if (result.bool) player.discardPlayerCard(result.targets[0], 'ej', true);
                                    'step 3'
                                    if (event.count > 0) player.chooseBool('是否再次发动【枭姬】？').set('frequentSkill', 'hpp_miaoxiaoji');
                                    else event.finish();
                                    'step 4'
                                    if (result.bool) {
                                        player.logSkill('hpp_miaoxiaoji');
                                        event.goto(1);
                                    }
                                },
                                ai: {
                                    noe: true,
                                    reverseEquip: true,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) return [1, 3];
                                        },
                                    },
                                },
                            },
                            // 喵王异
                            hpp_miaozhenlie: {
                                audio: 'zhenlie',
                                inherit: 'zhenlie',
                                content: function () {
                                    'step 0'
                                    player.loseHp();
                                    trigger.getParent().excluded.add(player);
                                    'step 1'
                                    if (trigger.player[player.hasSkill('hpp_doumao') ? 'countDiscardableCards' : 'countGainableCards'](player, 'he')) {
                                        player[player.hasSkill('hpp_doumao') ? 'discardPlayerCard' : 'gainPlayerCard'](trigger.player, 'he', true);
                                    }
                                },
                            },
                            hpp_miaomiji: {
                                audio: 'miji',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        if (player.hasSkill('hpp_doumao') && target != player) return false;
                                        return target.isDamaged();
                                    });
                                },
                                direct: true,
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    if (lib.config.autoskilllist.contains('hpp_miaomiji') && player.hasSkill('hpp_doumao')) {
                                        event._result = { bool: true, targets: [player] };
                                    }
                                    else {
                                        var targets = game.filterPlayer(function (target) {
                                            if (player.hasSkill('hpp_doumao') && target != player) return false;
                                            return target.isDamaged();
                                        });
                                        var str = '摸' + get.cnNumber(player.getDamagedHp()) + '张牌';
                                        if (!player.hasSkill('hpp_doumao')) str = '选择场上的一名角色，摸等同于其损失体力值的牌（至多五张）';
                                        player.chooseTarget(get.prompt('hpp_miaomiji'), str + '，然后你可以将等量的牌交给一名其他角色', function (card, player, target) {
                                            if (player.hasSkill('hpp_doumao') && target != player) return false;
                                            return target.isDamaged();
                                        }).set('ai', function (target) {
                                            return target.getDamagedHp();
                                        }).set('selectTarget', targets.length == 1 ? -1 : 1);
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_miaomiji');
                                        player.line(target);
                                        var num = target.getDamagedHp();
                                        if (player.hasSkill('hpp_doumao')) num = Math.min(5, num);
                                        event.num = num;
                                        player.draw(num);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var check = player.countCards('h') - event.num;
                                    player.chooseCardTarget({
                                        selectCard: event.num,
                                        filterTarget: lib.filter.notMe,
                                        ai1: function (card) {
                                            var player = _status.event.player;
                                            if (player.maxHp - player.hp == 1 && card.name == 'du') return 30;
                                            var check = _status.event.check;
                                            if (check < 1) return 0;
                                            if (player.hp > 1 && check < 2) return 0;
                                            return get.unuseful(card) + 9;
                                        },
                                        ai2: function (target) {
                                            var att = get.attitude(_status.event.player, target);
                                            if (ui.selected.cards.length == 1 && ui.selected.cards[0].name == 'du') return 1 - att;
                                            return att - 2;
                                        },
                                        prompt: '秘计：是否将' + get.cnNumber(event.num) + '张手牌交给一名其他角色？',
                                    }).set('check', check);
                                    'step 3'
                                    if (result.bool) {
                                        player.line(result.targets);
                                        player.give(result.cards, result.targets[0]);
                                    }
                                },
                            },
                            // 喵小乔
                            hpp_miaotianxiang: {
                                audio: 'tianxiang',
                                trigger: { player: 'damageBegin3' },
                                filter: function (event, player) {
                                    return player.countCards('h', { suit: 'heart' }) && event.num > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCardTarget({
                                        filterCard: function (card, player) {
                                            return get.suit(card) == 'heart' && lib.filter.cardDiscardable(card, player);
                                        },
                                        filterTarget: lib.filter.notMe,
                                        ai1: function (card) {
                                            return 10 - get.value(card);
                                        },
                                        ai2: function (target) {
                                            var player = _status.event.player;
                                            var num = (target.hasSkill('hpp_doumao') ? 2 : 1);
                                            var att = get.attitude(player, target);
                                            return -att * num;
                                        },
                                        prompt: get.prompt2('hpp_miaotianxiang')
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0], cards = result.cards;
                                        player.logSkill('hpp_miaotianxiang', target);
                                        target.gain(cards, player, 'give');
                                        player.addTempSkill('hpp_miaotianxiang2');
                                        trigger.cancel();
                                        target.damage(trigger.source ? trigger.source : 'nosource', trigger.nature, trigger.num).set('card', trigger.card).set('cards', trigger.cards).hpp_miaotianxiang2 = [player];
                                    }
                                },
                                ai: {
                                    maixie_defend: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player.hasSkillTag('jueqing', false, target)) return;
                                            if (get.tag(card, 'damage') && target.countCards('h') > 1) return 0.7;
                                        },
                                    },
                                    threaten: function (player, target) {
                                        if (!target.countCards('h')) return 2;
                                    },
                                },
                            },
                            hpp_miaotianxiang2: {
                                charlotte: true,
                                trigger: { global: ['damageAfter', 'damageCancelled', 'damageZero'] },
                                filter: function (event, player) {
                                    return event.hpp_miaotianxiang2 && event.hpp_miaotianxiang2.contains(player) && event.player.isIn();
                                },
                                direct: true,
                                content: function () {
                                    player.line(trigger.player);
                                    if (trigger.player.hasSkill('hpp_doumao')) trigger.player.damage();
                                    else player.discardPlayerCard(trigger.player, 'he', true);
                                },
                            },
                            hpp_miaohongyan: {
                                mod: {
                                    suit: function (card, suit) {
                                        if (suit == 'spade') return 'heart';
                                    },
                                },
                                trigger: { global: 'judgeEnd' },
                                filter: function (event, player) {
                                    if (event.player.hasSkill('hpp_doumao')) return false;
                                    return get.suit(event.result.card, event.player) == 'heart';
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    player.recover();
                                    player.draw();
                                },
                            },
                            // 喵张春华
                            hpp_miaojueqing: {
                                audio: 'jueqing',
                                trigger: { source: 'damageBefore' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    if (!player.hasSkill('hpp_doumao')) {
                                        var num = get.cnNumber(2 * trigger.num, true);
                                        var bool = (player.hp > trigger.num && trigger.player.hp > trigger.num && get.attitude(player, trigger.player) < 0);
                                        player.chooseBool(get.prompt('hpp_miaojueqing'), '令即将对其造成的伤害翻倍至' + num + '点，并令自己失去' + get.cnNumber(trigger.num) + '点体力').set('choice', bool);
                                    }
                                    else event.goto(2);
                                    'step 1'
                                    if (result.bool) {
                                        event.logged = true;
                                        player.logSkill('hpp_miaojueqing');
                                        player.loseHp(trigger.num);
                                        trigger.num *= 2;
                                    }
                                    'step 2'
                                    if (!event.logged) player.logSkill('hpp_miaojueqing');
                                    trigger.cancel();
                                    trigger.player.loseHp(trigger.num);
                                },
                            },
                            hpp_miaoshangshi: {
                                group: 'shangshi',
                                trigger: { global: 'logSkill' },
                                filter: function (event, player) {
                                    if (event.skill != 'hpp_doumao' || !event.targets) return false;
                                    return event.player == player || event.targets.contains(player);
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    player[(trigger.player == player ? 'gain' : 'lose') + 'MaxHp']();
                                },
                            },
                            // 喵张星彩
                            hpp_miaoshenxian: {
                                audio: 'shenxian',
                                trigger: { global: ['loseAfter', 'loseAsyncAfter'] },
                                filter: function (event, player) {
                                    if (event.type != 'discard' || event.getlx === false) return false;
                                    if (event.name == 'lose' && event.player == player) return false;
                                    var cards = event.cards2.slice(0);
                                    var evt = event.getl(player);
                                    if (evt && evt.cards) cards.removeArray(evt.cards);
                                    return cards.filter(function (card) {
                                        var type = get.type(card, null, event.hs && event.hs.contains(card) ? event.player : false);
                                        if (!player.hasSkill('hpp_doumao')) return type != 'equip';
                                        return type == 'basic';
                                    }).length;
                                },
                                frequent: true,
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    if (trigger.delay == false) game.delay();
                                    'step 1'
                                    player.draw();
                                },
                            },
                            hpp_miaoqiangwu: {
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (player._hpp_miaoqiangwu_check) return;
                                        if (card.name == 'sha' && !target.hasSkill('hpp_doumao')) return true;
                                    },
                                    cardUsableTarget: function (card, player, target) {
                                        if (card.name == 'sha' && target.hasSkill('hpp_doumao')) return Infinity;
                                    },
                                },
                                audio: 'qiangwu',
                                trigger: { source: 'damageSource' },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && !player.hasSkill('hpp_doumao');
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    player.draw();
                                },
                            },
                            // 喵祝融
                            hpp_miaojuxiang: {
                                group: 'juxiang1',
                                audio: 'juxiang1',
                                preHidden: ['juxiang1', 'hpp_miaojuxiang'],
                                trigger: { player: 'useCard', source: 'damageSource', global: ['useCardAfter', 'loseAfter'] },
                                filter: function (event, player, name) {
                                    if (event.name != 'lose' && (!event.card || event.card.name != 'nanman')) return false;
                                    if (name == 'useCard') return game.hasPlayer(function (current) {
                                        return current != player && current.hasSkill('hpp_doumao');
                                    });
                                    if (name == 'useCardAfter') return event.cards.filterInD().length && event.player != player;
                                    if (event.name == 'damage') return !event.player.hasSkill('hpp_doumao');
                                    if (event.type != 'discard' || event.getlx === false) return false;
                                    var cards = event.cards2.slice(0);
                                    var evt = event.getl(player);
                                    if (evt && evt.cards) cards.removeArray(evt.cards);
                                    return cards.filter(function (card) {
                                        return card.name == 'nanman' && get.position(card, true) == 'd';
                                    }).length;
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    var name = event.triggername;
                                    if (trigger.name == 'damage') player.draw();
                                    else if (trigger.name == 'lose') {
                                        var cards = trigger.cards2.slice(0);
                                        var evt = trigger.getl(player);
                                        if (evt && evt.cards) cards.removeArray(evt.cards);
                                        player.gain(cards.filter(function (card) {
                                            return card.name == 'nanman' && get.position(card, true) == 'd';
                                        }), 'gain2');
                                    }
                                    else if (name == 'useCardAfter' && trigger.cards.filterInD().length) player.gain(trigger.cards.filterInD(), 'gain2');
                                    else trigger.directHit.addArray(game.filterPlayer(function (current) {
                                        return current != player && current.hasSkill('hpp_doumao');
                                    }));
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        return arg && arg.card && arg.card.name == 'nanman' && arg.target && arg.target != player && arg.target.hasSkill('hpp_doumao');
                                    },
                                    effect: {
                                        target: function (card) {
                                            if (card.name == 'nanman') return [0, 1];
                                        },
                                    },
                                },
                            },
                            hpp_miaolieren: {
                                group: ['hpp_lieren', 'hpp_miaolieren_gain'],
                                audio: 'lieren',
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return player.canCompare(target);
                                    }) && player.getHistory('useSkill', function (evt) {
                                        return evt.targets && evt.skill == 'hpp_doumao';
                                    }).length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_miaolieren'), '对一名角色发动【烈刃】', function (card, player, target) {
                                        return player.canCompare(target);
                                    }).set('ai', function (target) {
                                        return -get.attitude(player, target) * target.countCards('e') / target.countCards('h');
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_miaolieren', target);
                                        player.chooseToCompare(target).clear = false;
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        if (target.countGainableCards(player, 'he')) player.gainPlayerCard(target, true, 'he');
                                        ui.clear();
                                    }
                                },
                                ai: { expose: 0.25 },
                                subSkill: {
                                    gain: {
                                        trigger: { player: 'chooseToCompareAfter' },
                                        filter: function (event, player) {
                                            if (!['hpp_miaolieren', 'hpp_lieren'].contains(event.getParent().name)) return false;
                                            return get.position(event.card2, true) == 'o';
                                        },
                                        direct: true,
                                        content: function () {
                                            player.gain(trigger.card2, 'gain2');
                                        },
                                    },
                                },
                            },
                            hpp_miaochangbiao: {
                                audio: 'changbiao',
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (card.hpp_miaochangbiao) return true;
                                    },
                                    selectTarget: function (card, player, num) {
                                        if (player.hasSkill('hpp_doumao') && card.hpp_miaochangbiao && num[1] != -1) num[1]++;
                                    },
                                },
                                enable: 'phaseUse',
                                usable: 1,
                                position: 'hs',
                                viewAs: {
                                    name: 'sha',
                                    hpp_miaochangbiao: true,
                                },
                                locked: false,
                                filter: function (event, player) {
                                    return player.countCards('hs') > 0;
                                },
                                filterCard: true,
                                selectCard: [1, Infinity],
                                position: 'hs',
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (ui.selected.cards.length) {
                                        var list = game.filterPlayer(function (current) {
                                            return current != player && player.canUse('sha', current, false) && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        }).sort(function (a, b) {
                                            return get.effect(b, { name: 'sha' }, player, player) - get.effect(a, { name: 'sha' }, player, player);
                                        });
                                        if (!list.length) return 0;
                                        var target = list[0];
                                        if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return 0;
                                        return 6.5 - get.value(card);
                                    }
                                    return 6.3 - get.value(card);
                                },
                                onuse: function (result, player) {
                                    player.addTempSkill('hpp_miaochangbiao_draw');
                                },
                                subSkill: {
                                    draw: {
                                        trigger: { player: 'phaseUseEnd' },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return player.getHistory('sourceDamage', function (evxt) {
                                                var evt = evxt.getParent();
                                                return evt && evt.name == 'sha' && evt.skill == 'hpp_miaochangbiao' && evt.getParent('phaseUse') == event;
                                            }).length > 0;
                                        },
                                        content: function () {
                                            var num = 0;
                                            player.getHistory('sourceDamage', function (evxt) {
                                                var evt = evxt.getParent();
                                                if (evt && evt.name == 'sha' && evt.skill == 'hpp_miaochangbiao' && evt.getParent('phaseUse') == trigger) num += evt.cards.length;
                                            });
                                            player.draw(num);
                                        },
                                    },
                                },
                                ai: {
                                    order: function (item, player) {
                                        return get.order({ name: 'sha' }, player) + 0.3 * (Math.min(player.getCardUsable('sha'), player.countCards('hs', 'sha') + player.hasCard(function (card) {
                                            return card.name != 'sha' && get.value(card, player) < 6.3;
                                        }, 'hs') ? 1 : 0) > 1 ? -1 : 1);
                                    },
                                },
                            },
                            // 喵甄姬
                            hpp_miaoluoshen: {
                                inherit: 'hpp_luoshen',
                                audio: 'luoshen',
                                trigger: { player: ['phaseZhunbeiBegin', 'phaseEnd'] },
                                filter: function (event, player) {
                                    return !player.hasSkill('hpp_doumao') || event.name == 'phaseZhunbei';
                                },
                            },
                            hpp_miaoqingguo: {
                                mod: {
                                    aiValue: function (player, card, num) {
                                        if (!player.hasSkill('hpp_doumao')) return;
                                        if (get.name(card) != 'shan' && get.color(card) != 'black') return;
                                        var cards = player.getCards('hs', function (card) {
                                            return get.name(card) == 'shan' || get.color(card) == 'black';
                                        });
                                        cards.sort(function (a, b) {
                                            return (get.name(b) == 'shan' ? 1 : 2) - (get.name(a) == 'shan' ? 1 : 2);
                                        });
                                        var geti = function () {
                                            if (cards.contains(card)) {
                                                return cards.indexOf(card);
                                            }
                                            return cards.length;
                                        };
                                        if (get.name(card) == 'shan') return Math.min(num, [6, 4, 3][Math.min(geti(), 2)]) * 0.6;
                                        return Math.max(num, [6.5, 4, 3][Math.min(geti(), 2)]);
                                    },
                                    aiUseful: function () {
                                        return lib.skill.hpp_miaoqingguo.mod.aiValue.apply(this, arguments);
                                    },
                                },
                                locked: false,
                                audio: 'qingguo',
                                enable: ['chooseToRespond', 'chooseToUse'],
                                filterCard: function (card) {
                                    return get.color(card) == 'black';
                                },
                                position: 'hes',
                                viewAs: { name: 'shan' },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hes', { color: 'black' })) return false;
                                },
                                prompt: '将一张黑色牌当闪打出',
                                check: () => 1,
                                ai: {
                                    order: 2,
                                    respondShan: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('hes', { color: 'black' })) return false;
                                    },
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                        },
                                    },
                                },
                                group: 'hpp_miaoqingguo_jijiu',
                                subSkill: {
                                    jijiu: {
                                        audio: 'qingguo',
                                        mod: {
                                            aiValue: function (player, card, num) {
                                                if (player.hasSkill('hpp_doumao')) return;
                                                if (get.name(card) != 'tao' && get.name(card) != 'shan') return;
                                                var cards = player.getCards('hs', function (card) {
                                                    return get.name(card) == 'tao' || get.name(card) == 'shan';
                                                });
                                                cards.sort(function (a, b) {
                                                    return (get.name(a) == 'tao' ? 1 : 2) - (get.name(b) == 'tao' ? 1 : 2);
                                                });
                                                var geti = function () {
                                                    if (cards.contains(card)) {
                                                        return cards.indexOf(card);
                                                    }
                                                    return cards.length;
                                                };
                                                return Math.max(num, [6.5, 4, 3, 2][Math.min(geti(), 2)]);
                                            },
                                            aiUseful: function () {
                                                return lib.skill.hpp_miaoqingguo_jijiu.mod.aiValue.apply(this, arguments);
                                            },
                                        },
                                        locked: false,
                                        enable: 'chooseToUse',
                                        viewAsFilter: function (player) {
                                            return !player.hasSkill('hpp_doumao') && player.countCards('hs', { name: 'shan' }) > 0;
                                        },
                                        filterCard: { name: 'shan' },
                                        viewAs: { name: 'tao' },
                                        prompt: '将一张【闪】当作【桃】使用',
                                        check: function (card) {
                                            return 15 - get.value(card);
                                        },
                                    },
                                },
                            },

                            // 神曹操
                            hpp_guixin: {
                                audio: 'guixin',
                                trigger: { player: 'damageEnd' },
                                check: function (event, player) {
                                    if (player.isTurnedOver() || event.num > 1 || (game.countPlayer() - 1 < 5 && game.countPlayer(function (current) {
                                        return get.attitude(player, current) <= 0 && current.countGainableCards(player, 'hej') > 0;
                                    }) >= game.countPlayer(function (currentx) {
                                        return get.attitude(player, currentx) > 0 && currentx.countGainableCards(player, 'hej') > 0;
                                    }))) return true;
                                    var num = game.countPlayer(function (current) {
                                        if (current.countCards('he') && current != player && get.attitude(player, current) <= 0) return true;
                                        if (current.countCards('j') && current != player && get.attitude(player, current) > 0) return true;
                                    });
                                    return num >= 2;
                                },
                                content: function () {
                                    'step 0'
                                    var targets = game.filterPlayer();
                                    targets.remove(player);
                                    targets.sort(lib.sort.seat);
                                    event.targets = targets;
                                    event.count = trigger.num;
                                    'step 1'
                                    event.count--;
                                    event.num = 0;
                                    event.numx = 0;
                                    player.line(targets, 'green');
                                    player.chooseControl('手牌区', '装备区', '判定区').set('ai', function () {
                                        if (game.hasPlayer(function (current) {
                                            return current.countCards('j') && current != player && get.attitude(player, current) > 0;
                                        })) return 2;
                                        return Math.floor(Math.random() * 3);
                                    }).set('prompt', '请选择优先获得的区域');
                                    'step 2'
                                    event.range = {
                                        手牌区: ['h', 'e', 'j'],
                                        装备区: ['e', 'h', 'j'],
                                        判定区: ['j', 'h', 'e'],
                                    }[result.control || '手牌区'];
                                    'step 3'
                                    if (num < event.targets.length) {
                                        var target = event.targets[num];
                                        var range = event.range;
                                        for (var i = 0; i < range.length; i++) {
                                            var cards = target.getCards(range[i]);
                                            if (cards.length) {
                                                var card = cards.randomGet();
                                                event.numx++;
                                                player.gain(card, target, 'giveAuto', 'bySelf');
                                                break;
                                            }
                                        }
                                        event.num++;
                                    }
                                    'step 4'
                                    if (num < event.targets.length) event.goto(3);
                                    'step 5'
                                    if (event.numx > 4 && !player.isTurnedOver()) player.turnOver();
                                    'step 6'
                                    if (event.count > 0) player.chooseBool(get.prompt2('new_guixin')).ai = function () {
                                        return lib.skill.hpp_guixin.check({ num: event.count }, player);
                                    };
                                    else event.finish();
                                    'step 7'
                                    if (event.count && result.bool) event.goto(1);
                                },
                                ai: {
                                    maixie: true,
                                    maixie_hp: true,
                                    threaten: function (player, target) {
                                        if (target.hp == 1) return 2.5;
                                        return 1;
                                    },
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'damage')) {
                                                if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                if (target.hp == 1) return 0.8;
                                                if (target.isTurnedOver()) return [0, 3];
                                                var num = game.countPlayer(function (current) {
                                                    if (current.countCards('he') && current != player && get.attitude(player, current) <= 0) {
                                                        return true;
                                                    }
                                                    if (current.countCards('j') && current != player && get.attitude(player, current) > 0) {
                                                        return true;
                                                    }
                                                });
                                                if (num > 2) return [0, 1];
                                                if (num == 2) return [0.5, 1];
                                            }
                                        },
                                    },
                                },
                            },

                            // 神大小乔
                            hpp_shuangshu: {
                                audio: 'hppshuangshu',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                frequent: true,
                                content: function () {
                                    var cards = get.cards(2), bool1 = false, bool2 = false;
                                    game.cardsGotoOrdering(cards);
                                    player.showCards(cards, get.translation(player) + '发动了【双姝】');
                                    for (var i of cards) {
                                        if (get.suit(i, false) == 'diamond') bool1 = true;
                                        if (get.suit(i, false) == 'heart') bool2 = true;
                                    }
                                    if (bool1) {
                                        game.log(player, '强化了技能', '#g【娉婷】');
                                        player.addTempSkill('hpp_shuangshu_pingting');
                                    }
                                    if (bool2) {
                                        game.log(player, '强化了技能', '#g【移筝】');
                                        player.addTempSkill('hpp_shuangshu_yizheng');
                                    }
                                    if (!bool1 && !bool2) player.gain(cards, 'gain2');
                                    else game.cardsDiscard(cards);
                                },
                                subSkill: {
                                    pingting: {
                                        charlotte: true,
                                        mark: true,
                                        marktext: '婷',
                                        intro: { content: '本回合发动【双姝】可多选择一项' },
                                    },
                                    yizheng: {
                                        charlotte: true,
                                        mark: true,
                                        marktext: '筝',
                                        intro: { content: '本回合发动【移筝】可多选择一项' },
                                    },
                                },
                            },
                            hpp_pingting: {
                                audio: 'hpppingting',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseButton([
                                        '###' + get.prompt('hpp_pingting') + '###' + '选择并于本阶段获得下列至多' + get.cnNumber(player.hasSkill('hpp_shuangshu_pingting') ? 3 : 2) + '项效果', [[
                                            ['distance', '本阶段使用的第一张牌无距离限制'],
                                            ['return', '本阶段使用第二张牌指定目标后获得此牌'],
                                            ['draw', '本阶段使用的第三张牌结算完成后摸两张牌'],
                                            ['reuse', '本阶段使用的第四张牌额外结算一次'],
                                        ], 'textbutton']
                                    ]).set('ai', function (button) {
                                        var player = _status.event.player;
                                        var num = player.countCards('hs', function (card) {
                                            return player.hasUseTarget(card) && player.getUseValue(card) > 0;
                                        });
                                        switch (button.link) {
                                            case 'distance': {
                                                if (game.hasPlayer(function (target) {
                                                    return player.hasCard('hs', function (card) {
                                                        return player.canUse(card, target, false) && player.canUse(card, target) && get.effect(target, card, player, player) > 0;
                                                    });
                                                })) return 1;
                                                return 0.5;
                                                break;
                                            }
                                            case 'return': {
                                                if (num >= 2) return 2;
                                                return 0.6;
                                                break;
                                            }
                                            case 'draw': {
                                                if (num >= 3) return 4;
                                                return 0.7;
                                                break;
                                            }
                                            case 'reuse': {
                                                if (num >= 4) return 3;
                                                return 0.8;
                                                break;
                                            }
                                        }
                                    }).set('selectButton', [1, player.hasSkill('hpp_shuangshu_pingting') ? 3 : 2]);
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_pingting');
                                        for (var i of result.links) player.addTempSkill('hpp_pingting_' + i, { player: 'phaseUseAfter' });
                                    }
                                },
                                subSkill: {
                                    distance: {
                                        charlotte: true,
                                        onremove: true,
                                        mark: true,
                                        marktext: '①',
                                        intro: { content: '本阶段使用的第一张牌无距离限制' },
                                        //为适配联机进行的代码退化[doge]
                                        mod: {
                                            targetInRange: function (card, player, target) {
                                                //if(game.online){
                                                if (!player.storage.hpp_pingting_distance) return true;
                                                //}
                                                /*
                                                else{
                                                var evt=_status.event.getParent('phaseUse');
                                                if(evt&&evt.name=='phaseUse'&&!player.getHistory('useCard',function(evt2){
                                                return evt2.getParent('phaseUse')==evt;
                                                }).length) return true;
                                                }
                                                */
                                            },
                                        },
                                        trigger: { player: 'useCard1' },
                                        filter: function (event, player) {
                                            return !player.storage.hpp_pingting_distance/*&&player.isOnline()*/;
                                        },
                                        direct: true,
                                        firstDo: true,
                                        content: function () {
                                            player.storage.hpp_pingting_distance = true;
                                        },
                                    },
                                    return: {
                                        charlotte: true,
                                        mark: true,
                                        marktext: '②',
                                        intro: { content: '本阶段使用第二张牌指定目标后获得此牌' },
                                        audio: 'hpp_pingting',
                                        trigger: { player: 'useCardToPlayered' },
                                        filter: function (event, player) {
                                            if (!event.isFirstTarget) return false;
                                            var evt = event.getParent('phaseUse');
                                            return evt && evt.player == player && player.getHistory('useCard', function (evt2) {
                                                return evt2.getParent('phaseUse') == evt;
                                            }).indexOf(event.getParent()) == 1 && event.cards && event.cards.filterInD().length;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.gain(trigger.cards.filterInD(), 'gain2');
                                        },
                                        ai: {
                                            result: {
                                                player: function (card, player, target) {
                                                    var evt = _status.event.getParent('phaseUse');
                                                    if (['equip', 'delay'].includes(get.type(card)) && evt && evt.player == player && player.getHistory('useCard', function (evt2) {
                                                        return evt2.getParent('phaseUse') == evt;
                                                    }).length == 1) return 0.3;
                                                },
                                            },
                                        },
                                    },
                                    draw: {
                                        charlotte: true,
                                        mark: true,
                                        marktext: '③',
                                        intro: { content: '本阶段使用的第三张牌结算完成后摸两张牌' },
                                        audio: 'hpp_pingting',
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            var evt = event.getParent('phaseUse');
                                            return evt && evt.player == player && player.getHistory('useCard', function (evt2) {
                                                return evt2.getParent('phaseUse') == evt;
                                            }).indexOf(event) == 2;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.draw(2);
                                        },
                                    },
                                    reuse: {
                                        //group:'hpp_pingting_buff',
                                        charlotte: true,
                                        mark: true,
                                        marktext: '④',
                                        intro: { content: '本阶段使用的第四张牌额外结算一次' },
                                        audio: 'hpp_pingting',
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            var evt = event.getParent('phaseUse');
                                            return evt && evt.player == player && player.getHistory('useCard', function (evt2) {
                                                return evt2.getParent('phaseUse') == evt;
                                            }).indexOf(event) == 3 && event.targets/*&&!event.reuse_buff*/;
                                        },
                                        forced: true,
                                        content: function () {
                                            //trigger.reuse_buff=player;
                                            trigger.effectCount++;
                                            game.log(trigger.card, '额外结算一次');
                                        },
                                        ai: {
                                            result: {
                                                player: function (card, player, target) {
                                                    var evt = _status.event.getParent('phaseUse');
                                                    if (card.name == 'tiesuo' && evt && evt.player == player && player.getHistory('useCard', function (evt2) {
                                                        return evt2.getParent('phaseUse') == evt;
                                                    }).length == 3) return 'zerotarget';
                                                },
                                            },
                                        },
                                    },
                                    /*
                                    buff:{
                                    charlotte:true,
                                    trigger:{global:'useCardToTargeted'},
                                    filter:function(event,player){
                                    return event.parent.reuse_buff==player&&event.targets.length==event.parent.triggeredTargets4.length;
                                    },
                                    direct:true,
                                    lastDo:true,
                                    content:function(){
                                    trigger.getParent().targets=trigger.getParent().targets.concat(trigger.targets);
                                    trigger.getParent().triggeredTargets4=trigger.getParent().triggeredTargets4.concat(trigger.targets);
                                    },
                                    },
                                    */
                                },
                            },
                            hpp_yizheng: {
                                canMove: function (type) {
                                    return game.hasPlayer(function (target) {
                                        return target.countCards('e', function (card) {
                                            return game.hasPlayer(function (current) {
                                                return current != target && current.canEquip(card) && get.subtype(card) == type;
                                            });
                                        });
                                    });
                                },
                                audio: 'hppyizheng',
                                trigger: { player: 'phaseUseEnd' },
                                filter: function (event, player) {
                                    if (!player.canMoveCard(null, true)) return false;
                                    return [1, 2, 3, 4].some(num => lib.skill.hpp_yizheng.canMove('equip' + num));
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var choiceList = [];
                                    if (lib.skill.hpp_yizheng.canMove('equip1')) choiceList.push(['equip1', '移动一张武器牌']);
                                    if ([3, 4].some(num => lib.skill.hpp_yizheng.canMove('equip' + num))) choiceList.push(['equip6', '移动一张坐骑牌']);
                                    if (lib.skill.hpp_yizheng.canMove('equip2')) choiceList.push(['equip2', '移动一张防具牌']);
                                    player.chooseButton([
                                        '###' + get.prompt('hpp_yizheng') + '###' + '选择移动至多' + get.cnNumber(player.hasSkill('hpp_shuangshu_yizheng') ? 2 : 1) + '种副类别的装备牌', [choiceList, 'textbutton']
                                    ]).set('ai', function (button) {
                                        var player = _status.event.player, choice = [];
                                        for (var i of ['equip2', 'equip6', 'equip1']) {
                                            if (game.hasPlayer(function (target) {
                                                if (current == player || get.attitude(player, target) >= 0) return false;
                                                return target.countCards('e', function (card) {
                                                    return game.hasPlayer(function (current) {
                                                        return current.canEquip(card) && get.subtype(card) == i && get.value(card, target) > 0 && get.attitude(player, current) > 0 && get.value(card, current) > 0;
                                                    });
                                                });
                                            }) && !choice.includes(['equip3', 'equip4'].includes(i) ? 'equip6' : i)) choice.push(['equip3', 'equip4'].includes(i) ? 'equip6' : i);
                                        }
                                        if (choice.includes(button.link)) return 3 - choice.indexOf(button.link);
                                        return -1;
                                    }).set('selectButton', [1, player.hasSkill('hpp_shuangshu_yizheng') ? 2 : 1]);
                                    'step 1'
                                    if (result.bool) {
                                        result.links.sort(function (a, b) {
                                            return ['equip1', 'equip2', 'equip6'].indexOf(a) - ['equip1', 'equip2', 'equip6'].indexOf(b);
                                        });
                                        player.logSkill('hpp_yizheng');
                                        event.choiceList = result.links;
                                        event.count = 0;
                                        event.list = [];
                                    }
                                    else event.finish();
                                    'step 2'
                                    var subtype = event.choiceList.shift();
                                    event.list.push(subtype);
                                    if (subtype == 'equip6') {
                                        event.list.addArray(['equip3', 'equip4']);
                                        event.list.remove('equip6');
                                    }
                                    'step 3'
                                    player.chooseTarget(2, function (card, player, target) {
                                        if (ui.selected.targets.length) {
                                            var from = ui.selected.targets[0];
                                            return target != from && from.countCards('e', card => target.canEquip(card) && _status.event.list.includes(get.subtype(card)));
                                        }
                                        return _status.event.list.some(type => lib.skill.hpp_yizheng.canMove(type));
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (!ui.selected.targets.length) {
                                            var getMoveValue = function (player, types) {
                                                var cards = player.getCards('e', function (card) {
                                                    return game.hasPlayer(function (current) {
                                                        return current != player && current.canEquip(card) && types.includes(get.subtype(card));
                                                    });
                                                });
                                                cards.sort((a, b) => get.value(b, player) - get.value(a, player));
                                                return get.value(cards[0], player);
                                            };
                                            return (1 - get.sgn(get.attitude(player, target))) * getMoveValue(target, _status.event.list);
                                        }
                                        var from = ui.selected.targets[0];
                                        var cards = from.getCards('e', function (card) {
                                            return game.hasPlayer(function (current) {
                                                return current != from && current.canEquip(card) && types.includes(get.subtype(card));
                                            });
                                        });
                                        cards.sort((a, b) => get.value(b, from) - get.value(a, from));
                                        return get.sgn(get.attitude(player, target)) * get.value(cards[0], target);
                                    }).set('multitarget', true).set('targetprompt', ['被移走', '移动目标']).set('prompt', '请选择移动的目标').set('prompt2', '将一名角色装备区中的' + get.translation(event.list[0]) + '移动到另一名角色的装备区中').set('list', event.list);
                                    'step 4'
                                    if (result.bool) {
                                        player.line2(result.targets, 'green');
                                        event.targets = result.targets;
                                    }
                                    else event.goto(8);
                                    'step 5'
                                    game.delay();
                                    'step 6'
                                    var cards = targets[0].getCards('e', function (card) {
                                        return event.list.includes(get.subtype(card)) && targets[1].canEquip(card);
                                    });
                                    if (cards.length == 1) event._result = { bool: true, links: cards };
                                    else player.choosePlayerCard('e', true, targets[0]).set('filterButton', function (button) {
                                        return _status.event.cards.includes(button.link);
                                    }).set('ai', function (button) {
                                        var player = _status.event.player;
                                        var targets = _status.event.targets;
                                        var from = targets[0], to = targets[1];
                                        if (get.sgn(get.attitude(player, from)) * get.value(button.link, from) > 0) return 1 / 114514;
                                        return get.sgn(get.attitude(player, to)) * get.value(button.link, to);
                                    }).set('cards', cards).set('targets', result.targets);
                                    'step 7'
                                    if (result.bool) {
                                        var link = result.links[0];
                                        if (get.position(link) == 'e') {
                                            event.count++;
                                            targets[1].equip(link);
                                            targets[0].$give(link, targets[1], false);
                                        }
                                        game.delay();
                                    }
                                    'step 8'
                                    if (event.choiceList.length) {
                                        event.list = [];
                                        event.goto(2);
                                    }
                                    'step 9'
                                    switch (event.count) {
                                        case 1: player.recover(); break;
                                        case 2: player.addTempSkill('hpp_yizheng_draw', { player: 'phaseBegin' }); break;
                                    }
                                },
                                subSkill: {
                                    draw: {
                                        charlotte: true,
                                        mark: true,
                                        intro: { content: '失去一张牌后，摸一张牌' },
                                        audio: 'hpp_yizheng',
                                        trigger: {
                                            player: 'loseAfter',
                                            global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                        },
                                        filter: function (event, player) {
                                            var evt = event.getl(player);
                                            if (!evt || !evt.cards2 || !evt.cards2.length) return false;
                                            return true;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.draw(trigger.getl(player).cards2.length);
                                        },
                                    },
                                },
                            },

                            // 神典韦
                            hpp_shenwei: {
                                global: 'hpp_shenwei_damage',
                                audio: 'hppshenwei',
                                trigger: { player: 'phaseBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return !current.hasMark('hpp_shenwei');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var num = (player.hp == 1 ? [1, 2] : 1);
                                    player.chooseTarget(get.prompt2('hpp_shenwei'), function (card, player, target) {
                                        return !target.hasMark('hpp_shenwei');
                                    }, num).set('ai', function (target) {
                                        var player = _status.event.player, num = 2;
                                        if (target == player) num = 1;
                                        return (get.attitude(player, target) - 4) * num;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_shenwei', target);
                                        target.addMark('hpp_shenwei', 1);
                                    }
                                },
                                marktext: '卫',
                                intro: { name2: '卫', content: 'mark' },
                                ai: {
                                    expose: 0.25,
                                    threaten: 4.8,
                                },
                                subSkill: {
                                    damage: {
                                        trigger: { player: 'damageBegin4' },
                                        filter: function (event, player) {
                                            return player.hasMark('hpp_shenwei') && game.hasPlayer(function (current) {
                                                return current.hasSkill('hpp_shenwei');
                                            });
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('hpp_shenwei'), '将伤害转移给一名拥有〖神卫〗的角色', function (card, player, target) {
                                                return target.hasSkill('hpp_shenwei');
                                            }).set('ai', function (target) {
                                                var player = _status.event.player, att = get.attitude(player, target);
                                                if (att > 0 && player.hp > 1 && target.hp <= 1) return 0;
                                                return -att + 114514;
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                player.logSkill('hpp_shenwei', target);
                                                player.removeMark('hpp_shenwei', player.countMark('hpp_shenwei'));
                                                event.trigger('removeShenWei');
                                                trigger.player = target;
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_elai: {
                                audio: 'hppelai',
                                trigger: { global: 'removeShenWei' },
                                filter: function (event, player) {
                                    return player.isDamaged() || game.hasPlayer(function (current) {
                                        return current != player && player.inRange(current);
                                    });
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    if (!game.hasPlayer(function (current) {
                                        return current != player && player.inRange(current);
                                    })) result.index = 0;
                                    else if (player.isHealthy()) result.index = 1;
                                    else player.chooseControl().set('choiceList', [
                                        '回复1点体力',
                                        '对攻击范围内的一名其他角色造成1点伤害'
                                    ]).set('ai', function () {
                                        var num = 3;
                                        if (player.hasSkill('hpp_kuangxi') && game.hasPlayer(function (current) {
                                            return current.hasMark('hpp_shenwei');
                                        })) num--;
                                        if (player.hp >= num && game.hasPlayer(function (current) {
                                            return current != player && get.damageEffect(current, player, player) > 0;
                                        })) return 1;
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.index == 0) {
                                        player.recover();
                                        event.finish();
                                    }
                                    else player.chooseTarget('请选择【恶来】的目标', '对一名攻击范围内的一名其他角色造成1点伤害', true, function (card, player, target) {
                                        return target != player && player.inRange(target);
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.damageEffect(target, player, player) + 114514;
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target);
                                        target.damage();
                                    }
                                },
                                ai: { combo: 'hpp_shenwei' },
                            },
                            hpp_kuangxi: {
                                trigger: { source: 'damageBegin1' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current.hasMark('hpp_shenwei');
                                    });
                                },
                                forced: true,
                                content: function () {
                                    trigger.num++;
                                },
                                ai: { combo: 'hpp_shenwei' },
                            },

                            // 神貂蝉
                            hpp_meihun: {
                                audio: 'hppmeihun',
                                trigger: { player: 'phaseJieshuBegin', target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    if (event.name != 'phaseJieshu' && game.getGlobalHistory('useCard', function (evt) {
                                        return evt.card.name == 'sha' && evt.targets.includes(player);
                                    }).indexOf(event.getParent()) != 0) return false;
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countCards('he');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_meihun'), function (card, player, target) {
                                        return target != player && target.countCards('he');
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return -get.sgn(get.attitude(player, target)) * target.countCards('he');
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.logSkill('hpp_meihun', target);
                                        event.target = target;
                                        player.chooseControl(lib.suit.slice(0).reverse()).set('prompt', '请声明一个花色').set('ai', function () {
                                            var target = _status.event.target, cards = target.getCards('he');
                                            var suits = lib.suit.slice(0);
                                            suits.sort(function (a, b) {
                                                var num = function (suit) {
                                                    return cards.filter(function (card) {
                                                        return get.suit(card) == suit;
                                                    }).length;
                                                };
                                                return num(b) - num(a);
                                            });
                                            return suits[0];
                                        }).set('target', target);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var suit = result.control;
                                    player.chat(get.translation(suit + 2));
                                    game.log(player, '选择了', '#y' + get.translation(suit + 2));
                                    if (target.countCards('he', { suit: suit })) player.gain(target.getCards('he', { suit: suit }), target, 'giveAuto');
                                    else if (target.countCards('h')) player.gainPlayerCard(target, true, 'h', 'visible');
                                },
                            },
                            hpp_huoxin: {
                                audio: 'hpphuoxin',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return lib.skill.hpp_huoxin.filterTarget(null, player, target);
                                    }) && player.countCards('he');
                                },
                                filterTarget: function (card, player, target) {
                                    if (!ui.selected.targets.length) {
                                        return game.hasPlayer(function (current) {
                                            return current != target && target.canCompare(current);
                                        });
                                    }
                                    return ui.selected.targets[0].canCompare(target);
                                },
                                selectTarget: 2,
                                multitarget: true,
                                multiline: true,
                                targetprompt: ['发起人', '拼点目标'],
                                filterCard: true,
                                check: function (card) {
                                    return 1 / (get.value(card) || 0.5);
                                },
                                position: 'he',
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    event.list = [];
                                    targets[0].chooseToCompare(targets[1]);
                                    'step 1'
                                    for (var target of targets) {
                                        if (result.winner !== target) event.list.push(target);
                                    }
                                    event.list.sortBySeat();
                                    var suits = lib.suit.slice(0).reverse();
                                    suits.push('cancel2');
                                    player.chooseControl(suits).set('prompt', get.translation(event.list) + '拼点没赢，是否声明一个花色令其进行选择？').set('ai', function () {
                                        var currents = _status.event.list, cards = [];
                                        for (var i of currents) cards.addArray(i.getCards('he'));
                                        var suits = lib.suit.slice(0);
                                        suits.sort(function (a, b) {
                                            var num = function (suit) {
                                                return cards.filter(function (card) {
                                                    return get.suit(card) == suit;
                                                }).length;
                                            };
                                            return num(b) - num(a);
                                        });
                                        return suits[0];
                                    }).set('list', event.list);
                                    'step 2'
                                    var suit = result.control;
                                    if (suit != 'cancel2') {
                                        player.chat(get.translation(suit + 2));
                                        game.log(player, '选择了', '#y' + get.translation(suit + 2));
                                        event.suit = suit;
                                    }
                                    else event.finish();
                                    'step 3'
                                    var target = event.list.shift();
                                    event.target = target;
                                    player.line(target);
                                    if (!target.countCards('he', { suit: event.suit })) event._result = { index: 1 };
                                    else target.chooseControl().set('choiceList', [
                                        '交给' + get.translation(player) + '所有的' + get.translation(event.suit) + '牌',
                                        '不能使用或打出' + get.translation(event.suit) + '牌直到你的下个回合结束'
                                    ]).set('ai', () => 1);
                                    'step 4'
                                    if (result.index == 0) player.gain(target.getCards('he', { suit: event.suit }), target, 'giveAuto');
                                    else {
                                        target.addTempSkill('hpp_huoxin_use', { player: 'phaseEnd' });
                                        target.markAuto('hpp_huoxin_use', [event.suit]);
                                    }
                                    'step 5'
                                    if (event.list.length) event.goto(3);
                                },
                                ai: {
                                    order: 12,
                                    result: {
                                        target: function (player, target) {
                                            return -target.countCards('h');
                                        },
                                    },
                                },
                                subSkill: {
                                    use: {
                                        charlotte: true,
                                        onremove: true,
                                        intro: { name: '魅惑', content: '不能使用或打出$花色的牌' },
                                        mod: {
                                            cardEnabled2: function (card, player) {
                                                if (player.getStorage('hpp_huoxin_use').includes(get.suit(card))) return false;
                                            },
                                        },
                                    },
                                },
                            },

                            // 神甘宁
                            hpp_poxi: {
                                audio: 'drlt_poxi',
                                enable: 'phaseUse',
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h');
                                },
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    var chooseButton;
                                    event.list1 = [];
                                    event.list2 = [];
                                    if (player.countCards('h')) chooseButton = player.chooseButton(3, ['你的手牌', player.getCards('h'), get.translation(target.name) + '的手牌', target.getCards('h')]);
                                    else chooseButton = player.chooseButton(3, [get.translation(target.name) + '的手牌', target.getCards('h')]);
                                    chooseButton.set('target', target);
                                    chooseButton.set('ai', function (button) {
                                        var player = _status.event.player;
                                        var target = _status.event.target;
                                        var ps = [];
                                        var ts = [];
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            var card = ui.selected.buttons[i].link;
                                            if (target.getCards('h').includes(card)) ts.push(card);
                                            else ps.push(card);
                                        }
                                        var card = button.link;
                                        var owner = get.owner(card);
                                        var val = get.value(card) || 1;
                                        if (owner == target) {
                                            if (ts.length > 1) return 0;
                                            if (ts.length == 0 || player.hp > 3) return val;
                                            return 2 * val;
                                        }
                                        return 7 - val;
                                    });
                                    chooseButton.set('filterButton', function (button) {
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            if (get.suit(button.link) == get.suit(ui.selected.buttons[i].link)) return false;
                                        };
                                        return true;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var list = result.links;
                                        for (var i = 0; i < list.length; i++) {
                                            if (get.owner(list[i]) == player) event.list1.push(list[i]);
                                            else event.list2.push(list[i]);
                                        }
                                        if (event.list1.length && event.list2.length) {
                                            game.loseAsync({
                                                lose_list: [
                                                    [player, event.list1],
                                                    [target, event.list2]
                                                ],
                                                discarder: player,
                                            }).setContent('discardMultiple');
                                        }
                                        else if (event.list2.length) target.discard(event.list2).discarder = player;
                                        else player.discard(event.list1);
                                    };
                                    'step 2'
                                    if (event.list1.length + event.list2.length != 3) return;
                                    if (event.list1.length == 0) player.loseMaxHp();
                                    if (event.list1.length == 2) {
                                        player.recover();
                                        player.draw();
                                    }
                                    if (event.list1.length == 3) player.draw(3);
                                },
                                ai: {
                                    order: 13,
                                    result: { target: -1 },
                                },
                            },

                            // 神关羽
                            hpp_wushen: {
                                mod: {
                                    cardnature: function (card) {
                                        if (get.suit(card) == 'heart' && get.name(card) == 'sha') return false;
                                    },
                                    targetInRange: function (card) {
                                        if (get.suit(card) == 'heart' && get.name(card) == 'sha') return true;
                                    },
                                },
                                group: 'hpp_wushen_wusheng',
                                audio: 'wushen',
                                trigger: { source: 'damageBegin1' },
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'sha' && get.suit(event.card) == 'heart';
                                },
                                content: function () {
                                    trigger.num++;
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                        },
                                    },
                                    directHit_ai: true,
                                    skillTagfilter: function (player, tag, arg) {
                                        return arg.card.name == 'sha' && get.suit(arg.card) == 'heart';
                                    },
                                },
                                subSkill: {
                                    wusheng: {
                                        audio: 'wushen',
                                        enable: ['chooseToRespond', 'chooseToUse'],
                                        filterCard: function (card, player) {
                                            return get.suit(card) == 'heart';
                                        },
                                        position: 'hs',
                                        viewAs: { name: 'sha' },
                                        viewAsFilter: function (player) {
                                            if (!player.countCards('hs', { suit: 'heart' })) return false;
                                            return true;
                                        },
                                        prompt: '将一张红桃手牌当作杀使用或打出',
                                        check: function (card) {
                                            var val = get.value(card);
                                            if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                                            return 8 - val;
                                        },
                                        ai: {
                                            respondSha: true,
                                            skillTagFilter: function (player) {
                                                if (!player.countCards('hs', { suit: 'heart' })) return false;
                                                return true;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_wuhun: {
                                audio: 'wuhun2',
                                group: ['hpp_wuhun_mark', 'hpp_wuhun_die', 'wuhun22', 'wuhun23'],
                                trigger: { player: 'damageEnd' },
                                forced: true,
                                filter: function (event, player) {
                                    return event.source != undefined;
                                },
                                content: function () {
                                    trigger.source.addMark('hpp_wuhun_mark', trigger.num);
                                },
                                subSkill: {
                                    die: {
                                        audio: 'wuhun2',
                                        skillAnimation: true,
                                        animationColor: 'soil',
                                        trigger: { player: ['die', 'dyingAfter'] },
                                        filter: function (event, player) {
                                            if (event.name == 'dying' && !player.isIn()) return false;
                                            return game.hasPlayer(function (current) {
                                                return current != player && current.hasMark('hpp_wuhun_mark');
                                            });
                                        },
                                        forced: true,
                                        forceDie: true,
                                        content: function () {
                                            'step 0'
                                            var num = 0;
                                            for (var i = 0; i < game.players.length; i++) {
                                                var current = game.players[i];
                                                if (current != player && current.countMark('hpp_wuhun_mark') > num) {
                                                    num = current.countMark('hpp_wuhun_mark');
                                                }
                                            }
                                            player.chooseTarget('请选择【武魂】的目标', true, function (card, player, target) {
                                                return target != player && target.countMark('hpp_wuhun_mark') == _status.event.num;
                                            }).set('ai', function (target) {
                                                return -get.attitude(_status.event.player, target);
                                            }).set('forceDie', true).set('num', num);
                                            'step 1'
                                            if (result.bool && result.targets && result.targets.length) {
                                                var target = result.targets[0];
                                                event.target = target;
                                                player.line(target, { color: [255, 255, 0] });
                                                game.delay(2);
                                            }
                                            'step 2'
                                            target.judge(function (card) {
                                                if (['tao', 'taoyuan'].includes(card.name)) return 10;
                                                return -10;
                                            });
                                            'step 3'
                                            if (!result.bool) target.loseHp(5);
                                        },
                                    },
                                    mark: {
                                        marktext: '魇',
                                        intro: {
                                            name: '梦魇',
                                            content: 'mark',
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 0.1,
                                    notemp: true,
                                },
                            },

                            // 神郭嘉
                            hpp_gjtianyi: {
                                audio: 'stianyi',
                                derivation: 'hpp_zuoxing',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                juexingji: true,
                                skillAnimation: true,
                                animationColor: 'gray',
                                filter: function (event, player) {
                                    return !game.hasPlayer(function (current) {
                                        return !current.getAllHistory('damage').length;
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_gjtianyi');
                                    player.gainMaxHp(2);
                                    player.recover();
                                    'step 1'
                                    player.chooseTarget(true, '令一名角色获得技能【佐幸】').set('ai', function (target) {
                                        return get.attitude(_status.event.player, target);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.line(target, 'green');
                                        target.storage.hpp_zuoxing = player;
                                        target.addSkillLog('hpp_zuoxing');
                                    }
                                },
                            },
                            hpp_zuoxing: {
                                audio: 'zuoxing',
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    var target = player.storage.hpp_zuoxing;
                                    return player.hasSkill('hpp_zuoxing') && target && target.isIn() && target.maxHp > 1;
                                },
                                check: function (event, player) {
                                    var target = player.storage.hpp_zuoxing;
                                    if (get.attitude(player, target) <= 0) return true;
                                    return target.maxHp > 3 && !player.hasJudge('lebu');
                                },
                                prompt: function (event, player) {
                                    return get.prompt('hpp_zuoxing') + '（令' + get.translation(player.storage.hpp_zuoxing) + '减少1点体力上限，' + get.translation(player.storage.hpp_zuoxing) + '当前体力上限：' + player.storage.hpp_zuoxing.maxHp + '）';
                                },
                                content: function () {
                                    player.line(player.storage.hpp_zuoxing, 'fire');
                                    player.storage.hpp_zuoxing.loseMaxHp();
                                    player.addTempSkill('hpp_zuoxing_2');
                                },
                                subSkill: {
                                    '2': {
                                        charlotte: true,
                                        audio: 'zuoxing',
                                        enable: 'phaseUse',
                                        usable: 1,
                                        filter: function (event, player) {
                                            for (var i of lib.inpile) {
                                                if (get.type(i) == 'trick' && event.filterCard({ name: i, isCard: true }, player, event)) return true;
                                            }
                                            return false;
                                        },
                                        chooseButton: {
                                            dialog: function (event, player) {
                                                var list = [];
                                                for (var i of lib.inpile) {
                                                    if (get.type(i) == 'trick' && event.filterCard({ name: i, isCard: true }, player, event)) list.push(['锦囊', '', i]);
                                                }
                                                return ui.create.dialog('佐幸', [list, 'vcard']);
                                            },
                                            check: function (button) {
                                                return _status.event.player.getUseValue({ name: button.link[2], isCard: true });
                                            },
                                            backup: function (links, player) {
                                                return {
                                                    audio: 'zuoxing',
                                                    viewAs: {
                                                        name: links[0][2],
                                                        isCard: true,
                                                    },
                                                    filterCard: () => false,
                                                    selectCard: -1,
                                                    popname: true,
                                                }
                                            },
                                            prompt: function (links, player) {
                                                return '请选择' + get.translation(links[0][2]) + '的目标';
                                            },
                                        },
                                        ai: {
                                            order: 1,
                                            result: { player: 1 },
                                        },
                                    },
                                },
                            },
                            hpp_huishi: {
                                audio: 'sghuishi',
                                enable: 'phaseUse',
                                limited: true,
                                skillAnimation: true,
                                animationColor: 'water',
                                filterTarget: true,
                                selectTarget: function () {
                                    var player = _status.event.player;
                                    for (var target of game.filterPlayer()) {
                                        var list = target.getSkills(null, false, false).filter(function (skill) {
                                            if (target.awakenedSkills.contains(skill)) return false;
                                            var info = lib.skill[skill];
                                            return info && info.juexingji;
                                        });
                                        var bool1 = (!list.length && player.maxHp >= 3);
                                        var bool2 = (list.length && player.maxHp >= game.players.length);
                                        target.prompt((bool1 ? '可摸牌' : '') + ((bool1 && bool2) ? '<br>' : '') + (bool2 ? '可觉醒' : ''));
                                    }
                                    return 1;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_huishi');
                                    var list = target.getSkills(null, false, false).filter(function (skill) {
                                        if (target.awakenedSkills.contains(skill)) return false;
                                        var info = lib.skill[skill];
                                        return info && info.juexingji;
                                    });
                                    if (!list.length && player.maxHp >= 3) {
                                        target.draw(4);
                                        event.goto(2);
                                        return;
                                    }
                                    if (list.length && player.maxHp >= game.players.length) {
                                        if (list.length == 1) event._result = { control: list[0] };
                                        else player.chooseControl(list).set('prompt', '选择一个觉醒技，令' + get.translation(target) + '可无视条件发动该技能');
                                    }
                                    else event.goto(2);
                                    'step 1'
                                    target.storage.hpp_huishi_mark = result.control;
                                    target.markSkill('hpp_huishi_mark');
                                    var info = lib.skill[result.control];
                                    if (info.filter && !info.charlotte && !info.hpp_huishi_filter) {
                                        info.hpp_huishi_filter = info.filter;
                                        info.filter = function (event, player) {
                                            if (player.storage.hpp_huishi_mark) return true;
                                            return this.hpp_huishi_filter.apply(this, arguments);
                                        };
                                    }
                                    'step 2'
                                    player.loseMaxHp(2);
                                },
                                subSkill: { mark: { intro: { content: '发动【$】时无视条件' } } },
                                ai: {
                                    order: 0.1,
                                    expose: 0.2,
                                    result: {
                                        target: function (player, target) {
                                            if (player.maxHp < 5) return 0;
                                            var list = target.getSkills(null, false, false).filter(function (skill) {
                                                var info = lib.skill[skill];
                                                return info && info.juexingji;
                                            });
                                            if (list.length && player.maxHp >= game.players.length) return 10 * list.length;
                                            if (target.hasJudge('lebu') || target.hasSkillTag('nogain')) return 0;
                                            if (!list.length && player.maxHp >= 3) return 4;
                                            return 0;
                                        },
                                    },
                                },
                            },

                            // 神华佗
                            hpp_jishi: {
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + 3;
                                    },
                                },
                                audio: 'hppjishi',
                                group: ['hpp_jishi_recover', 'hpp_jishi_lose'],
                                marktext: '药',
                                intro: { name2: '药', content: 'mark' },
                                trigger: { global: 'phaseBefore', player: 'enterGame' },
                                filter: function (event, player) {
                                    if (player.countMark('hpp_jishi') >= 3) return false;
                                    return event.name != 'phase' || game.phaseNumber == 0;
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    player.addMark('hpp_jishi', Math.min(3, 3 - player.countMark('hpp_jishi')));
                                },
                                ai: { threaten: 10 },
                                subSkill: {
                                    recover: {
                                        audio: 'hpp_jishi',
                                        trigger: { global: 'dying' },
                                        filter: function (event, player) {
                                            return event.player.hp <= 0 && player.hasMark('hpp_jishi');
                                        },
                                        prompt2: function (event, player) {
                                            return '令' + get.translation(event.player) + '回复体力至1点';
                                        },
                                        logTarget: 'player',
                                        check: function (event, player) {
                                            return get.recoverEffect(event.player, player, player) > 0;
                                        },
                                        content: function () {
                                            player.removeMark('hpp_jishi', 1);
                                            trigger.player.recover(1 - trigger.player.hp);
                                        },
                                    },
                                    lose: {
                                        audio: 'hpp_jishi',
                                        trigger: {
                                            player: 'loseAfter',
                                            global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                                        },
                                        filter: function (event, player) {
                                            var bool = false;
                                            if (event.name == 'gain' && player == event.player) return false;
                                            var evt = event.getl(player);
                                            if (!evt || !evt.cards2 || !evt.cards2.length) return false;
                                            for (var i of evt.cards2) {
                                                if (get.color(i, player) == 'red' && i.original == 'h') bool = true;
                                            }
                                            if (!bool) return false;
                                            return player != _status.currentPhase && player.countMark('hpp_jishi') < 3;
                                        },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            var num = 0, evt = trigger.getl(player);
                                            for (var i of evt.cards2) {
                                                if (get.color(i, player) == 'red' && i.original == 'h' && num < 3 - player.countMark('hpp_jishi')) num++;
                                            }
                                            player.addMark('hpp_jishi', num);
                                        },
                                    },
                                },
                            },
                            hpp_taoxian: {
                                group: 'hpp_taoxian_use',
                                audio: 'hpptaoxian',
                                enable: 'chooseToUse',
                                filterCard: function (card) {
                                    return get.suit(card) == 'heart';
                                },
                                viewAs: { name: 'tao' },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hes', { suit: 'heart' })) return false;
                                    return true;
                                },
                                position: 'hes',
                                prompt: '将一张红桃牌当作桃使用',
                                check: function (card) {
                                    if (_status.event.type == 'dying') return 1 / Math.max(0.1, get.value(card));
                                    return 8 - get.value(card);
                                },
                                ai: { threaten: 10 },
                                subSkill: {
                                    use: {
                                        audio: 'hpp_taoxian',
                                        trigger: { global: 'useCard' },
                                        filter: function (event, player) {
                                            return event.player != player && event.card.name == 'tao';
                                        },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },
                            hpp_shenzhen: {
                                audio: 'hppshenzhen',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return player.hasMark('hpp_jishi');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var map = {};
                                    var list = [];
                                    for (var i = 1; i <= player.countMark('hpp_jishi'); i++) {
                                        var cn = get.cnNumber(i, true);
                                        map[cn] = i;
                                        list.push(cn);
                                    }
                                    list.push('cancel2');
                                    event.map = map;
                                    player.chooseControl(list).set('prompt', get.prompt2('hpp_shenzhen')).set('ai', function () {
                                        var player = _status.event.player;
                                        var num = Math.min(player.countMark('hpp_jishi'), Math.max(game.countPlayer(function (current) {
                                            return get.attitude(player, current) > 0 && current.isDamaged() && get.recoverEffect(current, player, player) > 0;
                                        }), game.countPlayer(function (current) {
                                            return get.attitude(player, current) < 0;
                                        })));
                                        if (num > 0) return get.cnNumber(num, true);
                                        return 'cancel2';
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_shenzhen');
                                        var num = event.map[result.control] || 1;
                                        event.num = num;
                                        player.removeMark('hpp_jishi', num);
                                        player.chooseControl('回血', '扣血').set('prompt', '请选择一种效果').set('ai', function (card) {
                                            if (game.countPlayer(function (current) {
                                                return get.attitude(player, current) > 0 && current.isDamaged() && get.recoverEffect(current, player, player) > 0;
                                            }) >= game.countPlayer(function (current) {
                                                return get.attitude(player, current) < 0;
                                            })) return '回血';
                                            return '扣血';
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    event.control = result.control;
                                    switch (result.control) {
                                        case '回血':
                                            player.chooseTarget('请选择回复体力的目标', [1, Math.min(num, game.countPlayer(function (current) {
                                                return current.isDamaged();
                                            }))], true, function (card, player, target) {
                                                return target.isDamaged();
                                            }).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.recoverEffect(target, player, player);
                                            });
                                            break;
                                        case '扣血':
                                            player.chooseTarget('请选择失去体力的目标', [1, Math.min(num, game.countPlayer())], true).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return -get.attitude(player, target);
                                            });
                                            break;
                                    }
                                    'step 3'
                                    if (result.bool) {
                                        result.targets.sortBySeat();
                                        player.line(result.targets);
                                        game.log(player, '选择了', result.targets);
                                        if (event.control == '回血') for (var i of result.targets) i.recover();
                                        else for (var i of result.targets) i.loseHp();
                                    }
                                },
                                ai: {
                                    threaten: 10,
                                    combo: 'hpp_jishi',
                                },
                            },

                            // 神姜维
                            // 神刘备
                            hpp_longnu: {
                                audio: 'nzry_longnu',
                                trigger: { player: 'phaseUseBegin' },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    var list = [
                                        '失去1点体力并摸两张牌，本回合你的红色手牌均视为火杀且无距离限制',
                                        '减1点体力上限，本回合你的黑色手牌均视为雷杀且无使用次数限制'
                                    ];
                                    player.chooseControl().set('choiceList', list).set('ai', function () {
                                        if (player.countCards() <= 3 && player.maxHp - player.hp <= 1) return 0;
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.index == 0) {
                                        player.loseHp();
                                        player.draw(2);
                                        player.addTempSkill('hpp_longnu_1');
                                    }
                                    else {
                                        player.loseMaxHp();
                                        player.addTempSkill('hpp_longnu_2');
                                    }
                                },
                                subSkill: {
                                    '1': {
                                        mod: {
                                            cardname: function (card, player) {
                                                if (get.color(card) == 'red') return 'sha';
                                            },
                                            cardnature: function (card, player) {
                                                if (get.color(card) == 'red') return 'fire';
                                            },
                                            targetInRange: function (card) {
                                                if (card.name == 'sha' && card.hasNature('fire')) return true;
                                            },
                                        },
                                        ai: {
                                            respondSha: true,
                                            effect: {
                                                target: function (card, player, target, current) {
                                                    if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                                },
                                            },
                                        },
                                    },
                                    '2': {
                                        mod: {
                                            cardname: function (card, player) {
                                                if (get.color(card) == 'black') return 'sha';
                                            },
                                            cardnature: function (card, player) {
                                                if (get.color(card) == 'black') return 'thunder';
                                            },
                                            cardUsable: function (card, player) {
                                                if (card.name == 'sha' && card.hasNature('thunder')) return Infinity;
                                            },
                                        },
                                        ai: {
                                            respondSha: true,
                                            effect: {
                                                target: function (card, player, target, current) {
                                                    if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                                },
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    fireAttack: true,
                                    halfneg: true,
                                },
                            },
                            hpp_jieying: {
                                audio: 'nzry_jieying',
                                locked: true,
                                global: 'hpp_jieying_all',
                                group: ['hpp_jieying_1', 'hpp_jieying_2', 'hpp_jieying_3'],
                                subSkill: {
                                    '1': {
                                        audio: 'nzry_jieying',
                                        trigger: { player: ['linkBefore', 'enterGame'], global: 'phaseBefore' },
                                        forced: true,
                                        filter: function (event, player) {
                                            if (event.name == 'link') return player.isLinked();
                                            return (event.name != 'phase' || game.phaseNumber == 0) && !player.isLinked();
                                        },
                                        content: function () {
                                            if (trigger.name != 'link') player.link(true);
                                            else trigger.cancel();
                                        },
                                    },
                                    '2': {
                                        trigger: { player: 'phaseJieshuBegin' },
                                        direct: true,
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current != player && !current.isLinked();
                                            });
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('hpp_jieying'), '横置一名其他角色', function (card, player, target) {
                                                return target != player && !target.isLinked();
                                            }).ai = function (target) {
                                                return 1 + Math.random();
                                            };
                                            'step 1'
                                            if (result.bool) {
                                                player.logSkill('hpp_jieying', result.targets[0]);
                                                result.targets[0].link(true);
                                            }
                                            else event.finish();
                                        },
                                    },
                                    '3': {
                                        audio: 'nzry_jieying',
                                        trigger: { player: 'damageBegin2' },
                                        forced: true,
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                    all: {
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                if (player.isLinked()) return num + 2 * game.countPlayer(function (current) {
                                                    return current.hasSkill('hpp_jieying');
                                                });
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    effect: {
                                        target: function (card) {
                                            if (card.name == 'tiesuo') return 'zeroplayertarget';
                                        },
                                    },
                                },
                            },

                            // 神陆逊
                            hpp_junlue: {
                                audio: 'nzry_junlve',
                                //marktext:"军",
                                intro: {
                                    content: '当前有#个标记',
                                },
                                //mark:true,
                                trigger: {
                                    player: "damageAfter",
                                    source: "damageSource",
                                },
                                forced: true,
                                content: function () {
                                    player.addMark('hpp_junlue', trigger.num);
                                },
                            },
                            hpp_cuike: {
                                audio: 'nzry_cuike',
                                trigger: {
                                    player: "phaseUseBegin",
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    if (player.countMark('hpp_junlue') % 2 == 1) {
                                        player.chooseTarget('是否发动【摧克】，对一名角色造成一点伤害？').ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                    }
                                    else {
                                        player.chooseTarget('是否发动【摧克】，横置一名角色并弃置其区域内的一张牌？').ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_cuike', result.targets);
                                        if (player.countMark('hpp_junlue') % 2 == 1) {
                                            result.targets[0].damage();
                                        }
                                        else {
                                            result.targets[0].link(true);
                                            player.discardPlayerCard(result.targets[0], 1, 'hej', true);
                                        };
                                    };
                                    'step 2'
                                    if (player.countMark('hpp_junlue') > 7) {
                                        player.chooseBool().set('ai', function () {
                                            return true;
                                        }).set('prompt', '是否弃置所有“军略”标记并对所有其他角色造成一点伤害？');
                                    } else {
                                        event.finish();
                                    };
                                    'step 3'
                                    if (result.bool) {
                                        var players = game.players.slice(0).sortBySeat();
                                        player.line(players);
                                        player.removeMark('hpp_junlue', player.countMark('hpp_junlue'));
                                        for (var i = 0; i < players.length; i++) {
                                            if (players[i] != player) players[i].damage();
                                        };
                                    };
                                },
                            },
                            hpp_zhanhuo: {
                                audio: 'nzry_dinghuo',
                                limited: true,
                                init: function (player) {
                                    player.storage.hpp_zhanhuo = false;
                                },
                                intro: {
                                    content: "limited",
                                },
                                unique: true,
                                mark: true,
                                skillAnimation: true,
                                animationColor: 'metal',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return !player.storage.hpp_zhanhuo && player.countMark('hpp_junlue') > 0;
                                },
                                check: function (event, player) {
                                    var num = game.countPlayer(function (current) { return get.attitude(player, current) < 0 && current.isLinked() });
                                    return player.storage.hpp_junlue >= num && num == game.countPlayer(function (current) { return get.attitude(player, current) < 0 });
                                },
                                filterTarget: function (card, player, target) {
                                    return target.isLinked();
                                },
                                selectTarget: function () {
                                    return [1, _status.event.player.countMark('hpp_junlue')];
                                },
                                multiline: true,
                                multitarget: true,
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_zhanhuo');
                                    player.storage.hpp_zhanhuo = true;
                                    'step 1'
                                    player.removeMark('hpp_junlue', player.countMark('hpp_junlue'));
                                    for (var i = 0; i < targets.length; i++) {
                                        targets[i].discard(targets[i].getCards('e'));
                                    }
                                    player.chooseTarget(true, '对一名目标角色造成1点火焰伤害', function (card, player, target) {
                                        return _status.event.targets.contains(target);
                                    }).set('targets', targets).ai = function () { return 1 };
                                    'step 2'
                                    if (result.bool) {
                                        result.targets[0].damage('fire', 'nocard');
                                    }
                                },
                                ai: {
                                    order: 1,
                                    fireAttack: true,
                                    result: {
                                        target: function (player, target) {
                                            if (target.hasSkillTag('nofire')) return 0;
                                            if (lib.config.mode == 'versus') return -1;
                                            if (player.hasUnknown()) return 0;
                                            return get.damageEffect(target, player) - target.countCards('e');
                                        }
                                    }
                                }
                            },

                            // 神吕布
                            hpp_wuqian: {
                                derivation: 'wushuang',
                                audio: 'ol_wuqian',
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (!_status.currentPhase || player != _status.currentPhase) return false;
                                    if (!['sha', 'juedou'].contains(event.card.name) || !event.isFirstTarget) return false;
                                    return player.getHistory('useCard', function (evt) {
                                        return (evt.card.name == 'sha' || evt.card.name == 'juedou');
                                    }).indexOf(event.getParent()) == 0;
                                },
                                forced: true,
                                logTarget: 'targets',
                                content: function () {
                                    for (var target of trigger.targets) {
                                        target.addTempSkill('qinggang2');
                                        target.storage.qinggang2.add(trigger.card);
                                        if (trigger.card.name == 'sha') {
                                            var id = target.playerid;
                                            var map = trigger.getParent().customArgs;
                                            if (!map[id]) map[id] = {};
                                            if (typeof map[id].shanRequired == 'number') map[id].shanRequired++;
                                            else map[id].shanRequired = 2;
                                        }
                                        else {
                                            var id = target.playerid;
                                            var idt = target.playerid;
                                            var map = trigger.getParent().customArgs;
                                            if (!map[idt]) map[idt] = {};
                                            if (!map[idt].shaReq) map[idt].shaReq = {};
                                            if (!map[idt].shaReq[id]) map[idt].shaReq[id] = 1;
                                            map[idt].shaReq[id]++;
                                        }
                                    }
                                },
                                ai: {
                                    unequip_ai: true,
                                    skillTagfilter: function (player, tag, arg) {
                                        if (arg && arg.card && !player.getHistory('useCard', function (evt) {
                                            return (evt.card.name == 'sha' || evt.card.name == 'juedou');
                                        }).length && ['sha', 'juedou'].contains(arg.card.name)) return true;
                                        return false;
                                    },
                                },
                            },
                            hpp_shenfen: {
                                unique: true,
                                mark: true,
                                limited: true,
                                audio: 'ol_shenfen',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.hp >= 3;
                                },
                                skillAnimation: true,
                                animationColor: 'metal',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_shenfen');
                                    player.loseHp(3);
                                    event.delay = false;
                                    event.targets = game.filterPlayer();
                                    event.targets.remove(player);
                                    event.targets.sort(lib.sort.seat);
                                    player.line(event.targets, 'green');
                                    event.targets2 = event.targets.slice(0);
                                    event.targets3 = event.targets.slice(0);
                                    'step 1'
                                    if (event.targets2.length) {
                                        event.targets2.shift().damage('nocard');
                                        event.redo();
                                    }
                                    'step 2'
                                    if (event.targets.length) {
                                        event.current = event.targets.shift()
                                        if (event.current.countCards('e')) event.delay = true;
                                        event.current.discard(event.current.getCards('e')).delay = false;
                                    }
                                    'step 3'
                                    if (event.delay) game.delay(0.5);
                                    event.delay = false;
                                    if (event.targets.length) event.goto(2);
                                    'step 4'
                                    if (event.targets3.length) {
                                        var target = event.targets3.shift();
                                        target.chooseToDiscard(4, 'h', true).delay = false;
                                        if (target.countCards('h')) event.delay = true;
                                    }
                                    'step 5'
                                    if (event.delay) game.delay(0.5);
                                    event.delay = false;
                                    if (event.targets3.length) event.goto(4);
                                },
                                ai: {
                                    order: 10,
                                    result: {
                                        player: function (player) {
                                            if (player.hp < 5 || player.hasUnknown()) return 0;
                                            return game.countPlayer(function (current) {
                                                if (current != player) {
                                                    return get.sgn(get.damageEffect(current, player, player));
                                                }
                                            });
                                        },
                                    },
                                },
                            },

                            // 神吕蒙
                            hpp_shelie: {
                                audio: 'shelie',
                                inherit: 'shelie',
                                forced: true,
                            },
                            gongxin_re_lvmeng: { audio: 2 },
                            hpp_gongxin: {
                                audio: 'gongxin',
                                audioname2: { hpp_lvmeng: 'gongxin_re_lvmeng' },
                                trigger: { player: 'useCardToPlayered', target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    if (event.player == event.target || event.targets.length != 1) return false;
                                    return (player == event.player ? event.target : event.player).countCards('h');
                                },
                                logTarget: function (event, player) {
                                    return player == event.player ? event.target : event.player;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, player == event.player ? event.target : event.player) <= 0;
                                },
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    var target = (player == trigger.player ? trigger.target : trigger.player);
                                    event.target = target;
                                    event.videoId = lib.status.videoId++;
                                    var cards = target.getCards('h');
                                    if (player.isOnline2()) {
                                        player.send(function (cards, id) {
                                            ui.create.dialog('攻心', cards).videoId = id;
                                        }, cards, event.videoId);
                                    }
                                    event.dialog = ui.create.dialog('攻心', cards);
                                    event.dialog.videoId = event.videoId;
                                    if (!event.isMine()) {
                                        event.dialog.style.display = 'none';
                                    }
                                    player.chooseButton().set('filterButton', function (button) {
                                        return get.color(button.link) == 'red';
                                    }).set('dialog', event.videoId).set('ai', function (button) {
                                        return get.value(button.link);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        event.card = result.links[0];
                                        var func = function (card, id) {
                                            var dialog = get.idDialog(id);
                                            if (dialog) {
                                                for (var i = 0; i < dialog.buttons.length; i++) {
                                                    if (dialog.buttons[i].link == card) {
                                                        dialog.buttons[i].classList.add('selectedx');
                                                    }
                                                    else {
                                                        dialog.buttons[i].classList.add('unselectable');
                                                    }
                                                }
                                            }
                                        }
                                        if (player.isOnline2()) {
                                            player.send(func, event.card, event.videoId);
                                        }
                                        else if (event.isMine()) {
                                            func(event.card, event.videoId);
                                        }
                                        player.chooseControl('获得此牌', '置于牌堆顶');
                                    }
                                    else {
                                        if (player.isOnline2()) {
                                            player.send('closeDialog', event.videoId);
                                        }
                                        event.dialog.close();
                                        event.finish();
                                    }
                                    'step 2'
                                    if (player.isOnline2()) {
                                        player.send('closeDialog', event.videoId);
                                    }
                                    event.dialog.close();
                                    var card = event.card;
                                    if (result.control == '置于牌堆顶') {
                                        player.showCards(card, '置于牌堆顶');
                                        target.lose(card, ui.cardPile, 'insert', 'visible');
                                        game.log(player, '将', event.card, '置于牌堆顶');
                                    }
                                    else player.gain(card, target, 'give');
                                },
                                ai: { expose: 0.25 },
                            },

                            // 神司马懿
                            hpp_renjie: {
                                unique: true,
                                group: 'hpp_renjie_lose',
                                audio: 'renjie2',
                                trigger: { player: ['enterGame', 'damageEnd'], global: 'phaseBefore' },
                                filter: function (event, player) {
                                    if (event.num == 'damage') return event.num > 0;
                                    return event.name != 'phase' || game.phaseNumber == 0;
                                },
                                notemp: true,
                                forced: true,
                                content: function () {
                                    player.addMark('hpp_renjie', trigger.num || 1);
                                },
                                marktext: '忍',
                                intro: { name: '忍', content: 'mark' },
                                subSkill: {
                                    lose: {
                                        audio: 'renjie2',
                                        trigger: { player: 'loseAfter' },
                                        filter: function (event, player) {
                                            if (event.type != 'discard' || !event.cards2) return false;
                                            var evt = event.getParent('phaseDiscard');
                                            return evt && evt.name == 'phaseDiscard' && evt.player == player;
                                        },
                                        forced: true,
                                        content: function () {
                                            player.addMark('hpp_renjie', trigger.cards2.length);
                                        },
                                    },
                                },
                            },
                            hpp_jilve: {
                                unique: true,
                                audio: 'jilue',
                                derivation: ['hpp_jilve_guicai', 'hpp_jilve_fangzhu', 'hpp_jilve_jizhi', 'hpp_jilve_wansha'],
                                group: ['hpp_jilve_guicai', 'hpp_jilve_fangzhu', 'hpp_jilve_jizhi', 'hpp_jilve_wansha'],
                                trigger: { player: ['useSkill', 'logSkillBegin'] },
                                filter: function (event, player) {
                                    if (!lib.skill.hpp_jilve.derivation.includes(event.skill)) return false;
                                    return player.getHistory('useSkill', evt => lib.skill.hpp_jilve.derivation.includes(evt.skill)).length == 1;
                                },
                                frequent: true,
                                content: function () {
                                    player.draw();
                                },
                                subSkill: {
                                    guicai: {
                                        audio: 'jilue_guicai',
                                        trigger: { global: 'judge' },
                                        filter: function (event, player) {
                                            return player.countCards('hes') && player.hasMark('hpp_renjie');
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseCard(get.prompt2('hpp_jilve_guicai'), 'hes', function (card) {
                                                var player = _status.event.player;
                                                var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                                                if (mod2 != 'unchanged') return mod2;
                                                var mod = game.checkMod(card, player, 'unchanged', 'cardRespondable', player);
                                                if (mod != 'unchanged') return mod;
                                                return true;
                                            }).set('ai', function (card) {
                                                var trigger = _status.event.getTrigger();
                                                var player = _status.event.player;
                                                var judging = _status.event.judging;
                                                var result = trigger.judge(card) - trigger.judge(judging);
                                                var attitude = get.attitude(player, trigger.player);
                                                if (attitude == 0) {
                                                    if (player.isDamaged() && get.suit(card, player) == 'heart') return 10;
                                                    if (get.suit(card, player) == 'club') return 8;
                                                    return 0;
                                                }
                                                if (attitude > 0) {
                                                    if (result == 0) {
                                                        if (player.isDamaged() && get.suit(card, player) == 'heart') return 10;
                                                        if (get.suit(card, player) == 'club') return 8;
                                                        return 0;
                                                    }
                                                    return result - get.value(card) / 2;
                                                }
                                                else {
                                                    if (result == 0) {
                                                        if (player.isDamaged() && get.suit(card) == 'heart') return 10;
                                                        if (get.suit(card) == 'club') return 8;
                                                        return 0;
                                                    }
                                                    return -result - get.value(card) / 2;
                                                }
                                            }).set('judging', trigger.player.judging[0]);
                                            'step 1'
                                            if (result.bool) player.respond(result.cards, 'highlight', 'hpp_jilve_guicai', 'noOrdering');
                                            else event.finish();
                                            'step 2'
                                            if (result.bool) {
                                                player.removeMark('hpp_renjie', 1);
                                                if (trigger.player.judging[0].clone) {
                                                    trigger.player.judging[0].clone.delete();
                                                    game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                                                }
                                                game.cardsDiscard(trigger.player.judging[0]);
                                                trigger.player.judging[0] = result.cards[0];
                                                trigger.orderingCards.addArray(result.cards);
                                                game.log(trigger.player, '的判定牌改为', result.cards[0]);
                                                game.delay(2);
                                                event.card = result.cards[0];
                                            }
                                            else event.finish();
                                            'step 3'
                                            if (get.suit(card, player) == 'heart') player.recover();
                                            if (get.suit(card, player) == 'club') player.draw(2);
                                        },
                                        ai: {
                                            rejudge: true,
                                            tag: { rejudge: 1 },
                                        },
                                    },
                                    fangzhu: {
                                        audio: 'jilue_fangzhu',
                                        trigger: { player: 'damageEnd' },
                                        filter: function (event, player) {
                                            return player.hasMark('hpp_renjie');
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt2('hpp_jilve_fangzhu'), lib.filter.notMe).ai = function (target) {
                                                if (target.hasSkillTag('noturn')) return 0;
                                                if (target.isTurnedOver()) return get.attitude(player, target);
                                                return -get.attitude(player, target);
                                            }
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                player.logSkill('hpp_jilve_fangzhu', target);
                                                player.removeMark('hpp_renjie', 1);
                                                target.turnOver();
                                                target.draw();
                                            }
                                        },
                                        ai: {
                                            maixie: true,
                                            maixie_hp: true,
                                            effect: {
                                                target: function (card, player, target) {
                                                    if (get.tag(card, 'damage')) {
                                                        if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                                        if (target.hp <= 1) return;
                                                        if (!target.hasFriend()) return;
                                                        var hastarget = false;
                                                        var turnfriend = false;
                                                        var players = game.filterPlayer();
                                                        for (var i = 0; i < players.length; i++) {
                                                            if (get.attitude(target, players[i]) < 0 && !players[i].isTurnedOver()) {
                                                                hastarget = true;
                                                            }
                                                            if (get.attitude(target, players[i]) > 0 && players[i].isTurnedOver()) {
                                                                hastarget = true;
                                                                turnfriend = true;
                                                            }
                                                        }
                                                        if (get.attitude(player, target) > 0 && !hastarget) return;
                                                        if (turnfriend || target.hp == target.maxHp) return [0.5, 1];
                                                        if (target.hp > 1) return [1, 0.5];
                                                    }
                                                },
                                            },
                                        },
                                    },
                                    wansha: {
                                        audio: 'wansha_shen_simayi',
                                        trigger: { global: 'dying' },
                                        filter: function (event, player) {
                                            if (!_status.currentPhase || player.hasSkill('hpp_jilve_hppwansha')) return false;
                                            return player.hasMark('hpp_renjie') && player == _status.currentPhase;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) < 0;
                                        },
                                        logTarget: 'player',
                                        content: function () {
                                            player.removeMark('hpp_renjie', 1);
                                            player.addTempSkill('hpp_jilve_hppwansha', ['phaseZhunbeiAfter', 'phaseJudgeAfter', 'phaseDrawAfter', 'phaseUseAfter', 'phaseDiscardAfter', 'phaseJieshuAfter', 'phaseAfter']);
                                            game.log(player, '获得了', '#g【完杀】', '效果');
                                        },
                                    },
                                    hppwansha: {
                                        charlotte: true,
                                        forced: true,
                                        global: 'hpp_jilve_hppwanshax',
                                        mark: true,
                                        marktext: '杀',
                                        intro: { content: () => lib.translate.hppwansha_info },
                                    },
                                    hppwanshax: {
                                        mod: {
                                            cardSavable: function (card, player) {
                                                if (!_status.currentPhase || !_status.currentPhase.hasSkill('hpp_jilve_hppwansha')) return;
                                                if (player != _status.currentPhase && card.name == 'tao') return false;
                                            },
                                            cardEnabled: function (card, player) {
                                                if (!_status.currentPhase || !_status.currentPhase.hasSkill('hpp_jilve_hppwansha')) return;
                                                if (player != _status.currentPhase && card.name == 'tao') return false;
                                            },
                                        },
                                    },
                                    jizhi: {
                                        audio: 'jilue_jizhi',
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return get.type2(event.card) == 'trick' && event.card.isCard && player.hasMark('hpp_renjie');
                                        },
                                        content: function () {
                                            'step 0'
                                            player.removeMark('hpp_renjie', 1);
                                            player.draw();
                                        },
                                    },
                                },
                            },

                            // 神孙策
                            // 神孙权
                            hpp_quanxue: {
                                marktext: '学',
                                intro: { content: 'mark', name2: '学' },
                                audio: 'ext:活动武将/audio/skill:true',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    game.addGlobalSkill('hpp_quanxue_remove');
                                    player.chooseTarget(get.prompt2('hpp_quanxue'), [1, 2], lib.filter.notMe).set('ai', function (target) {
                                        return !target.hasMark('hpp_quanxue') && -get.attitude(player, target);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets.sortBySeat();
                                        player.logSkill('hpp_quanxue', targets);
                                        for (var i of targets) i.addMark('hpp_quanxue', 1);
                                    }
                                },
                                ai: {
                                    threaten: 4.5,
                                    expose: 0.25,
                                },
                                subSkill: {
                                    remove: {
                                        charlotte: true,
                                        trigger: { player: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return player.hasMark('hpp_quanxue') && game.hasPlayer(function (current) {
                                                return current.hasSkill('hpp_quanxue');
                                            });
                                        },
                                        forced: true,
                                        content: function () {
                                            'step 0'
                                            player.removeMark('hpp_quanxue', player.countMark('hpp_quanxue'));
                                            'step 1'
                                            player.chooseControl().set('choiceList', [
                                                '本回合不能对其他角色使用牌',
                                                '失去1点体力',
                                            ]).set('ai', function () {
                                                if ((player.countCards('h') < player.getHandcardLimit()) || player.hp <= 2) return 0;
                                                return 1;
                                            });
                                            'step 2'
                                            if (result.index == 0) player.addTempSkill('hpp_quanxue_block');
                                            else player.loseHp();
                                        },
                                    },
                                    block: {
                                        mark: true,
                                        intro: { content: '不能对其他角色使用牌' },
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if (player != target) return false;
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_shehu: {
                                trigger: { player: 'useCardToPlayer' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && event.target.hasMark('hpp_quanxue') && event.target.countCards('h');
                                },
                                forced: true,
                                logTarget: 'target',
                                content: function () {
                                    player.discardPlayerCard('h', true, trigger.target);
                                },
                                ai: {
                                    unequip_ai: true,
                                    combo: 'hpp_quanxue',
                                    skillTagFilter: function (player, tag, arg) {
                                        if (arg && arg.name == 'sha' && arg.target && arg.target.hasMark('hpp_quanxue')) return true;
                                        return false;
                                    },
                                },
                            },
                            hpp_dingli: {
                                audio: 'ext:活动武将/audio/skill:2',
                                trigger: { global: 'logSkill' },
                                filter: function (event, player) {
                                    return event.skill == 'hpp_quanxue_remove' && event.player != player;
                                },
                                check: function (event, player) {
                                    if (event.player.hp >= player.hp && player.isHealthy()) return false;
                                    return true;
                                },
                                round: 1,
                                logTarget: 'player',
                                content: function () {
                                    if (trigger.player.hp >= player.hp) player.recover();
                                    else player.draw(Math.min(2, player.hp - trigger.player.hp));
                                },
                                ai: { combo: 'hpp_quanxue' },
                            },

                            // 神太史慈
                            hpp_dulie: {
                                audio: 'dulie',
                                inherit: 'dulie',
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                group: 'hpp_dulie_dying',
                                subSkill: {
                                    dying: {
                                        audio: 'tspowei2',
                                        trigger: { player: 'dying' },
                                        filter: function (event, player) {
                                            return num <= 0 && !player.storage.hpp_dulie_dying;
                                        },
                                        skillAnimation: true,
                                        animationColor: 'fire',
                                        direct: true,
                                        content: function () {
                                            player.storage.hpp_dulie_dying = true;
                                            var num = game.countPlayer(current => current.hasMark('hpp_dulie'));
                                            if (num) {
                                                player.logSkill('hpp_dulie_dying');
                                                player.recover(num - player.hp);
                                            }
                                        },
                                    },
                                },
                            },
                            old_hpp_dulie: {
                                audio: 'dulie',
                                group: 'hpp_dulie_dying',
                                trigger: { target: 'useCardToTarget' },
                                forced: true,
                                logTarget: 'player',
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    'step 0'
                                    player.judge(function (result) {
                                        if (get.suit(result) == 'heart') return 2;
                                        return -1;
                                    }).judge2 = function (result) {
                                        return result.bool;
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        trigger.targets.remove(player);
                                        trigger.getParent().triggeredTargets2.remove(player);
                                        trigger.untrigger();
                                    }
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current, isLink) {
                                            if (card.name == 'sha' && !isLink && player.hp > target.hp) return 0.5;
                                        },
                                    },
                                },
                                marktext: '围',
                                intro: {
                                    name: '破围(围)',
                                    name2: '围',
                                    content: 'mark',
                                },
                                subSkill: {
                                    dying: {
                                        audio: 'tspowei2',
                                        trigger: { player: 'dying' },
                                        filter: function (event, player) {
                                            return num <= 0 && !player.storage.hpp_dulie_dying;
                                        },
                                        skillAnimation: true,
                                        animationColor: 'fire',
                                        direct: true,
                                        content: function () {
                                            player.storage.hpp_dulie_dying = true;
                                            var num = game.countPlayer(current => current.hasMark('hpp_dulie'));
                                            if (num) {
                                                player.logSkill('hpp_dulie_dying');
                                                player.recover(num - player.hp);
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_chongwei: {
                                audio: 'tspowei3',
                                forced: true,
                                group: ['hpp_chongwei_init', 'hpp_chongwei_move', 'hpp_chongwei_use', 'hpp_chongwei_remove'],
                                subSkill: {
                                    remove: {
                                        audio: 'tspowei3',
                                        trigger: { global: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.player && event.player.isIn() && event.player.hasMark('hpp_dulie');
                                        },
                                        forced: true,
                                        logTarget: 'player',
                                        content: function () {
                                            trigger.player.removeMark('hpp_dulie', trigger.player.countMark('hpp_dulie'));
                                        },
                                    },
                                    use: {
                                        audio: 'tspowei3',
                                        trigger: { global: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return event.player != player && event.player.hasMark('hpp_dulie') && (player.countCards('h') > 0 || player.hp >= event.player.hp && event.player.countCards('h') > 0);
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            var list = [], target = trigger.player, choiceList = [
                                                '弃置一张牌并对其造成1点伤害',
                                                '获得其一张手牌',
                                            ];
                                            event.target = target;
                                            if (player.hasCard(function (card) {
                                                return lib.filter.cardDiscardable(card, player, 'hpp_chongwei_use');
                                            }, 'h')) list.push('选项一');
                                            else choiceList[0] = '<span style="opacity:0.5">' + choiceList[0] + '</span>';
                                            if (player.hp >= target.hp && target.countCards('h') > 0) list.push('选项二');
                                            else choiceList[1] = '<span style="opacity:0.5">' + choiceList[1] + '</span>';
                                            player.chooseControl(list, 'cancel2').set('prompt', get.prompt('hpp_chongwei', target)).set('choiceList', choiceList).set('ai', function () {
                                                var evt = _status.event.getParent();
                                                if (evt.player.hasCard(function (card) {
                                                    return lib.filter.cardDiscardable(card, evt.player, 'hpp_chongwei_use') && get.value(card, evt.player) < 7;
                                                }, 'h') && get.damageEffect(evt.target, evt.player, evt.player) > 0) return '选项一';
                                                if (evt.player.hp >= evt.target.hp && evt.target.countCards('h') > 0 && get.attitude(evt.player, evt.target) <= 0 && !evt.target.hasSkillTag('noh')) return '选项二';
                                                return 'cancel2';
                                            });
                                            'step 1'
                                            if (result.control != 'cancel2') {
                                                if (result.control == '选项二') {
                                                    player.logSkill('hpp_chongwei_use', target);
                                                    player.gainPlayerCard(target, 'h', true);
                                                    event.goto(3);
                                                }
                                            }
                                            else event.finish();
                                            'step 2'
                                            player.chooseToDiscard('h', true).logSkill = ['hpp_chongwei_use', target];
                                            target.damage();
                                            'step 3'
                                            player.addTempSkill('tspowei_inRange');
                                        },
                                        ai: { expose: 0.2 },
                                    },
                                    init: {
                                        audio: 'tspowei3',
                                        trigger: { global: 'phaseBefore', player: 'enterGame' },
                                        filter: function (event, player) {
                                            if (!lib.skill.hpp_chongwei.subSkill.init.logTarget(event, player).length) return false;
                                            return event.name != 'phase' || game.phaseNumber == 0;
                                        },
                                        logTarget: function (event, player) {
                                            return game.filterPlayer((current) => current != player && !current.hasMark('hpp_dulie'));
                                        },
                                        forced: true,
                                        content: function () {
                                            var list = game.filterPlayer((current) => current != player && !current.hasMark('hpp_dulie')).sortBySeat();
                                            for (var i of list) i.addMark('hpp_dulie', 1, false);
                                        },
                                    },
                                    move: {
                                        audio: 'tspowei3',
                                        trigger: { player: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return game.hasPlayer((current) => current != player && current.hasMark('hpp_dulie'));
                                        },
                                        forced: true,
                                        content: function () {
                                            var list = game.filterPlayer((current) => current != player && current.hasMark('hpp_dulie')).sortBySeat();
                                            var map = {};
                                            for (var i of list) {
                                                var num = i.countMark('hpp_dulie');
                                                i.removeMark('hpp_dulie', num);
                                                map[i.playerid] = num;
                                            }
                                            for (var i of list) {
                                                var next = i.next;
                                                if (next == player) next = next.next;
                                                next.addMark('hpp_dulie', map[i.playerid]);
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_powei: {
                                unique: true,
                                derivation: 'hpp_shenzhu',
                                audio: 'tspowei1',
                                trigger: { global: 'phaseEnd' },
                                filter: function (event, player) {
                                    return !game.hasPlayer(current => current.hasMark('hpp_dulie'));
                                },
                                forced: true,
                                skillAnimation: true,
                                animationColor: 'metal',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_powei');
                                    player.addSkillLog('hpp_shenzhu');
                                    'step 1'
                                    var num = 0;
                                    game.countPlayer2(current => {
                                        var history = current.actionHistory;
                                        for (var i = history.length - 1; i >= 0; i--) {
                                            num += history[i].useSkill.filter(evt => evt.skill == 'hpp_chongwei_remove').length;
                                            if (history[i].isRound) break;
                                        }
                                    });
                                    if (num) player.draw(num);
                                },
                            },
                            hpp_shenzhu: {
                                audio: 'shenzhu',
                                inherit: 'shenzhu',
                                group: ['hpp_shenzhu_draw'],
                                subSkill: {
                                    draw: {
                                        audio: 'dulie',
                                        forced: true,
                                        trigger: { player: 'phaseBegin' },
                                        content: function () {
                                            var card = get.cardPile(card => card.name == 'sha');
                                            if (card) player.draw(card, 'gain2');
                                        },
                                    }
                                }

                            },

                            // 神荀彧

                            // 神张角
                            hpp_yizhao: {
                                audio: 'yizhao',
                                trigger: {
                                    player: ['useCard', 'respond']
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return typeof get.number(event.card) == 'number';
                                },
                                marktext: '黄',
                                intro: {
                                    name: '黄(异兆/肆军)',
                                    name2: '黄',
                                    content: 'mark',
                                    markcount: function (storage, player) {
                                        return (storage || 0).toString().slice(-2);
                                    },
                                },
                                content: function () {
                                    'step 0'
                                    event.num = player.countMark('hpp_yizhao');
                                    player.addMark('hpp_yizhao', get.number(trigger.card));
                                    'step 1'
                                    var num = Math.floor(num / 10) % 10, num2 = Math.floor(player.countMark('hpp_yizhao') / 10) % 10;
                                    if (num != num2) {
                                        var card = get.cardPile2(card => {
                                            return get.number(card, false) == num2;
                                        });
                                        if (card) player.gain(card, 'gain2');
                                    }
                                },
                                mod: {
                                    aiOrder: function (player, card, num) {
                                        if (Math.floor((get.number(card) + player.countMark('hpp_yizhao') % 10) / 10) == 1) return num + 10;
                                    },
                                },
                                ai: {
                                    threaten: 1.5,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) return [1, 0.1];
                                        }
                                    }
                                }
                            },
                            hpp_sanshou: {
                                audio: 'sanshou',
                                trigger: { player: 'damageBegin4' },
                                check: function (event, player) {
                                    return get.damageEffect(player, event.source, player, event.nature) <= 0;
                                },
                                content: function () {
                                    'step 0'
                                    var cards = game.cardsGotoOrdering(get.cards(3)).cards;
                                    event.cards = cards;
                                    player.showCards(cards, get.translation(player) + '发动了【三首】');
                                    'step 1'
                                    var types = [];
                                    types.addArray(game.getGlobalHistory('useCard').map(evt => get.type2(evt.card)));
                                    if (cards.filter(card => !types.contains(get.type2(card))).length) {
                                        trigger.cancel();
                                    }
                                    game.delayx();
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (card.name == 'shandian' || card.name == 'fulei') return [0, 0.1];
                                            if (!get.tag(card, 'damage')) return;
                                            var types = [], bool = 0;
                                            types.addArray(game.getGlobalHistory('useCard').map(evt => get.type2(evt.card)));
                                            if (!types.contains(get.type2(card))) bool = 1;
                                            if (types.length < 2) return Math.min(1, 0.4 + (types.length + bool) * 0.2);
                                        }
                                    }
                                },
                            },
                            hpp_sijun: {
                                audio: 'sijun',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return player.countMark('hpp_yizhao') > ui.cardPile.childNodes.length;
                                },
                                check: () => true,
                                content: function () {
                                    'step 0'
                                    player.removeMark('hpp_yizhao', player.countMark('hpp_yizhao'));
                                    game.washCard();
                                    'step 1'
                                    var pile = Array.from(ui.cardPile.childNodes);
                                    if (pile.length < 3) return;
                                    var bool = false, max = Math.pow(2, Math.min(100, pile.length)), index;
                                    for (var i = 0; i < max; i++) {
                                        var num = 0;
                                        index = i.toString(2);
                                        while (index.length < pile.length) {
                                            index = ('0' + index);
                                        }
                                        for (var k = 0; k < index.length; k++) {
                                            if (index[k] == '1') num += get.number(pile[k]);
                                            if (num > 36) break;
                                        }
                                        if (num == 36) {
                                            bool = true;
                                            break;
                                        }
                                    }
                                    if (bool) {
                                        var cards = [];
                                        for (var k = 0; k < index.length; k++) {
                                            if (index[k] == '1') cards.push(pile[k]);
                                        }
                                        player.gain(cards, 'gain2');
                                    }
                                }
                            },
                            hpp_tianjie: {
                                audio: 'tianjie',
                                trigger: { global: 'phaseEnd' },
                                direct: true,
                                filter: function (event, player) {
                                    return game.hasGlobalHistory('cardMove', evt => evt.washCard) && game.hasPlayer(current => current != player);
                                },
                                skillAnimation: true,
                                animationColor: 'metal',
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('hpp_tianjie'), '选择至多三名其他角色，依次对这些角色造成X点雷电伤害（X为其手牌中【闪】的数量，至少为1）', [1, 3]).set('ai', target => {
                                        var player = _status.event.player;
                                        return get.damageEffect(target, player, player, 'thunder') * Math.sqrt(Math.max(1, target.countCards('h', 'shan')));
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets;
                                        targets.sortBySeat();
                                        player.logSkill('hpp_tianjie', targets);
                                        for (var target of targets) {
                                            var num = Math.max(1, target.countCards('h', 'shan'));
                                            target.damage(num, 'thunder');
                                        }
                                    }
                                },
                            },

                            // 神张辽
                            hpp_duorui: {
                                audio: 'drlt_duorui',
                                trigger: { player: 'phaseUseBefore' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countCards('h');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_duorui'), function (card, player, target) {
                                        if (player == target) return false;
                                        return target.countCards('h');
                                    }).set('ai', function (target) {
                                        return -get.attitude(player, target) * (target.getDamagedHp() + 1);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_duorui', result.targets[0]);
                                        player.gainPlayerCard(result.targets[0], 'h', true, 'visible');
                                        result.targets[0].addTempSkill('hpp_duorui_target');
                                    }
                                    else event.finish();
                                    'step 2'
                                    player.popup(get.translation(get.color(result.cards[0])));
                                    player.addTempSkill('hpp_duorui_' + get.color(result.cards[0]));
                                },
                                subSkill: {
                                    target: { charlotte: true },
                                    red: {
                                        audio: 'drlt_duorui',
                                        trigger: { player: 'useCard' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return event.card && get.color(event.card) == 'red';
                                        },
                                        content: function () {
                                            trigger.directHit.addArray(game.filterPlayer(function (current) {
                                                return current.hasSkill('hpp_duorui_target');
                                            }));
                                        },
                                        ai: {
                                            directHit_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                return arg.target.hasSkill('hpp_duorui_target') && get.color(arg.card) == 'red';
                                            },
                                        },
                                    },
                                    black: {
                                        audio: 'drlt_duorui',
                                        trigger: { player: 'useCard' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return event.card && get.color(event.card) == 'black';
                                        },
                                        content: function () {
                                            trigger.directHit.addArray(game.filterPlayer(function (current) {
                                                return current.hasSkill('hpp_duorui_target');
                                            }));
                                        },
                                        ai: {
                                            directHit_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                return arg.target.hasSkill('hpp_duorui_target') && get.color(arg.card) == 'black';
                                            },
                                        },
                                    },
                                },
                            },
                            hpp_zhiti: {
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha' && game.countPlayer(function (current) {
                                            return current.isDamaged();
                                        }) > 2) return num + 1;
                                    },
                                },
                                audio: 'drlt_zhiti',
                                trigger: { player: 'phaseDrawBegin2' },
                                forced: true,
                                filter: function (event, player) {
                                    return game.countPlayer(function (current) {
                                        return current.isDamaged();
                                    }) > 1;
                                },
                                content: function () {
                                    trigger.num++;
                                },
                            },

                            // 神赵云
                            hpp_juejing: {
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + 3;
                                    },
                                },
                                audio: 'xinjuejing',
                                trigger: { player: ['dying', 'dyingAfter'] },
                                forced: true,
                                content: function () {
                                    player.draw();
                                }
                            },
                            hpp_longhun: {
                                audio: 'relonghun',
                                inherit: 'relonghun',
                                group: ['hpp_longhun_num', 'hpp_longhun_gain'],
                                subSkill: {
                                    num: {
                                        charlotte: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            var evt = event;
                                            return ['sha', 'tao'].contains(evt.card.name) && evt.skill == 'hpp_longhun' && evt.cards && evt.cards.length == 2;
                                        },
                                        forced: true,
                                        popup: false,
                                        content: function () {
                                            trigger.baseDamage++;
                                            player.draw();
                                        },
                                    },
                                    gain: {
                                        charlotte: true,
                                        trigger: { player: ['useCardAfter', 'respondAfter'] },
                                        autodelay: function (event) {
                                            return event.name == 'respond' ? 0.5 : false;
                                        },
                                        filter: function (event, player) {
                                            return ['shan', 'wuxie'].contains(event.card.name) && event.skill && event.skill == 'hpp_longhun' && event.cards && event.cards.length == 2 && _status.currentPhase && _status.currentPhase != player && _status.currentPhase.countGainableCards(player, 'he');
                                        },
                                        logTarget: () => _status.currentPhase,
                                        forced: true,
                                        popup: false,
                                        content: function () {
                                            player.line(_status.currentPhase, 'green');
                                            player.gainPlayerCard(_status.currentPhase, 'he', true);
                                        },
                                    },
                                },
                            },

                            // 神甄姬
                            hpp_shenfu: {
                                audio: 'shenfu',
                                trigger: { player: ['phaseEnd', 'phaseAfter'] },
                                filter: function (event, player, name) {
                                    if (name == 'phaseEnd') return true;
                                    return player.getHistory('useSkill', function (evt) {
                                        return evt.skill == 'hpp_shenfu';
                                    }).length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    if (event.triggername == 'phaseAfter') {
                                        player.logSkill('hpp_shenfu');
                                        player.draw(Math.min(5, player.getHistory('useSkill', function (evt) {
                                            return evt.skill == 'hpp_shenfu';
                                        }).length - 1));
                                        event.finish();
                                        return;
                                    }
                                    event.targets = [];
                                    event.goto(player.countCards('h') % 2 == 1 ? 1 : 4);
                                    'step 1'
                                    player.chooseTarget(get.prompt('hpp_shenfu'), '对一名其他角色造成1点雷属性伤害', function (card, player, target) {
                                        return target != player && !_status.event.getParent().targets.contains(target);
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.damageEffect(target, player, player, 'thunder') * (target.hp == 1 ? 2 : 1);
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        targets.push(target);
                                        player.logSkill('hpp_shenfu', target, 'thunder');
                                        target.damage('thunder');
                                    }
                                    else event.finish();
                                    'step 3'
                                    if (target.isDead()) event.goto(1);
                                    else event.finish();
                                    'step 4'
                                    if (!game.hasPlayer(function (target) {
                                        return !event.targets.contains(target);
                                    })) { event.finish(); return; }
                                    player.chooseTarget(get.prompt('hpp_shenfu'), '令一名角色摸一张牌或弃置其一张牌', function (card, player, target) {
                                        return !_status.event.getParent().targets.contains(target);
                                    }).set('ai', function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        var delta = target.hp - target.countCards('h');
                                        if (Math.abs(delta) == 1 && get.sgn(delta) == get.sgn(att)) return 3 * Math.abs(att);
                                        if (att > 0 || target.countCards('h') > 0) return Math.abs(att);
                                        return 0;
                                    });
                                    'step 5'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        event.target = target;
                                        player.logSkill('hpp_shenfu', target, 'wood');
                                        targets.push(target);
                                        if (target.countCards('h') == 0) event._result = { index: 0 };
                                        else player.chooseControl('摸一张牌', '弃置卡牌').set('prompt', '选择一项令' + get.translation(target) + '执行…').set('goon', get.attitude(player, target) > 0 ? 0 : 1).set('ai', () => _status.event.goon);
                                    }
                                    else event.finish();
                                    'step 6'
                                    if (result.index == 0) target.draw();
                                    else player.discardPlayerCard(target, 'he', true);
                                    'step 7'
                                    if (target.hp == target.countCards('h')) event.goto(4);
                                },
                                ai: { expose: 0.25 },
                            },
                            hpp_qixian: {
                                mod: {
                                    maxHandcardBase: function (player, num) {
                                        return 7;
                                    },
                                },
                                trigger: { player: 'phaseUseEnd' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCard(get.prompt('hpp_qixian'), '将一张手牌移出游戏，于回合结束时归还手牌中', 'hs').set('ai', function (card) {
                                        var player = _status.event.player;
                                        if (player.countCards('h') % 2 == 0 && get.position(card) == 'h' && game.hasPlayer(function (target) {
                                            return get.damageEffect(target, player, player, 'thunder') > 0;
                                        })) return 15;
                                        if (get.position(card) == 'h' && player.needsToDiscard()) return 10;
                                        if (get.position(card) == 'e' && get.value(card) <= 0) return 5;
                                        return (get.position(card) == 'h' ? 2 : 1) * -get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_qixian');
                                        player.addTempSkill('hpp_qixian2', { player: 'hpp_qixian2After' });
                                        player.addToExpansion(result.cards, player, 'give').gaintag.add('hpp_qixian2');
                                    }
                                },
                            },
                            hpp_qixian2: {
                                charlotte: true,
                                trigger: { player: 'phaseAfter' },
                                forced: true,
                                content: function () {
                                    player.gain(player.getExpansions('hpp_qixian2'), 'gain2');
                                },
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                            },
                            hpp_feifu: {
                                mod: {
                                    aiValue: function (player, card, num) {
                                        if (get.name(card) != 'shan' && get.color(card) != 'black') return;
                                        var cards = player.getCards('hs', function (card) {
                                            return get.name(card) == 'shan' || get.color(card) == 'black';
                                        });
                                        cards.sort(function (a, b) {
                                            return (get.name(b) == 'shan' ? 1 : 2) - (get.name(a) == 'shan' ? 1 : 2);
                                        });
                                        var geti = function () {
                                            if (cards.contains(card)) {
                                                return cards.indexOf(card);
                                            }
                                            return cards.length;
                                        };
                                        if (get.name(card) == 'shan') return Math.min(num, [6, 4, 3][Math.min(geti(), 2)]) * 0.6;
                                        return Math.max(num, [6.5, 4, 3][Math.min(geti(), 2)]);
                                    },
                                    aiUseful: function () {
                                        return lib.skill.hpp_feifu.mod.aiValue.apply(this, arguments);
                                    },
                                },
                                audio: 'reqingguo',
                                enable: ['chooseToRespond', 'chooseToUse'],
                                filterCard: function (card) {
                                    return get.color(card) == 'black';
                                },
                                locked: false,
                                position: 'hes',
                                viewAs: { name: 'shan' },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hes', { color: 'black' })) return false;
                                },
                                prompt: '将一张黑色牌当作【闪】使用或打出',
                                check: () => 1,
                                ai: {
                                    order: 2,
                                    respondShan: true,
                                    skillTagFilter: function (player) {
                                        if (!player.countCards('hes', { color: 'black' })) return false;
                                    },
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondShan') && current < 0) return 0.6
                                        },
                                    },
                                },
                            },

                            // 神周瑜
                            hpp_qinyin: {
                                audio: 'qinyin',
                                trigger: { player: 'phaseDiscardEnd' },
                                direct: true,
                                filter: function (event, player) {
                                    var cards = [];
                                    player.getHistory('lose', function (evt) {
                                        if (evt.type == 'discard' && evt.getParent('phaseDiscard') == event) cards.addArray(evt.cards2);
                                    });
                                    return cards.length;
                                },
                                content: function () {
                                    'step 0'
                                    event.forceDie = true;
                                    var recover = 0, lose = 0, players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].hp < players[i].maxHp) {
                                            if (get.attitude(player, players[i]) > 0) {
                                                if (players[i].hp < 2) {
                                                    lose--;
                                                    recover += 0.5;
                                                }
                                                lose--;
                                                recover++;
                                            }
                                            else if (get.attitude(player, players[i]) < 0) {
                                                if (players[i].hp < 2) {
                                                    lose++;
                                                    recover -= 0.5;
                                                }
                                                lose++;
                                                recover--;
                                            }
                                        }
                                        else {
                                            if (get.attitude(player, players[i]) > 0) {
                                                lose--;
                                            }
                                            else if (get.attitude(player, players[i]) < 0) {
                                                lose++;
                                            }
                                        }
                                    }
                                    player.chooseControl('失去体力', '回复体力', 'cancel2').set('ai', function () {
                                        if (lose > recover && lose > 0) return 0;
                                        if (lose < recover && recover > 0) return 1;
                                        return 2;
                                    }).set('prompt', get.prompt2('hpp_qinyin'));
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        player.logSkill('hpp_qinyin');
                                        event.bool = (result.control == '回复体力');
                                        if (event.bool) game.playAudio('skill', 'qinyin1');
                                        else game.playAudio('skill', 'qinyin2');
                                        event.num = 0;
                                        event.players = game.filterPlayer();
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (event.num < event.players.length) {
                                        var target = event.players[event.num];
                                        if (event.bool) target.recover();
                                        else target.loseHp();
                                        event.num++;
                                        event.redo();
                                    }
                                },
                                ai: { expose: 0.2 },
                            },
                            hpp_yeyan: {
                                audio: 'yeyan',
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt2('hpp_yeyan'), lib.filter.notMe).set('ai', function (target) {
                                        if (get.attitude(player, target) < 0 && target.hp == 1) return 2;
                                        if (get.attitude(player, target) < 0) return 1;
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('hpp_yeyan', result.targets[0]);
                                        result.targets[0].damage('fire');
                                    }
                                    else event.finish();
                                },
                            },

                            // 神诸葛亮
                            hpp_qixing: {
                                unique: true,
                                audio: 'qixing',
                                trigger: { global: 'phaseBefore', player: 'enterGame' },
                                filter: function (event, player) {
                                    return event.name != 'phase' || game.phaseNumber == 0;
                                },
                                forced: true,
                                content: function () {
                                    player.markAuto('hpp_qixing', game.cardsGotoSpecial(get.cards(7)).cards);
                                },
                                mark: true,
                                intro: {
                                    onunmark: function (storage, player) {
                                        if (storage && storage.length) {
                                            player.$throw(storage, 1000);
                                            game.cardsDiscard(storage);
                                            game.log(storage, '被置入了弃牌堆');
                                            storage.length = 0;
                                        }
                                    },
                                    mark: function (dialog, content, player) {
                                        if (content && content.length) {
                                            if (player == game.me || player.isUnderControl()) {
                                                dialog.addAuto(content);
                                            }
                                            else {
                                                return '共有' + get.cnNumber(content.length) + '张星';
                                            }
                                        }
                                    },
                                    content: function (content, player) {
                                        if (content && content.length) {
                                            if (player == game.me || player.isUnderControl()) {
                                                return get.translation(content);
                                            }
                                            return '共有' + get.cnNumber(content.length) + '张星';
                                        }
                                    }
                                },
                                group: 'hpp_qixing_draw',
                                subSkill: {
                                    draw: {
                                        trigger: { player: 'phaseDrawEnd' },
                                        filter: function (event, player) {
                                            return player.storage.hpp_qixing && player.storage.hpp_qixing.length;
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            var cards = player.getStorage('hpp_qixing');
                                            if (!cards.length || !player.countCards('h')) {
                                                event.finish();
                                                return;
                                            }
                                            var next = player.chooseToMove('七星：是否交换“星”和手牌？');
                                            next.set('list', [
                                                [get.translation(player) + '（你）的星', cards],
                                                ['手牌区', player.getCards('h')],
                                            ]);
                                            next.set('filterMove', function (from, to) {
                                                return typeof to != 'number';
                                            });
                                            next.set('processAI', function (list) {
                                                var player = _status.event.player, cards = list[0][1].concat(list[1][1]).sort(function (a, b) {
                                                    return get.value(a) - get.value(b);
                                                }), cards2 = cards.splice(0, player.storage.hpp_qixing.length);
                                                return [cards2, cards];
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                var pushs = result.moved[0], gains = result.moved[1];
                                                pushs.removeArray(player.storage.hpp_qixing);
                                                gains.removeArray(player.getCards('h'));
                                                if (!pushs.length || pushs.length != gains.length) return;
                                                player.logSkill('hpp_qixing');
                                                player.lose(pushs, ui.special, 'toStorage');
                                                game.log(player, '将', pushs, '作为“星”置于武将牌上');
                                                player.gain(gains, 'gain2', 'log', 'fromStorage');
                                                player.storage.hpp_qixing.addArray(pushs);
                                                player.storage.hpp_qixing.removeArray(gains);
                                                player.markSkill('hpp_qixing');
                                            }
                                        }
                                    },
                                },
                            },
                            hpp_kuangfeng: {
                                audio: 'kuangfeng',
                                trigger: { player: 'phaseUseEnd' },
                                filter: function (event, player) {
                                    return player.storage.hpp_qixing && player.storage.hpp_qixing.length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget([1, Math.min(game.players.length, player.getStorage('hpp_qixing').length)], get.prompt2('hpp_kuangfeng')).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var eff = get.damageEffect(target, player, player);
                                        if (target.hp == 1 || !ui.selected.targets.length) return eff;
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        event.targets = result.targets.sortBySeat();
                                        player.chooseButton(['请选择要移去的“星”', player.getStorage('hpp_qixing')], true, result.targets.length).set('ai', function (button) {
                                            return -get.value(button.link);
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    var cards = result.links;
                                    player.logSkill('hpp_kuangfeng', targets);
                                    player.$throw(cards, 2000);
                                    player.unmarkAuto('hpp_qixing', cards);
                                    game.cardsDiscard(cards);
                                    for (var i of targets) i.damage();
                                },
                            },
                            hpp_dawu: {
                                audio: 'dawu',
                                trigger: { player: 'phaseJieshuBegin' },
                                filter: function (event, player) {
                                    return player.storage.hpp_qixing && player.storage.hpp_qixing.length;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseButton([get.prompt('hpp_dawu'), player.getStorage('hpp_qixing')]).set('ai', function (button) {
                                        return 1 / Math.max(0.01, get.value(button.link));
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var cards = result.links;
                                        player.logSkill('hpp_dawu');
                                        player.$throw(cards, 2000);
                                        player.unmarkAuto('hpp_qixing', cards);
                                        game.cardsDiscard(cards);
                                        player.addTempSkill('hpp_dawu_damage', { player: 'phaseBegin' });
                                    }
                                },
                                subSkill: {
                                    damage: {
                                        charlotte: true,
                                        mark: true,
                                        intro: { content: '受到的非属性伤害-1' },
                                        trigger: { player: 'damageBegin3' },
                                        filter: function (event) {
                                            return event.num > 0 && !event.nature;
                                        },
                                        forced: true,
                                        content: function () {
                                            trigger.num--;
                                        },
                                        ai: {
                                            effect: {
                                                target: function (card, player, target) {
                                                    if (player.hasSkillTag('jueqing', false, target)) return;
                                                    if (get.nature(card)) return;
                                                    var num = get.tag(card, 'damage');
                                                    if (num) {
                                                        if (num > 1) return 0.5;
                                                        return 0;
                                                    }
                                                },
                                            },
                                        },
                                    },
                                },
                            },

                            // 嫦娥
                            hpp_daoyao: {
                                audio: 'hppdaoyao',
                                enable: 'phaseUse',
                                filter: function (card, player) {
                                    return player.countDiscardableCards(player, 'h');
                                },
                                filterCard: lib.filter.cardDiscardable,
                                check: function (card) {
                                    return 6 - get.value(card);
                                },
                                usable: 1,
                                content: function () {
                                    var card = get.cardPile2(card => card.name == 'tao');
                                    if (card) player.gain(card, 'gain2');
                                    player.draw(2 + (card ? 0 : 1));
                                },
                                ai: {
                                    order: 9,
                                    result: { player: 1 },
                                },
                            },
                            hpp_benyue: {
                                audio: 'hppbenyue',
                                unique: true,
                                derivation: 'hpp_guanghan',
                                trigger: {
                                    global: ['loseAsyncAfter'],
                                    player: ['recoverEnd', 'gainAfter'],
                                },
                                filter: function (event, player) {
                                    if (event.name == 'gain' || event.name == 'loseAsync') {
                                        if (!event.getg(player).some(card => card.name == 'tao')) return false;
                                        return player.countCards('h', { name: 'tao' }) >= 3;
                                    }
                                    else {
                                        var num = 0;
                                        game.getAllGlobalHistory('changeHp', evt => {
                                            if (evt.getParent().name == 'recover' && evt.player == player) num += evt.num;
                                        });
                                        return num >= 3;
                                    }
                                },
                                forced: true,
                                juexingji: true,
                                skillAnimation: true,
                                animationColor: 'silver',
                                content: function () {
                                    player.awakenSkill('hpp_benyue');
                                    if (player.maxHp < 15) player.gainMaxHp(15 - player.maxHp);
                                    player.addSkillLog('hpp_guanghan');
                                },
                            },
                            hpp_guanghan: {
                                audio: 'hppguanghan',
                                trigger: { global: 'damageEnd' },
                                filter: function (event, player) {
                                    if (!event.player.isIn()) return false;
                                    return lib.skill.hpp_guanghan.logTarget(event, player).length;
                                },
                                logTarget: function (event, player) {
                                    var target = event.player;
                                    return game.filterPlayer(current => {
                                        if (current != target.getPrevious() && current != target.getNext()) return false;
                                        return current != player;
                                    });
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    event.targets = lib.skill.hpp_guanghan.logTarget(trigger, player).sortBySeat();
                                    'step 1'
                                    var target = event.targets.shift();
                                    event.target = target;
                                    target.chooseToDiscard('h', '广寒：弃置一张手牌，或失去1点体力').set('ai', card => {
                                        var player = _status.event.player;
                                        if (card.name == 'tao' || card.name == 'jiu') return 0;
                                        if (player.hasSkill('zhaxiang') && player.hp > 1) return 0;
                                        return 6 - get.value(card);
                                    });
                                    'step 2'
                                    if (!result.bool) target.loseHp(trigger.num);
                                    if (event.targets.length) event.goto(1);
                                },
                                ai: { threaten: 5 },
                            },

                            // 大懒猫
                            hpp_zuzhou: {
                                trigger: { global: 'phaseBegin' },
                                check: function (event, player) {
                                    if (player.hp + player.countCards('hs', { name: 'tao' }) <= 1) return false;
                                    if (event.player == player) return player.countCards('h', { name: ['sha', 'shan'] }) >= 3 && player.countCards('h', { name: 'sha' }) < 3 && player.countCards('h', { name: 'shan' }) < 3;
                                    return get.attitude(player, event.player) < 0 && event.player.countCards('h', { name: 'sha' }) > 2;
                                },
                                logTarget: 'player',
                                content: function () {
                                    'step 0'
                                    player.loseHp();
                                    'step 1'
                                    player.chooseControl().set('choiceList', [
                                        '令' + get.translation(trigger.player) + '本回合手牌中所有的【杀】视为【闪】',
                                        '令' + get.translation(trigger.player) + '本回合手牌中所有的【闪】视为【杀】',
                                    ]).set('ai', function () {
                                        var player = _status.event.player;
                                        return player == _status.event.target ? 1 : 0;
                                    }).set('target', trigger.player);
                                    'step 2'
                                    trigger.player.addTempSkill('hpp_zuzhou2');
                                    trigger.player.storage.hpp_zuzhou2 = result.index;
                                },
                                ai: { expose: 0.2 },
                            },
                            hpp_zuzhou2: {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    cardname: function (card, player, name) {
                                        var list = ['sha', 'shan'];
                                        if (player.storage.hpp_zuzhou2 == 1) list.reverse();
                                        if (card.name == list[0]) return list[1];
                                    },
                                },
                            },
                            hpp_moyu: {
                                trigger: { player: 'phaseUseBegin' },
                                check: function (event, player) {
                                    return player.hp + player.countCards('hs', { name: 'tao' }) <= 2;
                                },
                                content: function () {
                                    player.addTempSkill('hpp_moyu2');
                                    player.addMark('hpp_moyu2', 2, false);
                                    player.addTempSkill('hpp_moyu3', { player: 'hpp_moyu3After' });
                                    player.addMark('hpp_moyu3', 2, false);
                                },
                            },
                            hpp_moyu2: {
                                group: 'zishou2',
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('hpp_moyu2');
                                    },
                                },
                                trigger: { player: 'phaseEnd' },
                                filter: function (event, player) {
                                    return player.isDamaged();
                                },
                                forced: true,
                                content: function () {
                                    player.recover();
                                },
                            },
                            hpp_moyu3: {
                                charlotte: true,
                                onremove: true,
                                trigger: { player: 'phaseBegin' },
                                firstDo: true,
                                direct: true,
                                content: function () {
                                    player.addTempSkill('hpp_moyu4');
                                    player.addMark('hpp_moyu4', 2, false);
                                },
                            },
                            hpp_moyu4: {
                                charlotte: true,
                                onremove: true,
                                trigger: { player: 'phaseDrawBegin2' },
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                forced: true,
                                content: function () {
                                    trigger.num += player.countMark('hpp_moyu4');
                                },
                            },
                            hpp_sanlian: {
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h', function (card) {
                                        return lib.skill.hpp_sanlian.filterCard(card, player);
                                    });
                                },
                                filterCard: function (card, player) {
                                    if (ui.selected.cards.length) {
                                        var cardx = ui.selected.cards[0];
                                        return get.type2(card) == get.type2(cardx);
                                    }
                                    return player.countCards('h', function (cardx) {
                                        return get.type2(card) == get.type2(cardx);
                                    }) >= 3;
                                },
                                selectCard: 3,
                                check: function (card) {
                                    return 6 - get.value(card);
                                },
                                complexCard: true,
                                content: function () {
                                    'step 0'
                                    player.draw(player.getDamagedHp());
                                    player.addTempSkill('hpp_sanlian_hanbing');
                                    'step 1'
                                    var card = cards[0];
                                    for (var cardx of cards) {
                                        if (get.name(cardx, player) != get.name(card, player)) {
                                            player.removeSkill('hpp_sanlian_hanbing');
                                            break;
                                        }
                                    }
                                    'step 2'
                                    for (var i of game.filterPlayer().sortBySeat(player)) {
                                        player.line(i);
                                        i.damage();
                                    }
                                    'step 3'
                                    if (player.hasSkill('hpp_sanlian_hanbing')) {
                                        player.removeSkill('hpp_sanlian_hanbing');
                                    }
                                    // for (var i of game.filterPlayer().sortBySeat(player)) {
                                    //     if (i == player) continue;
                                    //     player.line(i);
                                    //     player.discardPlayerCard(i, 'he', true);
                                    // }
                                },
                                subSkill: {
                                    hanbing: {
                                        trigger: { source: 'damageBegin2' },
                                        forced: true,
                                        filter: function (event) {
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            if (trigger.player == player) {
                                                event.finish();
                                            }
                                            else {
                                                if (trigger.player.countDiscardableCards(player, 'he')) {
                                                    player.line(trigger.player);
                                                    player.discardPlayerCard('he', trigger.player, true);
                                                }
                                            }
                                        }
                                    }
                                },
                                ai: {
                                    order: 10,
                                    result: {
                                        player: function (player) {
                                            if (player.hp + player.countCards('hs', { name: ['tao', 'jiu'] }) < 2) return -1;
                                            return game.countPlayer(function (current) {
                                                return get.sgn(get.damageEffect(current, player, player));
                                            });
                                        },
                                    },
                                },
                            },

                            // 李白
                            hpp_shixian: {
                                audio: 'hppshixian',
                                derivation: ['hpp_shixian_qiangjinjiu', 'hpp_shixian_jingyesi', 'hpp_shixian_xiakexing', 'hpp_shixian_xinglunan'],
                                trigger: { player: 'phaseBegin' },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    if (player.additionalSkills.hpp_shixian) player.removeAdditionalSkill('hpp_shixian');
                                    var cards = get.cards(4);
                                    for (var i = cards.length - 1; i--; i >= 0) {
                                        ui.cardPile.insertBefore(cards[i], ui.cardPile.firstChild);
                                    }
                                    game.updateRoundNumber();
                                    event.cards = cards;
                                    player.showCards(cards, get.translation(player) + '发动了【诗仙】');
                                    'step 1'
                                    var map = {
                                        'heart': 'hpp_shixian_qiangjinjiu',
                                        'diamond': 'hpp_shixian_jingyesi',
                                        'spade': 'hpp_shixian_xiakexing',
                                        'club': 'hpp_shixian_xinglunan'
                                    }, list = [];
                                    for (var i in map) {
                                        if (cards.some(card => get.suit(card, player) == i)) list.push(map[i]);
                                    }
                                    if (list.length) player.addAdditionalSkill('hpp_shixian', list);
                                    event.cards = cards.filter(function (card) {
                                        return cards.some(function (cardx) {
                                            if (cardx == card) return false;
                                            return get.suit(card, player) == get.suit(cardx, player);
                                        });
                                    });
                                    if (event.cards.length) player.chooseBool('诗仙：是否获得' + get.translation(event.cards) + '？');
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) player.gain(cards, 'gain2');
                                },
                                subSkill: {
                                    //将进酒
                                    qiangjinjiu: {
                                        audio: 'hppqiangjinjiu',
                                        nobracket: true,
                                        trigger: { global: 'phaseBegin' },
                                        filter: function (event, player) {
                                            if (event.player == player) return false;
                                            return player.countCards('h') && event.player.countCards('he');
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseToDiscard(get.prompt2('hpp_shixian_qiangjinjiu', trigger.player)).set('ai', function (card) {
                                                var player = _status.event.player;
                                                var target = _status.event.target;
                                                if (get.attitude(player, target) > 0) return 0;
                                                return 6 - get.value(card);
                                            }).set('target', trigger.player).logSkill = ['hpp_shixian_qiangjinjiu', trigger.player];
                                            'step 1'
                                            if (result.bool) {
                                                if (!trigger.player.countCards('e')) event._result = { bool: true, index: 1 };
                                                else player.chooseControl().set('choiceList', [
                                                    '弃置' + get.translation(trigger.player) + '装备区里的所有装备牌',
                                                    '获得' + get.translation(trigger.player) + '手牌中的所有【酒】（若其手牌中没有【酒】则改为获得其一张牌）',
                                                ]).set('ai', () => 0);
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (result.index == 0) {
                                                trigger.player.discard(trigger.player.getCards('e')).discarder = player;
                                                var card = get.cardPile2(card => card.name == 'jiu');
                                                if (card) trigger.player.gain(card, 'gain2');
                                            }
                                            else {
                                                if (trigger.player.countCards('h', { name: 'jiu' })) player.gain(trigger.player.getCards('h', { name: 'jiu' }), trigger.player, 'give');
                                                else player.gainPlayerCard(trigger.player, 'he', true);
                                            }
                                        },
                                    },
                                    //侠客行
                                    xiakexing: {
                                        audio: 'hppxiakexing',
                                        nobracket: true,
                                        trigger: { player: 'useCard', source: 'damageSource' },
                                        filter: function (event, player) {
                                            if (event.name == 'useCard') return get.translation(event.card.name).indexOf('剑') != -1 && player.hasUseTarget(get.autoViewAs({ name: 'wanjian' }, []));
                                            return event.card && event.card.name == 'sha' && player.getEquip(1) && event.player.isIn() && player.canCompare(event.player);
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            if (trigger.name == 'useCard') {
                                                player.chooseUseTarget(true, { name: 'wanjian' }, []);
                                                event.finish();
                                            }
                                            else player.chooseBool('是否和' + get.translation(trigger.player) + '拼点？', '若你赢，其减1点体力上限；若你没赢，弃置你装备区里的武器牌').set('choice', player.hasCard(function (card) {
                                                return get.value(card) <= 5 || get.number(card) > 10;
                                            }) && (get.attitude(player, trigger.player) <= 0 || trigger.player.countCards('h') >= 4));
                                            'step 1'
                                            if (result.bool) {
                                                player.line(trigger.player);
                                                player.chooseToCompare(trigger.player);
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (result.bool) trigger.player.loseMaxHp();
                                            else {
                                                var card = player.getEquip(1);
                                                if (card) player.discard(card);
                                            }
                                        },
                                    },
                                    //静夜思
                                    jingyesi: {
                                        audio: 'hppjingyesi',
                                        nobracket: true,
                                        trigger: { player: ['phaseUseEnd', 'phaseDiscardEnd'] },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            var card = get[trigger.name == 'phaseDiscard' ? 'bottomCards' : 'cards']()[0];
                                            if (trigger.name == 'phaseDiscard') {
                                                player.logSkill('hpp_shixian_jingyesi');
                                                player.gain(card, 'gain2');
                                                event.finish();
                                            }
                                            else {
                                                player.chooseControl('ok').set('dialog', ['牌堆顶', [card]]);
                                                player.chooseUseTarget(card, false).logSkill = 'hpp_shixian_jingyesi';
                                            }
                                        },
                                    },
                                    //行路难
                                    xinglunan: {
                                        audio: 'hppxinglunan',
                                        nobracket: true,
                                        trigger: { global: 'useCardAfter' },
                                        filter: function (event, player) {
                                            if (player == _status.currentPhase || event.card.name != 'sha' || event.player == player) return false;
                                            return event.targets && event.targets.contains(player);
                                        },
                                        forced: true,
                                        locked: false,
                                        content: function () {
                                            player.addTempSkill('hpp_shixian_xingluBuff', { player: 'phaseBegin' });
                                            player.addMark('hpp_shixian_xingluBuff', 1, false);
                                        },
                                    },
                                    xingluBuff: {
                                        nobracket: true,
                                        charlotte: true,
                                        onremove: true,
                                        intro: { content: '其他角色计算与你的距离+#' },
                                        mod: {
                                            globalTo: function (from, to, distance) {
                                                return distance + to.countMark('hpp_shixian_xingluBuff');
                                            },
                                        },
                                    },
                                },
                            },

                            // 孙悟空
                            hpp_72bian: {
                                onChooseToUse: function (event) {
                                    if (event.type == 'phase' && !game.online && !event['hpp_72bian_type']) {
                                        var evtx = event.getParent('phaseUse');
                                        var list = ['basic', 'trick', 'equip'], player = event.player;
                                        player.getHistory('lose', function (evt) {
                                            var evt2 = evt.getParent();
                                            if (evt2.name == 'useSkill' && evt2.skill == 'hpp_72bian') list.remove(get.type2(evt.cards2[0]));
                                        });
                                        event.set('hpp_72bian_type', list);
                                    }
                                },
                                nobracket: true,
                                audio: 'hpp72bian',
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('he', function (card) {
                                        return event['hpp_72bian_type'].includes(get.type2(card));
                                    });
                                },
                                filterCard: function (card, player) {
                                    return _status.event['hpp_72bian_type'].includes(get.type2(card));
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (player.hasSkill('hpp_72bian_' + get.type2(card))) return -1;
                                    return 5 - get.value(card);
                                },
                                position: 'he',
                                prepare: function (cards, player) {
                                    player.$throw(cards, 1000);
                                    game.log(player, '将', cards, '置入了弃牌堆');
                                },
                                discard: false,
                                loseTo: 'discardPile',
                                visible: true,
                                content: function () {
                                    var list = ['basic', 'trick', 'equip'];
                                    var type = list[(list.indexOf(get.type2(cards[0])) + 1) % 3];
                                    var card = get.cardPile2(function (card) {
                                        return get.type2(card) == type;
                                    });
                                    if (card) {
                                        player.gain(card, 'draw');
                                        game.log(player, '获得了一张', '#g' + get.translation(type) + '牌');
                                    }
                                    else {
                                        player.log('无牌可得了吗？');
                                        game.log('但是牌堆中已经没有', '#g' + get.translation(type) + '牌', '了！');
                                        player.addTempSkill('hpp_72bian_' + get.type2(cards[0]), 'washCard');
                                    }
                                },
                                ai: {
                                    order: 1,
                                    result: { player: 1 },
                                },
                                subSkill: { basic: { charlotte: true }, trick: { charlotte: true }, equip: { charlotte: true } },
                            },
                            hpp_ruyi: {
                                locked: true,
                                derivation: 'hpp_ruyijingubang',
                                group: ['hpp_ruyijingubang', 'hpp_ruyijingubang2'],
                                ai: {
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player == target && get.type(card) == 'equip' && get.subtype(card) == 'equip1') {
                                                if (target.getEquip(1)) return;
                                                return 0;
                                            }
                                        },
                                    },
                                },
                            },
                            hpp_ruyijingubang: {
                                init: function (player) {
                                    if (!player.storage.hpp_ruyijingubang) player.storage.hpp_ruyijingubang = 1;
                                },
                                onremove: true,
                                mod: {
                                    attackRange: function (player, num) {
                                        if ((player.getEquip(1) && !player.getEquip('hpp_ruyijingubang')) || player.isDisabled(1)) return;
                                        if (_status.hpp_ruyiCheck) return num + _status.hpp_ruyiCheck - 1;
                                        return num + player.storage.hpp_ruyijingubang - 1;
                                    },
                                },
                                equipSkill: true,
                                trigger: { player: 'phaseBegin' },
                                filter: function (event, player) {
                                    if (player.isDisabled(1)) return false;
                                    return !player.getEquip(1) || player.getEquip('hpp_ruyijingubang');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var card = player.getEquip('hpp_ruyijingubang');
                                    player.chooseControl('1', '2', '3', '4', 'cancel2').set('prompt', '是否调整' + (card ? get.translation(card) : '如意金箍棒') + '的攻击范围？').set('choiceList', [
                                        '将' + (card ? get.translation(card) : '如意金箍棒') + '的攻击范围调整为1 → 你使用【杀】不计入次数限制',
                                        '将' + (card ? get.translation(card) : '如意金箍棒') + '的攻击范围调整为2 → 你于回合内使用的第一张【杀】造成的伤害+1',
                                        '将' + (card ? get.translation(card) : '如意金箍棒') + '的攻击范围调整为3 → 你使用【杀】无法被响应',
                                        '将' + (card ? get.translation(card) : '如意金箍棒') + '的攻击范围调整为4 → 你使用【杀】可以额外指定一个目标'
                                    ]).set('ai', function () {
                                        var player = _status.event.player;
                                        if (!player.hasSha()) return '4';
                                        for (var i = 0; i <= 3; i++) {
                                            _status.hpp_ruyiCheck = [2, 1, 3, 4][i];
                                            if (game.hasPlayer(function (current) {
                                                return player.canUse({ name: 'sha' }, current) && get.effect(current, { name: 'sha' }, player, player) > 0;
                                            })) {
                                                delete _status.hpp_ruyiCheck;
                                                return i + 1;
                                            }
                                        }
                                        if (_status.hpp_ruyiCheck) delete _status.hpp_ruyiCheck;
                                        return '4';
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        var num = parseInt(result.control), card = player.getEquip('hpp_ruyijingubang');
                                        player.logSkill('hpp_ruyijingubang');
                                        player.storage.hpp_ruyijingubang = num;
                                        player.popup(num);
                                        game.log(player, '将', '#g' + (card ? get.translation(card) : '如意金箍棒'), '的攻击范围调整为', '#y' + num);
                                    }
                                },
                            },
                            hpp_ruyijingubang2: {
                                mod: {
                                    selectTarget: function (card, player, range) {
                                        if ((player.getEquip(1) && !player.getEquip('hpp_ruyijingubang')) || player.isDisabled(1)) return;
                                        var num = player.storage.hpp_ruyijingubang;
                                        if (card.name == 'sha' && range[1] != -1 && num == 4) range[1]++;
                                    },
                                },
                                equipSkill: true,
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    var num = player.storage.hpp_ruyijingubang;
                                    if (event.card.name != 'sha' || player.isDisabled(1)) return false;
                                    if (player.getEquip(1) && !player.getEquip('hpp_ruyijingubang')) return false;
                                    if (num == 2) return player.getHistory('useCard', function (evt) {
                                        return evt.card.name == 'sha';
                                    }).indexOf(event) == 0 && _status.currentPhase && player == _status.currentPhase;
                                    return num != 4;
                                },
                                forced: true,
                                locked: false,
                                content: function () {
                                    var num = player.storage.hpp_ruyijingubang;
                                    switch (num) {
                                        case 1:
                                            trigger.addCount = false;
                                            if (player.stat[player.stat.length - 1].card.sha > 0) player.stat[player.stat.length - 1].card.sha--;
                                            game.log(trigger.card, '不计入次数');
                                            break;
                                        case 2:
                                            trigger.baseDamage++;
                                            game.log(trigger.card, '造成的伤害+1');
                                            break;
                                        case 3:
                                            trigger.directHit.addArray(game.players);
                                            game.log(trigger.card, '不可被响应');
                                            break;
                                    }
                                },
                                ai: {
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (player.isDisabled(1) || (player.getEquip(1) && !player.getEquip('hpp_ruyijingubang'))) return false;
                                        return arg.card.name == 'sha' && ((_status.hpp_ruyiCheck && _status.hpp_ruyiCheck == 3) || player.storage.hpp_ruyijingubang == 3);
                                    },
                                },
                            },
                            hpp_qitian: {
                                unique: true,
                                derivation: ['hpp_huoyan', 'hpp_jindouyun'],
                                trigger: { player: ['changeHp', 'enterGame'], global: 'phaseBefore' },
                                filter: function (event, player) {
                                    if (player.hp != 1) return false;
                                    return event.name != 'phase' || game.phaseNumber == 0;
                                },
                                juexingji: true,
                                forced: true,
                                skillAnimation: true,
                                animationColor: 'fire',
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('hpp_qitian');
                                    player.loseMaxHp();
                                    'step 1'
                                    player.addSkillLog('hpp_huoyan');
                                    player.addSkillLog('hpp_jindouyun');
                                },
                            },
                            hpp_huoyan: {
                                locked: true,
                                ai: {
                                    viewHandcard: true,
                                    skillTagFilter: function (player, arg, target) {
                                        return target != player && !_status.auto;
                                    },
                                },
                            },
                            hpp_jindouyun: {
                                nobracket: true,
                                locked: true,
                                mod: {
                                    globalFrom: function (from, to, distance) {
                                        return distance - 1;
                                    },
                                    globalTo: function (from, to, distance) {
                                        return distance + 1;
                                    },
                                },
                            },
                        },
                        dynamicTranslate: {
                            hpp_zhongjian: function (player) {
                                return '出牌阶段限' + (player.hasSkill('recaishi2') ? '两' : '一') + '次，你可以选择一名本回合内未选择过的角色。你令其获得一项效果：1.其下次造成伤害后弃置两张牌，然后你摸一张牌。2.其下次受到伤害后摸两张牌，然后你摸一张牌。';
                            },
                            hpp_jiaozhao: function (player) {
                                return [lib.translate.hpp_jiaozhao_info, lib.translate.hpp_jiaozhao_2_info, lib.translate.hpp_jiaozhao_3_info][player.countMark('hpp_danxin')];
                            },
                            hpp_pingting: function (player) {
                                return '出牌阶段开始时，你可以选择以下选项中的至多' + get.cnNumber(2 + player.hasSkill('hpp_shuangshu_pingting') ? 1 : 0) + '项：⒈本阶段使用的第一张牌无距离限制。⒉本阶段使用第二张牌指定目标后获得此牌对应的所有实体牌。⒊本阶段使用的第三张牌结算完毕后摸两张牌。⒋本阶段使用的第四张牌额外结算一次。';
                            },
                            hpp_yizheng: function (player) {
                                return '出牌阶段结束时，你可以选择以下选项中的至多' + get.cnNumber(1 + player.hasSkill('hpp_shuangshu_yizheng') ? 1 : 0) + '项：⒈移动场上的一张武器牌。⒉移动场上的一张防具牌。⒊移动场上的一张坐骑牌。然后若你于本次技能结算中移动了：一张牌，你回复1点体力；两张牌，直到你的下回合开始，当你失去一张牌时，摸一张牌。';
                            },
                            hpp_manwang: function (player) {
                                var num = 4 - player.countMark('spmanwang');
                                var str = '出牌阶段，你可以弃置任意张牌。然后你依次执行以下选项中的前X项：';
                                var list = [
                                    '⒈获得〖叛侵〗。',
                                    '⒉摸一张牌。',
                                    '⒊回复1点体力。',
                                    '⒋摸两张牌并失去〖叛侵〗。',
                                ];
                                for (var i = 0; i < 4; i++) {
                                    if (i == num) {
                                        str += '<span style="text-decoration: line-through;">';
                                    }
                                    str += list[i];
                                }
                                if (num < 4) str += '</span>';
                                return str + '然后你获得〖祸首〗直到你的下个回合开始。';
                            },
                            hpp_guixiu: function (player) {
                                return lib.translate[(player.storage.hpp_guixiu ? 'hpp_guixiux' : 'hpp_guixiu') + '_info'];
                            },
                        },
                        characterTitle: {
                            // g绿 b蓝 r红 p粉
                            // B
                            hpp_beimihu: '#b捞德一评级:3.5',
                            hpp_bulianshi: '#b捞德一评级:3.7',
                            hpp_buzhi: '#b捞德一评级:3.7',
                            // C
                            hpp_caifuren: '#b捞德一评级:3.7',
                            hpp_caiwenji: '#b捞德一评级:3.8',
                            hpp_caoang: '#b捞德一评级:3.7',
                            hpp_caocao: '#b捞德一评级:3.5',
                            hpp_caochong: '#g捞德一评级:2.7',
                            hpp_caohua: '#b捞德一评级:3.7',
                            hpp_caojie: '#b捞德一评级:3.8',
                            hpp_caomao: '#b捞德一评级:3.5',
                            hpp_caopi: '#g捞德一评级:2.9',
                            hpp_caoren: '#g捞德一评级:2.8',
                            hpp_caorui: '#g捞德一评级:2.9',
                            hpp_caoxing: '#b捞德一评级:3.6',
                            hpp_caoxiu: '#b捞德一评级:3.7',
                            hpp_caoying: '#b捞德一评级:3.8',
                            hpp_caozhang: '#b捞德一评级:3.7',
                            hpp_caozhen: '#g捞德一评级:2.8',
                            hpp_caozhi: '#r捞德一评级:4.2',
                            hpp_chendao: '#b捞德一评级:3.4',
                            hpp_chengong: '#b捞德一评级:3.5',
                            hpp_chengpu: '#b捞德一评级:3.4',
                            hpp_chenqun: '#g捞德一评级:2.9',
                            hpp_chunyuqiong: '#b捞德一评级:3.4',
                            // D
                            hpp_daqiao: '#b捞德一评级:3.5',
                            hpp_dengai: '#b捞德一评级:3.4',
                            hpp_dianwei: '#b捞德一评级:3.1',
                            hpp_diaochan: '#b捞德一评级:3.7',
                            hpp_dingfeng: '#b捞德一评级:3.7',
                            hpp_dongbai: '#b捞德一评级:3.5',
                            hpp_dongyun: '#g捞德一评级:2.6',
                            hpp_dongzhuo: '#g捞德一评级:2.7',
                            hpp_dufuren: '#b捞德一评级:3.9',
                            // F
                            hpp_fazheng: '#g捞德一评级:2.5',
                            hpp_fuhuanghou: '#b捞德一评级:3.8',
                            // G
                            hpp_ganfuren: '#r捞德一评级:4.4',
                            hpp_ganning: '#b捞德一评级:3.8',
                            hpp_gaoshun: '#b捞德一评级:3.6',
                            hpp_gongsunzan: '#b捞德一评级:3.6',
                            hpp_guanping: '#g捞德一评级:2.7',
                            hpp_guanyinping: '#b捞德一评级:3.2',
                            hpp_guanyu: '#r捞德一评级:4.4',
                            hpp_guohuai: '#b捞德一评级:3.7',
                            hpp_guohuanghou: '#b捞德一评级:3.8',
                            hpp_guojia: '捞德一评级:1.2',
                            hpp_guotupangji: '#b捞德一评级:3.5',
                            // H
                            hpp_handang: '#g捞德一评级:2.5',
                            hpp_haozhao: '#g捞德一评级:2.8',
                            hpp_hetaihou: '#g捞德一评级:2.4',
                            hpp_huaman: '#r捞德一评级:4.5',
                            hpp_huanggai: '#b捞德一评级:3.5',
                            hpp_huangyueying: '#b捞德一评级:3.5',
                            hpp_huangzhong: '#g捞德一评级:2.9',
                            hpp_huatuo: '#b捞德一评级:3.5',
                            hpp_huaxiong: '#g捞德一评级:2.9',
                            // J
                            hpp_jiangwei: '#b捞德一评级:3.5',
                            hpp_jianyong: '#b捞德一评级:3.6',
                            hpp_jiaxu: '#g捞德一评级:2.4',
                            hpp_jushou: '#b捞德一评级:3.6',
                            // K
                            hpp_kuailiangkuaiyue: '#b捞德一评级:3.7',
                            // L
                            hpp_liangxing: '#b捞德一评级:3.5',
                            hpp_liaohua: '#b捞德一评级:3.5',
                            hpp_lidian: '#b捞德一评级:3.5',
                            hpp_lijue: '#b捞德一评级:3.7',
                            hpp_lingtong: '#b捞德一评级:3.8',
                            hpp_liru: '#g捞德一评级:2.9',
                            hpp_liubei: '#b捞德一评级:3.7',
                            hpp_liubiao: '#b捞德一评级:3.5',
                            hpp_liuchen: '#b捞德一评级:3.5',
                            hpp_liufeng: '#b捞德一评级:3.5',
                            hpp_liushan: '#g捞德一评级:2.9',
                            hpp_liuxie: '#b捞德一评级:3.2',
                            hpp_liuyan: '#b捞德一评级:3.7',
                            hpp_liuzan: '#b捞德一评级:3.7',
                            hpp_liuzhang: '#b捞德一评级:3.7',
                            hpp_liyan: '#b捞德一评级:3.3',
                            hpp_liyong: '#b捞德一评级:3.7',
                            hpp_luji: '#g捞德一评级:2.8',
                            hpp_lukang: '#b捞德一评级"3.9',
                            hpp_lusu: '#g捞德一评级:2.4',
                            hpp_luxun: '捞德一评级:1.4',
                            hpp_luyusheng: '#r捞德一评级:4.1',
                            hpp_lvbu: '#g捞德一评级:2.0',
                            hpp_lvkai: '#b捞德一评级:3.5',
                            hpp_lvlingqi: '#r捞德一评级:4.2',
                            hpp_lvmeng: '#g捞德一评级:2.6',
                            // M
                            hpp_machao: '#b捞德一评级:3.7',
                            hpp_madai: '#g捞德一评级:2.4',
                            hpp_masu: '#b捞德一评级:3.8',
                            hpp_mayunlu: '#b捞德一评级:3.5',
                            hpp_menghuo: '#g捞德一评级:2.7',
                            hpp_mifuren: '#b捞德一评级:3.4',
                            hpp_mizhu: '#b捞德一评级:3.5',
                            // P
                            hpp_panfeng: '#b捞德一评级:3.7',
                            hpp_pangde: '#b捞德一评级:3.5',
                            hpp_pangtong: '#g捞德一评级:2.4',
                            hpp_panjun: '#b捞德一评级:3.7',
                            // Q
                            hpp_qinmi: '#b捞德一评级:3.5',
                            hpp_quyi: '#b捞德一评级:3.7',
                            // S
                            hpp_shamoke: '#b捞德一评级:3.4',
                            hpp_simayi: '#r捞德一评级:4.0',
                            hpp_sunce: '#b捞德一评级:3.7',
                            hpp_sundeng: '#r捞德一评级:4.0',
                            hpp_sunhao: '#b捞德一评级:3.8',
                            hpp_sunjian: '#b捞德一评级:3.8',
                            hpp_sunliang: '#b捞德一评级:3.6',
                            hpp_sunluban: '#b捞德一评级:3.5',
                            hpp_sunluyu: '#b捞德一评级:3.7',
                            hpp_sunqian: '#b捞德一评级:3.5',
                            hpp_sunquan: '#b捞德一评级:3.8',
                            hpp_sunshangxiang: '#b捞德一评级:3.5',
                            // T
                            hpp_taishici: '#b捞德一评级:3.5',
                            hpp_tangji: '#b捞德一评级:3.8',
                            // W
                            hpp_wangji: '#b捞德一评级:3.4',
                            hpp_wangping: '#b捞德一评级:3.6',
                            hpp_wangrong: '#b捞德一评级:3.6',
                            hpp_wangyi: '#g捞德一评级:2.3',
                            hpp_wanniangongzhu: '#g捞德一评级:2.8',
                            hpp_weiyan: '#b捞德一评级:3.0',
                            hpp_wenqin: '#b捞德一评级:3.4',
                            hpp_wuguotai: '#g捞德一评级:2.9',
                            hpp_wuxian: '#b捞德一评级:3.0',
                            hpp_wuyi: '#g捞德一评级:2.8',
                            // X
                            hpp_xiahouba: '#b捞德一评级:3.3',
                            hpp_xiahoudun: '#g捞德一评级:2.4',
                            hpp_xiahoujie: '#b捞德一评级:3.7',
                            hpp_xiahoulingnv: '#b捞德一评级:3.7',
                            hpp_xiahoushi: '#g捞德一评级:2.7',
                            hpp_xiahouyuan: '#b捞德一评级:3.4',
                            hpp_xiaoqiao: '#g捞德一评级:2.6',
                            hpp_xinxianying: '#b捞德一评级:3.7',
                            hpp_xizhicai: '#b捞德一评级:3.8',
                            hpp_xuhuang: '#b捞德一评级:3.7',
                            hpp_xunyou: '#b捞德一评级:3.6',
                            hpp_xunyu: '#b捞德一评级:3.2',
                            hpp_xurong: '#b捞德一评级:3.0',
                            hpp_xusheng: '#g捞德一评级:2.7',
                            hpp_xushi: '#r捞德一评级:4.4',
                            hpp_xushu: '#g捞德一评级:2.6',
                            hpp_xuyou: '#b捞德一评级:3.3',
                            hpp_xuzhu: '#g捞德一评级:2.8',
                            // Y
                            hpp_yanfuren: '#b捞德一评级:3.9',
                            hpp_yangxiu: '#b捞德一评级:3.7',
                            hpp_yanjun: '#b捞德一评级:3.3',
                            hpp_yanliangwenchou: '#g捞德一评级:2.5',
                            hpp_yanyan: '#b捞德一评级:3.7',
                            hpp_yinfuren: '#b捞德一评级:3.8',
                            hpp_yuanshao: '#b捞德一评级:3.7',
                            hpp_yuanshu: '#g捞德一评级:2.4',
                            hpp_yuji: '#b捞德一评级:3.0',
                            hpp_yujin: '#b捞德一评级:2.8',
                            // Z
                            hpp_zhangbao: '#b捞德一评级:3.5',
                            hpp_zhangchunhua: '#g捞德一评级:2.5',
                            hpp_zhangfei: '#b捞德一评级:3.5',
                            hpp_zhanghe: '#b捞德一评级:3.4',
                            hpp_zhangji: '#b捞德一评级:3.0',
                            hpp_zhangjiao: '#b捞德一评级:3.8',
                            hpp_zhangliang: '#b捞德一评级:3.7',
                            hpp_zhangliao: '#b捞德一评级:3.6',
                            hpp_zhangsong: '#b捞德一评级:3.2',
                            hpp_zhangxingcai: '#b捞德一评级:3.1',
                            hpp_zhangxiu: '#b捞德一评级:3.0',
                            hpp_zhangyao: '#b捞德一评级:3.5',
                            hpp_zhangzhaozhanghong: '#g捞德一评级:2.8',
                            hpp_zhaoxiang: '#r捞德一评级:4.3',
                            hpp_zhaoyun: '#b捞德一评级:3.5',
                            hpp_zhenji: '#g捞德一评级:2.7',
                            hpp_zhonghui: '#b捞德一评级:3.7',
                            hpp_zhongyao: '#g捞德一评级:2.7',
                            hpp_zhoucang: '#b捞德一评级:3.5',
                            hpp_zhoufang: '#b捞德一评级:3.5',
                            hpp_zhoufei: '#g捞德一评级:2.7',
                            hpp_zhoutai: '#b捞德一评级:3.5',
                            hpp_zhouyu: '#b捞德一评级:3.2',
                            hpp_zhugeguo: '#b捞德一评级:3.6',
                            hpp_zhugejin: '#b捞德一评级:3.7',
                            hpp_zhugeke: '#b捞德一评级:3.8',
                            hpp_zhugeliang: '#b捞德一评级:3.2',
                            hpp_zhugezhan: '#g捞德一评级:2.8',
                            hpp_zhuhuan: '#b捞德一评级:3.5',
                            hpp_zhuran: '#b捞德一评级:3.7',
                            hpp_zhurong: '#b捞德一评级:3.8',
                            hpp_zhuzhi: '#b捞德一评级:3.6',
                            hpp_zumao: '#b捞德一评级:3.7',
                            hpp_zuoci: '#b捞德一评级:3.4',
                            // SP
                            hpp_sp_caiwenji: '#r捞德一评级:4.0',
                            hpp_sp_caoren: '#b捞德一评级:3.8',
                            hpp_sp_daqiao: '#b捞德一评级:3.9',
                            hpp_sp_diaochan: '#b捞德一评级:3.6',
                            hpp_sp_guanyu: '#b捞德一评级:3.8',
                            hpp_sp_huangyueying: '#b捞德一评级:3.5',
                            hpp_sp_jiangwei: '#b捞德一评级:3.5',
                            hpp_sp_jiaxu: '#b捞德一评级:3.6',
                            hpp_sp_machao: '#b捞德一评级:3.7',
                            hpp_sp_menghuo: '#b捞德一评级:3.8',
                            hpp_sp_pangde: '#b捞德一评级:3.1',
                            hpp_sp_pangtong: '#b捞德一评级:3.8',
                            hpp_sp_sunshangxiang: '#b捞德一评级:3.8',
                            hpp_sp_taishici: '#r捞德一评级:4.0',
                            hpp_sp_xiaoqiao: '#b捞德一评级:3.8',
                            hpp_sp_zhangfei: '#b捞德一评级:3.8',
                            hpp_sp_zhanghe: '#b捞德一评级:3.8',
                            hpp_sp_zhangliao: '#b捞德一评级:3.7',
                            hpp_sp_zhaoyun: '#g捞德一评级:2.6',
                            hpp_sp_zhenji: '#b捞德一评级:3.8',
                            hpp_sp_zhugeliang: '#b捞德一评级:3.9',
                            // 喵
                            hpp_miao_caifuren: '#r捞德一评级:4.1',
                            hpp_miao_caiwenji: '#r捞德一评级:4.3',
                            hpp_miao_daqiao: '#r捞德一评级:4.2',
                            hpp_miao_diaochan: '#r捞德一评级:4.2',
                            hpp_miao_huangyueying: '#r捞德一评级:4.3',
                            hpp_miao_sunshangxiang: '#r捞德一评级:4.0',
                            hpp_miao_wangyi: '#r捞德一评级:4.1',
                            hpp_miao_xiaoqiao: '#r捞德一评级:4.5',
                            hpp_miao_zhangchunhua: '#r捞德一评级:4.1',
                            hpp_miao_zhangxingcai: '#r捞德一评级:4.0',
                            hpp_miao_zhenji: '#r捞德一评级:4.1',
                            hpp_miao_zhurong: '#r捞德一评级:4.2',
                            // 神
                            hpp_shen_caocao: '#r捞德一评级:4.5',
                            hpp_shen_daxiaoqiao: '#r捞德一评级:4.4',
                            hpp_shen_dianwei: '#r捞德一评级:4.1',
                            hpp_shen_diaochan: '#r捞德一评级:4.5',
                            hpp_shen_ganning: '#r捞德一评级:4.2',
                            hpp_shen_guanyu: '#r捞德一评级:4.1',
                            hpp_shen_guojia: '#r捞德一评级:4.1',
                            hpp_shen_huatuo: '#r捞德一评级:4.7',
                            hpp_shen_jiangwei: '#r捞德一评级:4.7',
                            hpp_shen_liubei: '#r捞德一评级:4.0',
                            hpp_shen_luxun: '#r捞德一评级:4.0',
                            hpp_shen_lvbu: '#r捞德一评级:4.0',
                            hpp_shen_lvmeng: '#r捞德一评级:4.0',
                            hpp_shen_simayi: '#r捞德一评级:4.4',
                            hpp_shen_sunce: '#r捞德一评级:4.0',
                            hpp_shen_sunquan: '#r捞德一评级:4.1',
                            hpp_shen_taishici: '#r捞德一评级:4.1',
                            hpp_shen_xunyu: '#r捞德一评级:4.6',
                            hpp_shen_zhangfei: '#r捞德一评级:4.8',
                            hpp_shen_zhangjiao: '#r捞德一评级:4.7',
                            hpp_shen_zhangliao: '#r捞德一评级:4.0',
                            hpp_shen_zhaoyun: '#r捞德一评级:4.2',
                            hpp_shen_zhenji: '#r捞德一评级:4.1',
                            hpp_shen_zhouyu: '#r捞德一评级:4.0',
                            hpp_shen_zhugeliang: '#r捞德一评级:4.1',
                            // 斗地主
                            hpp_change: '#r地主专属' + '<br/>' + '捞德一评级:4.2',
                            hpp_dalanmao: '#b地主专属' + '<br/>' + '捞德一评级:3.8',
                            hpp_libai: '#r地主专属' + '<br/>' + '捞德一评级:4.2',
                            hpp_sunwukong: '#r地主专属' + '<br/>' + '捞德一评级:4.0',
                        },
                        translate: {
                            phaseZhunber: '准备阶段',
                            phaseJudge: '判定阶段',
                            phaseDraw: '摸牌阶段',
                            phaseUse: '出牌阶段',
                            phaseDiscard: '弃牌阶段',
                            phaseJieshu: '结束阶段',
                            // 牌
                            hpp_yanxiao_card: '言笑',
                            hpp_yanxiao_card_info: '判定阶段开始时，获得此牌和判定区内的所有牌。',
                            hpp_lingren_basic: ' ',
                            hpp_lingren_trick: ' ',
                            hpp_lingren_equip: ' ',

                            // B
                            hpp_beimihu: '欢杀卑弥呼',
                            hpp_zongkui: '纵傀',
                            hpp_zongkui_info: '回合开始前，你可以选择一名没有“傀”标记的其他角色，令其获得一枚“傀”标记。游戏开始时，体力值最少且没有“傀”标记的一名其他角色也获得一个“傀”标记。',
                            hpp_guju: '骨疽',
                            hpp_guju_info: '锁定技，拥有“傀”标记的角色受到伤害后，你摸一张牌。',
                            hpp_bulianshi: '欢杀步练师',
                            hpp_anxu: '安恤',
                            hpp_anxu_info: '出牌阶段开始和结束时，你可以获得手牌数最多的其他角色一张手牌。若你获得的牌是黑桃，该角色摸一张牌。',
                            hpp_buzhi: '欢杀步骘',
                            hpp_hongde: '弘德',
                            hpp_hongde_info: '当你一次性获得两张牌时，你可以令一名其他角色摸一张牌。当你失去牌时，你可以摸一张牌（每回合最多2次）。',
                            hpp_dingpan: '定叛',
                            hpp_dingpan_info: '出牌阶段限X次，你可以令一名装备区有牌的角色摸一张牌并选择一项：1.你弃置其一张装备牌；2.收回装备区里的牌，你对其造成1点伤害。（X为场上存活势力数）',
                            // C
                            hpp_caifuren: '欢杀蔡夫人',
                            hpp_qieting: '窃听',
                            hpp_qieting_info: '其他角色的回合结束时，若其手牌数大于你，则你摸一张牌。若其没有于本回合内对另一名角色造成过伤害，则你可以选择一项：1.观看其两张手牌并获得其中的一张；2.将其装备区里的一张牌置入你的装备区；3.摸一张牌。',
                            hpp_xianzhou: '献州',
                            hpp_xianzhou_info: '限定技，出牌阶段，你可以将任意张手牌交给一名其他角色，然后你回复X点体力并对其攻击范围内的至多X名角色造成1点伤害（X为你交给其的牌数）。',
                            hpp_caiwenji: '欢杀蔡文姬',
                            hpp_beige: '悲歌',
                            hpp_beige_info: '当一名角色受到【杀】造成的伤害后，你可以弃置一张牌，若弃置的牌为：红色，令其回复1点体力，并摸两张牌；黑桃，伤害来源翻面；梅花，伤害来源弃置2张牌。',
                            hpp_caoang: '欢杀曹昂',
                            hpp_kangkai: '慷忾',
                            hpp_kangkai_info: '锁定技，当一名角色成为【杀】的目标后，若你与其距离1以内，则你摸一张牌。然后可以交给其一张牌并展示之（每回合限两次）。若此牌为装备牌，该角色可以使用此牌。',
                            hpp_caocao: '欢杀曹操',
                            hpp_jianxiong: '奸雄',
                            hpp_jianxiong_info: '当你受到1点伤害时，你可以摸一张牌，并获得对你造成伤害的牌；或摸两张牌。',
                            hpp_hujia: '护驾',
                            hpp_hujia_info: '主公技，其他魏势力角色可以替你使用或打出【闪】。其他魏势力角色若以此法使用或打出【闪】时，可令你摸一张牌，每回合限一张。',
                            hpp_caochong: '欢杀曹冲',
                            hpp_chengxiang: '称象',
                            hpp_chengxiang_info: '锁定技，当你受到伤害后，你可以亮出牌堆顶的四张牌。然后获得其中任意张点数之和小于等于13的牌。',
                            hpp_caohua: '欢杀曹华',
                            hpp_caiyi: '彩翼',
                            hpp_caiyi_info: '转换技，结束阶段，你可以令一名角色选择一项并移除该选项。阳：⒈回复X点体力；⒉摸X张牌；⒊复原武将牌；⒋随机执行该状态一个已移除的选项；阴：⒈受到X点伤害；⒉弃置X张牌；⒊翻面并横置；⒋随机执行该状态一个已移除的选项。（X为当前状态剩余选项数）。',
                            hpp_guili: '归离',
                            hpp_guili_info: '你的第一个回合开始时，你选择一名其他角色。该角色每轮的第一个回合的结束时，若其本回合未造成过伤害，你执行一个额外的回合。',
                            hpp_caojie: '欢杀曹节',
                            hpp_shouxi: '守玺',
                            hpp_shouxi_info: '当你成为【杀】的目标后，你可声明一种非装备牌的牌名（此牌名不得是本局游戏你以此法申明过的牌名），然后除非使用者弃置一张你声明的牌，并获得你的一张牌；否则此【杀】对你无效，且你从剩余牌堆中获得一张牌名与其相同的牌。',
                            hpp_huimin: '惠民',
                            hpp_huimin_info: '结束阶段，你可以摸X张牌（X为手牌数小于等于其体力值的角色数），然后展示X-1张的手牌，从你指定的一名角色开始，这些角色依次选择并获得其中一张。',
                            hpp_caomao: '欢杀曹髦',
                            hpp_caopi: '欢杀曹丕',
                            hpp_xingshang: '行殇',
                            hpp_xingshang_info: '当其他角色死亡时，你可以获得其所有牌并摸一张牌。',
                            hpp_fangzhu: '放逐',
                            hpp_fangzhu_info: '你受到伤害后，你可以令一名其他角色翻面，然后该角色摸一张牌。',
                            hpp_caoren: '欢杀曹仁',
                            hpp_caoren_jushou: '据守',
                            hpp_caoren_jushou_info: '结束阶段，你可以翻面，若如此做，你摸四张牌，然后你可以使用一张装备牌。',
                            hpp_caorui: '欢杀曹叡',
                            hpp_mingjian: '明鉴',
                            hpp_mingjian2: '明鉴',
                            hpp_mingjian_info: '出牌阶段限一次，你可以将任意张手牌交给一名其他角色，然后该角色下回合的手牌上限+1，且出牌阶段内可以多使用一张【杀】。',
                            hpp_xingshuai: '兴衰',
                            hpp_xingshuai_info: '主公技，限定技，当你进入濒死状态时，你可令其他魏势力角色依次选择是否令你回复1点体力。选择是的角色在此次濒死结算结束后受到1点伤害并摸一张牌。',
                            hpp_caoxing: '欢杀曹性',
                            hpp_liushi: '流矢',
                            hpp_liushi_info: '出牌阶段，你可以将一张红桃牌置于牌堆顶，视为对一名角色使用一张【杀】（不计入次数且无距离限制）。你使用【杀】造成伤害后，该角色手牌上限-1。',
                            hpp_caoxiu: '欢杀曹休',
                            hpp_qingxi: '倾袭',
                            hpp_qingxi_info: '当你使用【杀】或【决斗】指定目标后，你可令其选择一项：1.弃置等同你攻击范围内的人数张手牌（最多为二，若你装备区有武器牌，则改为最多为四），然后弃置你的此武器牌；2.令此牌对其伤害+1且进行一次判定，若结果为红色，此牌不能被该角色响应，若结果为黑色，你摸2张牌。',
                            hpp_caoying: '欢杀曹婴',
                            hpp_lingren: '凌人',
                            hpp_lingren_info: '出牌阶段限一次，当你使用【杀】或伤害类锦囊牌指定其他角色为目标后，你可以猜测其中一个目标的手牌是否有基本牌、锦囊牌或装备牌。至少猜对一项则此牌对其伤害+1；至少猜对两项则你摸两张牌；猜对三项则你获得“奸雄”和“行殇”直到你下回合开始。',
                            hpp_fujian: '伏间',
                            hpp_fujian_info: '锁定技，结束阶段，你随机观看一名其他角色的一张手牌。',
                            hpp_caozhang: '欢杀曹彰',
                            hpp_jiangchi: '将驰',
                            hpp_jiangchi_info: '出牌阶段开始时，你可以选择一项：1.摸三张牌，本回合不能使用或打出【杀】，且本回合手牌上限+2；2.摸一张牌，然后直到你的下一回合开始，你受到伤害时摸一张牌；3.本回合使用【杀】无距离限制且可以多使用一张【杀】。',
                            hpp_caozhen: '欢杀曹真',
                            hpp_sidi: '司敌',
                            hpp_sidi_info: '结束阶段，你可以将至多两张非基本牌置于武将牌上，称为“司”。其他角色的出牌阶段开始时，你可以移去一张“司”。然后该角色此阶段内不能使用或打出与“司”颜色相同的牌。此阶段结束时，若其没有使用【杀】，视为对其使用一张【杀】；若其没有使用锦囊牌，你摸两张牌。',
                            hpp_caozhi: '欢杀曹植',
                            hpp_luoying: '落英',
                            hpp_luoying_discard: '落英',
                            hpp_luoying_judge: '落英',
                            hpp_luoying_info: '每当其他角色的梅花牌因弃置或判定而置入弃牌堆时，你可以获得之；弃牌阶段，你的梅花牌不计入手牌上限。',
                            hpp_jiushi: '酒诗',
                            hpp_jiushi1: '酒诗',
                            hpp_jiushi3: '酒诗',
                            hpp_jiushi_info: '你可以将武将牌从正面翻至背面，视为使用一张【酒】；当你受到伤害后，你可以从背面翻至正面；当你翻面时，你获得牌堆中的一张随机锦囊牌。',
                            hpp_chendao: '欢杀陈到',
                            hpp_wanglie: '往烈',
                            hpp_wanglie2: '往烈',
                            hpp_wanglie_info: '出牌阶段，你使用的牌无距离限制。当你于出牌阶段内使用一张牌时，你可令此牌不能被响应，回合结束时，你摸X张牌，X为此牌造成的伤害数，若如此做，本回合你不能再使用牌。',
                            hpp_chengong: '欢杀陈宫',
                            hpp_mingce: '明策',
                            hpp_mingce_info: '出牌阶段开始时，你可以选择一名其他角色，视为该角色对其攻击范围内你选择的另一名角色使用一张【杀】。',
                            hpp_chengpu: '欢杀程普',
                            hpp_lihuo: '疠火',
                            hpp_lihuo_info: '当你使用普通【杀】可以改为火【杀】，若此【杀】造成的伤害大于1，你失去1点体力；你使用火【杀】可以多选择一个目标；每回合你的火【杀】首次造成伤害后，摸一张牌。',
                            hpp_chunlao: '醇醪',
                            hpp_chunlao2: '醇醪',
                            hpp_chunlao_info: '结束阶段，若你没有“醇”，你可以将任意张【杀】置于武将牌上，称为“醇”；当一名角色处于濒死状态时，你可以移去一张“醇”，视为该角色使用一张【酒】。若移去的“醇”为红色，则你回复1点体力；若移去的“醇”为黑色，你摸两张牌。',
                            hpp_chenqun: '欢杀陈群',
                            hpp_faen: '法恩',
                            hpp_faen_info: '当一名角色翻面或者横置后，你可以令其摸一张牌。横置的角色受到伤害时，你可以弃置一张牌令此伤害无效。',
                            hpp_chunyuqiong: '欢杀淳于琼',
                            hpp_cangchu: '仓储',
                            hpp_cangchu2: '仓储',
                            hpp_cangchu3: '仓储',
                            hpp_cangchu_info: '锁定技，游戏开始时，你获得3枚“粮”标记，每拥有1枚“粮”手牌上限+1；当你于回合外获得牌或回复体力时，获得1枚“粮”（每回合限获得一个“粮”且“粮”的总数不能大于存活角色数）。',
                            hpp_liangying: '粮营',
                            hpp_liangying_info: '弃牌阶段开始时，你可以摸至多X张牌，然后交给等量的角色各一张牌（X为“粮”的数量）。',
                            hpp_shishou: '失守',
                            hpp_shishou_info: '锁定技，当你使用一张【酒】或受到火焰伤害后，你失去1枚“粮”。',
                            // D
                            hpp_daqiao: '欢杀大乔',
                            hpp_wanrong: '婉容',
                            hpp_wanrong_info: '出牌阶段限一次，你可以将一张方块牌当“乐不思蜀”使用，或者弃一张方片花色牌并弃置场上的一张“乐不思蜀”。',
                            // hpp_guose: '国色',
                            // hpp_guose_info: '当你使用或弃置方块牌时，摸1张牌。',
                            hpp_guose: '国色',
                            hpp_guose_info: '锁定技，当你失去方块牌时，摸1张牌。',
                            hpp_liuli: '流离',
                            hpp_liuli_info: '你被【杀】时，可以弃一张牌转移给你攻击范围内的一名其他角色。',
                            hpp_dengai: '欢杀邓艾',
                            hpp_tuntian: '屯田',
                            hpp_tuntian_info: '当你于回合外失去牌后，你可以进行判定，若结果不为红桃，将判定牌置于你的武将牌上，称为“田”；回合结束时，你可以弃置一张手牌并进行一次“田”的判定；你计算与其他角色的距离-X（X为“田”的数量）。',
                            hpp_dianwei: '欢杀典韦',
                            hpp_qiangxi: '强袭',
                            hpp_qiangxi_info: '出牌阶段，你可以失去1点体力，并摸1张牌，然后对攻击范围的一名其他角色造成1点伤害（每名角色限一次）；每当其他角色受到伤害时，你可以弃置一张装备牌，然后本次伤害值+1。',
                            hpp_diaochan: '欢杀貂蝉',
                            hpp_lijian: '离间',
                            hpp_lijian_info: '出牌阶段限两次，你可以弃置1张牌并选择两名角色，然后令其中一名角色视为对另一名角色使用一张【决斗】（不可被【无懈可击】响应），因该【决斗】失败的角色本回合无法再成为“离间”的目标。',
                            hpp_biyue: '闭月',
                            hpp_biyue_info: '结束阶段开始时，你摸X张牌（X为本回合你发动“离间”的次数+1）。',
                            hpp_dingfeng: '欢杀丁奉',
                            hpp_duanbing: '短兵',
                            hpp_duanbing_info: '你使用【杀】可以多选择一名距离为1的角色为目标。你对距离为1的角色使用的首张【杀】需两张【闪】才能抵消。',
                            hpp_fenxun: '奋迅',
                            hpp_fenxun_info: '出牌阶段限一次，你可以选择一名其他角色，然后本回合你计算与其的距离视为1；回合结束时，摸X张牌（X为本回合距离你1以内的受到伤害的角色数）。',
                            hpp_dongbai: '欢杀董白',
                            hpp_lianzhu: '连诛',
                            hpp_lianzhu_info: '出牌阶段限一次，你可以展示并交给一名其他角色一张牌，若此牌为红色，你选择一项：1、你摸两张牌；2、你回复1点体力；若此牌为黑色，其选择一项：1.你摸两张牌；2.弃置两张牌。',
                            hpp_xiahui: '黠慧',
                            hpp_xiahui_info: '锁定技，你的黑色牌不占用手牌上限；其他角色获得你的黑色牌时，这些牌标记为“黠慧”，其不能使用、打出、弃置“黠慧”牌，其体力值减少时，“黠慧”标记消失；其他角色的回合结束时，若其本回合失去过“黠慧”牌，其失去1点体力。',
                            hpp_dongyun: '欢杀董允',
                            hpp_bingzheng: '秉正',
                            hpp_bingzheng_info: '出牌阶段结束时，你可以令一名角色弃置一张手牌或摸一张牌。然后若其手牌数等于体力值，你摸一张牌，且可以交给该角色一张牌。',
                            hpp_dongzhuo: '欢杀董卓',
                            hpp_jiuchi: '酒池',
                            hpp_jiuchi_info: '你可以将一张黑色手牌当【酒】使用。',
                            hpp_roulin: '肉林',
                            hpp_roulin_info: '锁定技。你对女性角色使用的【杀】和女性角色对你使用的【杀】均需使用两张【闪】才能抵消。',
                            hpp_benghuai: '崩坏',
                            hpp_benghuai_hp: '体力',
                            hpp_benghuai_maxHp: '体力上限',
                            hpp_benghuai_info: '锁定技，结束阶段，若你不是体力值最小的角色，你失去1点体力或减1点体力上限，并摸一张牌。',
                            hpp_baonue: '暴虐',
                            hpp_baonue2: '暴虐',
                            hpp_baonue_info: '主公技，当其他群雄势力角色造成伤害后，其可以进行判定，若结果为黑桃，你回复1点体力。',
                            hpp_dufuren: '欢杀杜夫人',
                            hpp_yise: '异色',
                            hpp_yise_info: '其他角色获得你的牌后，若此牌为红色，你可摸一张牌或令其回复1点体力；若此牌为黑色，你可令其下次受到【杀】的伤害时，此伤害+1。',
                            hpp_shunshi: '顺世',
                            hpp_shunshi_info: '准备阶段或当你于回合外受到伤害后，你可交给一名其他角色一张牌。如若此做，你获得以下效果：下个摸牌阶段摸牌数+1、下个出牌阶段使用【杀】次数+1且无视防具、下个弃牌阶段手牌上限+1。',
                            // F
                            hpp_fazheng: '欢杀法正',
                            hpp_enyuan: '恩怨',
                            hpp_enyuan_info: '当你获得一名其他角色的牌后，你可以令其摸一张牌；当其他角色获得你的牌后，你摸一张牌。',
                            hpp_xuanhuo: '眩惑',
                            hpp_xuanhuo_info: '摸牌阶段，你可以选择一名其他角色，除非该角色对你选择的另一名角色使用一张【杀】，否则你获得其一张牌。',
                            hpp_fuhuanghou: '欢杀伏皇后',
                            hpp_zhuikong: '惴恐',
                            hpp_zhuikong_info: '其他角色的回合开始时，你可以与其拼点：若你赢，本回合该角色只能对自己使用牌；若你没赢，本回合其与你的距离视为1。',
                            hpp_qiuyuan: '求援',
                            hpp_qiuyuan_info: '当你成为【杀】的目标时，你可以令出杀者以外至多3名其他角色，每人交给你一张【闪】，否则也成为此【杀】的目标，并弃置一张牌。',
                            // G
                            hpp_ganfuren: '欢杀甘夫人',
                            hpp_shushen: '淑慎',
                            hpp_shushen_info: '当一名角色受到伤害时，你可以失去1点体力并防止此伤害，然后你与其各摸一张牌；当你回复1点体力后，你可以令一名其他角色摸一张牌。',
                            hpp_huangsi: '皇思',
                            hpp_huangsi_info: '限定技，当你濒死时，你可以回复至1点体力并弃置所有手牌，然后你可以指定一名角色，令其摸X+2张牌（X为你弃置的牌数）。',
                            hpp_ganning: '欢杀甘宁',
                            hpp_qixi: '奇袭',
                            hpp_qixi_info: '出牌阶段开始时，可以选择一名角色，弃置其一张牌。出牌阶段，你可以将一张黑色牌当【过河拆桥】使用。',
                            hpp_fenwei: '奋威',
                            hpp_fenwei_info: '限定技，当一张锦囊牌指定多个目标后，你可以令此牌对其中任意个目标无效，并摸一张牌，当你失去最后一张手牌时，重置本技能。',
                            hpp_gaoshun: '欢杀高顺',
                            hpp_xianzhen: '陷阵',
                            hpp_xianzhen_info: '锁定技。回合内使用杀首次造成伤害时伤害+1，且每回合第一张杀被闪后摸一张牌。',
                            hpp_jinjiu: '禁酒',
                            hpp_jinjiu_info: '锁定技，你的【酒】全部视为杀，且不计入【杀】的使用次数，其他角色使用酒结算后，你获得之；你的回合内，其他人不能使用【酒】。',
                            hpp_gongsunzan: '欢杀公孙瓒',
                            hpp_yicong: '义从',
                            hpp_yicong_info: '锁定技，你计算与其他角色的距离-X（X为你的体力值）；其他角色计算与你的距离+Y（Y为你的已损失的体力值）。',
                            hpp_qiaomeng: '趫猛',
                            hpp_qiaomeng_info: '当你使用【杀】对一名角色造成伤害后，你可以获得其区域内的1张牌。若此牌为坐骑牌，则此伤害+1。',
                            hpp_guanping: '欢杀关平',
                            hpp_longyin: '龙吟',
                            hpp_longyin_info: '当一名角色于其出牌阶段使用【杀】时，你可弃置一张牌，令此【杀】不计入出牌阶段的使用次数，然后若此【杀】为红色，你摸一张牌。若你弃置的牌与此【杀】花色相同，“竭忠”视为未发动过。',
                            hpp_guanyinping: '欢杀关银屏',
                            hpp_xuehen: '雪恨',
                            hpp_xuehen_info: '出牌阶段限一次，你可以弃置一张红色牌，然后横置至多X名角色，并对其中一名角色造成1点火焰伤害（X为你已损的体力值数且至少为1）。',
                            hpp_huxiao: '虎啸',
                            hpp_huxiao2: '虎啸',
                            hpp_huxiao_info: '锁定技，当你对一名角色造成火焰伤害后，本回合你对其使用牌没有次数限制。',
                            hpp_wuji: '武继',
                            hpp_wuji_info: '觉醒技，结束阶段，若你本回合造成了3点或更多伤害，你加1点体力上限并回复1点体力，然后获得【青龙偃月刀】。',
                            hpp_guanyu: '欢杀关羽',
                            hpp_wusheng: '武圣',
                            hpp_wusheng_info: '回合开始时，你获得一张红色牌，你可以将一张红色牌当作【杀】使用或打出，你的红色【杀】伤害+1。',
                            hpp_tuodao: '拖刀',
                            hpp_tuodao_info: '锁定技，你每使用或打出1张【闪】，你的下一张【杀】伤害+1（可叠加）。',
                            hpp_guohuai: '欢杀郭淮',
                            hpp_jingce: '精策',
                            hpp_jingce_info: '结束阶段开始时，你可以摸X张牌（X为本回合你出牌的花色数+1，至多为3）。',
                            hpp_guohuanghou: '欢杀郭皇后',
                            hpp_jiaozhao: '矫诏',
                            hpp_jiaozhao_1: '矫诏牌',
                            hpp_jiaozhao_info: '出牌阶段限一次，你可以展示一张手牌并声明一种基本牌或普通锦囊牌，本回合你可将此牌当声明的牌使用（不能对自己使用）。',
                            hpp_jiaozhao_2: '矫诏·2级',
                            hpp_jiaozhao_2_info: '出牌阶段，你可以展示一张手牌并声明一种基本牌或普通锦囊牌，本回合你可将此牌当声明的牌使用（每个类型的牌限一次，不能对自己使用）。',
                            hpp_jiaozhao_3: '矫诏·3级',
                            hpp_jiaozhao_3_info: '出牌阶段限，你可以展示一张手牌并声明一种基本牌或普通锦囊牌，本回合你可将此牌当声明的牌使用（每种牌名限一次，每回合限3次）。',
                            hpp_danxin: '殚心',
                            hpp_danxin_info: '当你受到伤害后，你可以摸一张牌，然后修改“矫诏”。',
                            hpp_guojia: '欢杀郭嘉',
                            hpp_tiandu: '天妒',
                            hpp_tiandu_info: '当你的判定牌生效后，你可以获得此牌。',
                            hpp_yiji: '遗计',
                            hpp_yiji_info: '当你受到1点伤害后，你可以摸两张牌，然后将至多两张手牌交给任意其他角色。',
                            hpp_shenglun: '胜论',
                            hpp_shenglun_info: '出牌阶段限1次，你可以选择至多2名其他角色，然后你与其分别比较血量、手牌、武器、防具、坐骑数量；当胜或败累计达到10次，胜：你立即回复1点体力，败：对1名角色造成1点伤害。然后发动1次遗计并重置对应的胜败次数。',
                            hpp_guotupangji: '欢杀郭图逢纪',
                            hpp_jigong: '急攻',
                            hpp_jigong_info: '出牌阶段开始时，你可以摸至多三张牌，然后你本回合的手牌上限等于你此阶段造成的伤害值+1，若此伤害值大于等于你摸的牌数，你回复1点体力。',
                            hpp_shifei: '饰非',
                            hpp_shifei_info: '当你需要使用或打出【闪】时，你可以令当前回合角色摸一张牌，然后若其手牌数不为全场唯一最多，则你弃置一名角色的一张牌，视为你使用或打出了一张【闪】。',
                            // H
                            hpp_handang: '欢杀韩当',
                            hpp_haozhao: '欢杀郝昭',
                            hpp_hetaihou: '欢杀何太后',
                            hpp_zhendu: '鸩毒',
                            hpp_zhendu2: '鸩毒',
                            hpp_zhendu_info: '一名角色的出牌阶段开始时，你可以弃置一张牌，然后该角色视为使用一张【酒】；若该角色不是你，你对其造成1点伤害，且本回合其计算与他人的距离时+1。',
                            hpp_qiluan: '戚乱',
                            hpp_qiluan_info: '一名角色濒死时，你可以摸一张牌。你击杀任意角色时，摸2张牌。',
                            hpp_huaman: '欢杀花鬘',
                            hpp_souying: '薮影',
                            hpp_souying_info: '每回合限一次，当你对其他角色（或其他角色对你）使用牌指定唯一目标后，你可以弃置一张牌，将此牌结算后收回手牌（或令此牌对你无效）。',
                            hpp_zhanyuan: '战缘',
                            hpp_zhanyuan_info: '觉醒技，你的回合内，若你因“蛮嗣”累计获得超过七张牌，你可以选择一名其他角色，你与其获得技能“系力”，然后你失去技能“蛮嗣”。',
                            hpp_huanggai: '欢杀黄盖',
                            hpp_zhaxiang: '诈降',
                            hpp_zhaxiang_info: '锁定技，你使用红色【杀】无距离限制且不能被【闪】响应，且你可以多使用一张【杀】。',
                            hpp_huangyueying: '欢杀黄月英',
                            hpp_jizhi: '集智',
                            hpp_jizhi_info: '当你使用一张锦囊牌时，你可以摸一张牌。若此牌是基本牌，本回合手牌上限+1；若此牌是装备牌，则可以置入其他角色的装备栏；若此牌是锦囊牌，本回合出杀次数+1。',
                            hpp_qicai: '奇才',
                            hpp_qicai_info: '锁定技，你使用锦囊牌无距离限制；其他角色不能弃置你装备区内的防具和武器牌。',
                            hpp_huangzhong: '欢杀黄忠',
                            hpp_liegong: '烈弓',
                            hpp_liegong_info: '你的【杀】无视距离。当你使用【杀】指定目标后：若目标角色的手牌数小于等于你，不能使用【闪】；目标体力大于等于你，此【杀】伤害+1。',
                            hpp_huatuo: '欢杀华佗',
                            hpp_jijiu: '急救',
                            hpp_jijiu_info: '你的回合外，你可以将一张红色牌当【桃】使用，然后你可弃置一名其他角色的一张手牌。',
                            hpp_qingnang: '青囊',
                            hpp_qingnang_info: '出牌阶段限一次，你选择场上的任意名角色，令其各增加一点体力上限并回复一点体力，直到你的下个回合开始，若如此做，则你需要弃置X-1张牌（X为你选择的角色数）。',
                            hpp_huaxiong: '欢杀华雄',
                            hpp_yaowu: '耀武',
                            hpp_yaowu_info: '你受到红色【杀】的伤害时，伤害来源摸一张牌；你受到黑色【杀】的伤害时，你摸一张牌。获得对你造成伤害的所有【杀】。',
                            hpp_yangwei: '扬威',
                            hpp_yangwei_info: '使用红杀后，可继续使用黑杀；使用黑杀后，可继续使用红杀。出牌阶段结束时，若本回合出杀次数大于2，则你回复1点体力。',
                            // J
                            hpp_jiangwei: '欢杀姜维',
                            hpp_tiaoxin: '挑衅',
                            hpp_tiaoxin_info: '出牌阶段开始时，你可以弃置一名其他角色至多两张手牌。若其中有【杀】，则你需弃置一张牌。',
                            hpp_zhiji: '志继',
                            hpp_zhiji_info: '觉醒技，准备阶段，若你没有手牌，你回复1点体力或摸两张牌，然后减1点体力上限，获得“观星”。',
                            hpp_jianyong: '欢杀简雍',
                            hpp_qiaoshui: '巧说',
                            hpp_qiaoshui_info: '你的锦囊牌不计入手牌上限；出牌阶段，你可以与一名角色拼点：若你赢，本回合你使用的下一张牌可以多选或少选一个目标；若你没赢，则本回合无法再发动巧说拼点。',
                            hpp_jiaxu: '欢杀贾诩',
                            hpp_wansha: '完杀',
                            hpp_wansha_info: '锁定技，你的回合内，只有你才能使用【桃】。',
                            hpp_jushou: '欢杀沮授',
                            hpp_jianying: '渐营',
                            hpp_jianying_info: '当你于出牌阶段使用牌时，若此牌与你使用的上一张牌点数或花色相同，则你可以摸一张牌。',
                            hpp_shibei: '矢北',
                            hpp_shibei_info: '锁定技，你每回合第一次受到伤害后，回复1点体力并摸一张牌。然后你本回合每次受到伤害后均失去1点体力。',
                            // K
                            hpp_kuailiangkuaiyue: '欢杀蒯良蒯越',
                            hpp_shenshi: '审时',
                            hpp_shenshi_info: '出牌阶段限一次，你可以将一张牌交给一名其他角色，然后对其造成1点伤害。若该角色因此死亡，则你可以令一名角色将手牌摸至四张。其他角色对你造成伤害后，你可以观看该角色的手牌，然后交给其一张牌，当该角色失去此牌时，你将手牌摸至四张。',
                            // L
                            hpp_liangxing: '欢杀梁兴',
                            hpp_lulue: '掳掠',
                            hpp_lulue_info: '出牌阶段开始时，你可以选择1名有手牌且手牌数小于等于你的角色，然后其选择1项：1.将所有手牌交给你，然后你将武将牌翻面；2.将武将牌翻面，然后视为对你使用1张【杀】。',
                            hpp_liaohua: '欢杀廖化',
                            hpp_dangxian: '当先',
                            hpp_dangxian_info: '回合开始时你进行一个额外的出牌阶段并摸一张【杀】。',
                            hpp_fuli: '伏枥',
                            hpp_fuli_info: '限定技，当你处于濒死状态时，你可以将体力回复至X点且手牌摸至X张（X为全场势力数），然后若X大于3，你翻面。',
                            hpp_lidian: '欢杀李典',
                            hpp_xunxun: '恂恂',
                            hpp_xunxun_info: '摸牌阶段开始时，你可以观看牌堆顶的四张牌，然后将其中的两张牌置于牌堆顶，将其余的牌置于牌堆底，回合结束阶段，你获得牌堆底的两张牌。',
                            hpp_lijue: '欢杀李傕',
                            hpp_lingtong: '欢杀凌统',
                            hpp_xuanfeng: '旋风',
                            hpp_xuanfeng_info: '当你于弃牌阶段弃置过至少两张牌，或当你失去装备区里的牌后，你可以弃置至多两名其他角色的共计两张牌。然后若此时是你的回合内，你可以对其中一名角色造成1点伤害。',
                            hpp_yongjin: '勇进',
                            hpp_yongjin_info: '限定技，出牌阶段，你可以移动场上的至多三张装备牌。',
                            hpp_liru: '欢杀李儒',
                            hpp_fencheng: '焚城',
                            hpp_fencheng_info: '限定技。出牌阶段，你可令所有其他角色依次选择一项：1.弃置任意张牌（须比上家弃置的牌多）；2.受到你造成的2点火焰伤害。',
                            hpp_mieji: '灭计',
                            hpp_mieji_info: '出牌阶段限一次，你可以将一张黑色牌置于牌堆顶，然后令一名有手牌的其他角色弃置一张锦囊牌或两张非锦囊牌。',
                            hpp_liubei: '欢杀刘备',
                            hpp_rende: '仁德',
                            hpp_rende_info: '出牌阶段每名角色限一次，你可以将任意张手牌交给一名其他角色,并可以让其无法对你使用红色【杀】直到你的下回合开始。当你给出第二张“仁德”牌时，你可以视为使用一张基本牌或普通锦囊牌。',
                            hpp_jijiang: '激将',
                            hpp_jijiang_info: '主公技，其他蜀势力角色可以在你需要时代替你使用或打出【杀】。若以此法出杀，则你与其各摸一张牌。你的回合外，当其他蜀势力角色使用或打出【杀】时，其可令你摸一张牌，每回合限一张。',
                            hpp_liubiao: '欢杀刘表',
                            hpp_zishou: '自守',
                            hpp_zishou_info: '摸牌阶段，你可以多摸X张牌（X为全场势力数），然后当你本回合对其他角色造成伤害时，防止此伤害。',
                            hpp_zongshi: '宗室',
                            hpp_zongshi_info: '锁定技，你的手牌上限+X（X为全场势力函数）；准备阶段，若你的手牌数大于你的体力值，则你本回合使用【杀】无次数限制。',
                            hpp_liuchen: '欢杀刘谌',
                            hpp_zhanjue: '战绝',
                            hpp_zhanjue_info: '出牌阶段，你可以将所有手牌当【决斗】使用，然后你和受伤的角色各摸一张牌。若你因此摸过三张或更多的牌，则本回合〖战绝〗失效，若你因【决斗】受到伤害，你可以弃置伤害来源区域内的一张牌。',
                            hpp_qinwang: '勤王',
                            hpp_qinwang_info: '主公技。出牌阶段限一次，你可以令所有其他蜀国角色依次选择是否交给你一张基本牌，然后你可令选择是的角色摸一张牌（以此法获得的牌本回合不计算在〖战绝〗使用的牌中）。',
                            hpp_liufeng: '欢杀刘封',
                            hpp_xiansi: '陷嗣',
                            hpp_xiansi_info: '准备阶段开始时，你可以弃置至多两名其他角色区域内的各一张牌。弃置了装备区的牌，且你在其攻击范围内，视为目标对你使用一张【杀】；若陷嗣只弃置一张牌，则你摸一张牌。',
                            hpp_liushan: '欢杀刘禅',
                            hpp_fangquan: '放权',
                            hpp_fangquan_info: '你可以跳过出牌阶段，然后此回合结束时，令一名其他角色获得一个额外的回合。',
                            hpp_ruoyu: '若愚',
                            hpp_ruoyu_info: '主公技，觉醒技。准备阶段，若你是体力值最小的角色，你加1点体力上限，回复1点体力，然后获得“激将”。',
                            hpp_liuxie: '欢杀刘协',
                            hpp_tianming: '天命',
                            hpp_tianming_info: '当你成为【杀】的目标后，你可以先弃置两张牌再摸两张牌。然后你可以选择一名角色也如此做。',
                            hpp_mizhao: '密诏',
                            hpp_mizhao_info: '出牌阶段限一次，你可以将任意张手牌交给一名其他角色，然后令该角色与另一名角色拼点，拼点赢的角色视为对拼点没赢的角色使用一张【杀】。',
                            hpp_liuyan: '欢杀刘焉',
                            hpp_liuyong: '欢杀刘永',
                            hpp_fengxiang: '封乡',
                            hpp_fengxiang_info: '锁定技，当你受到伤害后，你摸一张牌，且手牌中“隙”最多的角色回复1点体力。',
                            hpp_liuzan: '欢杀留赞',
                            hpp_liuzhang: '欢杀刘璋',
                            hpp_yinlang: '引狼',
                            hpp_yinlang_info: '出牌阶段结束时，可选择场上1个势力。你和该势力角色各获得1个“生”标记，带“生”标记的角色不能对没有“生”标记的角色使用牌。',
                            hpp_xiusheng: '休生',
                            hpp_xiusheng_info: '锁定技，准备阶段，移去所有的“生”标记，然后你摸等量的牌。',
                            hpp_huaibi: '怀璧',
                            hpp_huaibi_info: '主公技，锁定技，你的手牌上限+X（X场上“生”的数量），有“生”标记的角色对你造成伤害后，你摸一张牌。',
                            hpp_liyan: '欢杀李严',
                            hpp_duliang: '督粮',
                            hpp_duliang2: '督粮',
                            hpp_duliang_info: '出牌阶段限一次，你可以获得一名其他角色的一张手牌，然后选择一项：1.令其观看牌堆顶的两张牌，然后获得其中的基本牌和装备牌；2.令其于下个摸牌阶段额外摸一张牌，并从中选一张牌交给你。',
                            hpp_luji: '欢杀陆绩',
                            hpp_zhenglun: '整论',
                            hpp_zhenglun_info: '摸牌阶段，若你没有“橘”，你可以少摸一张牌然后获得一个“橘”。',
                            hpp_lukang: '欢杀陆抗',
                            hpp_jueyan: '决堰',
                            hpp_jueyan_info: '出牌阶段限一次，你可以废除你装备区里的一种装备栏，然后执行对应的一项：武器栏，本回合你可以多使用三张【杀】；防具栏，摸三张牌，本回合手牌上限+3；2个坐骑栏，回复1点体力，本回合获得技能“集智”，且你使用牌无距离限制。',
                            hpp_huairou: '怀柔',
                            hpp_huairou_info: '出牌阶段，你可以重铸已废除装备栏对应的装备牌，重铸为一张指定的基本牌或锦囊牌（每个牌名每回合限1次）。',
                            hpp_lusu: '欢杀鲁肃',
                            hpp_haoshi: '好施',
                            hpp_haoshi_info: '摸牌阶段，你可以多摸两张牌，然后若你的手牌数大于5，则你将一半的手牌交给手牌最少的一名其他角色或弃置。',
                            hpp_dimeng: '缔盟',
                            hpp_dimeng_info: '出牌阶段限一次，你可以选择两名其他角色并弃置X张牌（X为这两名角色手牌数的差），然后令这两名角色交换手牌。',
                            hpp_luxun: '欢杀陆逊',
                            hpp_qianxun: '谦逊',
                            hpp_qianxun_info: '锁定技，当你成为锦囊的唯一目标时，你摸一张牌，然后可以将一张手牌交给其他角色。',
                            hpp_luyusheng: '欢杀陆郁生',
                            hpp_zhente: '贞特',
                            hpp_zhente_info: '当你成为其他角色使用基本牌或普通锦囊牌的目标后，你可令使用者选择一项：1.本回合不能再使用此颜色的牌；2.此牌对你无效。 ',
                            hpp_zhiwei: '至微',
                            hpp_zhiwei2: '至微',
                            hpp_zhiwei_info: '游戏开始时，你选择一名其他角色。该角色造成伤害后，你摸一张牌，该角色受到伤害后，你可以给予其一张手牌。你弃牌阶段弃置的牌可以给予该角色。若场上没有“至微”角色，则你在准备阶段可重新选择一名其他角色。',
                            hpp_lvbu: '欢杀吕布',
                            hpp_lvkai: '欢杀吕凯',
                            hpp_tunan: '图南',
                            hpp_tunan_info: '出牌阶段限一次，你可最多两名角色依次观看牌堆顶的1张牌，然后该角色选择一项：使用此牌（无距离限制）；或将此牌当普通【杀】使用。',
                            hpp_lvlingqi: '欢杀吕玲绮',
                            hpp_lvmeng: '欢杀吕蒙',
                            hpp_keji: '克己',
                            hpp_keji_info: '若你未于出牌阶段内使用或打出过【杀】，你可以跳过弃牌阶段并摸1张牌。',
                            hpp_qinxue: '勤学',
                            hpp_qinxue_info: '觉醒技，结束阶段，若你的手牌数大于等于你的体力值的3倍，将体力上限减少至当前体力值，然后用“攻心”替换“克己”。',
                            // M
                            hpp_machao: '欢杀马超',
                            hpp_yuma: '驭马',
                            hpp_yuma_info: '锁定技，你计算与其他角色的距离-1。当你失去装备区中的坐骑时，你摸两张牌。',
                            hpp_tieji: '铁骑',
                            hpp_tieji_info: '当你使用【杀】指定目标后，你可以令其本回合非锁定技失效，然后你进行判定，若为红色，该角色不能使用【闪】；黑色，你摸两张牌。',
                            hpp_madai: '欢杀马岱',
                            hpp_qianxi: '潜袭',
                            hpp_qianxi2: '潜袭',
                            hpp_qianxi_info: '准备阶段，你可以摸两张牌。并弃置其中一张牌，然后令距离为1的一名角色本回合不能使用或打出与你弃置牌颜色相同的手牌。',
                            hpp_masu: '欢杀马谡',
                            hpp_sanyao: '散谣',
                            hpp_sanyao_info: '出牌阶段限一次，你可以弃置X张牌（X最多为4），然后对等量其他角色造成1点伤害。',
                            hpp_mayunlu: '欢杀马云騄',
                            hpp_fengpo: '凤魄',
                            hpp_fengpo_info: '你在回合内使用第一张【杀】或【决斗】指定一个目标后，你可以选择一项：1.摸X张牌；2.此牌造成的伤害+X。（X为其红色手牌数且最大为4）',
                            hpp_menghuo: '欢杀孟获',
                            hpp_huoshou: '祸首',
                            hpp_huoshou_info: '锁定技，【南蛮入侵】对你无效；当其他角色使用【南蛮入侵】指定目标后，你代替其成为此牌造成的伤害来源，摸一张牌。',
                            hpp_mifuren: '欢杀糜夫人',
                            hpp_guixiu: '闺秀',
                            hpp_guixiu_info: '锁定技，每回合限一次，你的结束阶段，若你的体力值为：奇数，你摸一张牌；偶数，你回复1点体力。',
                            hpp_guixiux: '闺秀·改',
                            hpp_guixiux_info: '锁定技，每回合限一次，结束阶段或当你濒死时，若你的体力值为：奇数，你摸一张牌；偶数，你回复1点体力。',
                            hpp_cunsi: '存嗣',
                            hpp_cunsi_info: '限定技，你可以令一名其他角色获得“勇决”，你失去所有体力并令其摸X张牌（X为你失去的体力数+1）；然后“闺秀”改为濒死时也可以发动。',
                            hpp_yongjue: '勇决',
                            hpp_yongjue_info: '你可以在其他角色出牌阶段使用的第一张【杀】结算后获得之；当你受到【杀】的伤害时，你可以弃置一张点数大于等于其的【杀】并防止此伤害。',
                            hpp_mizhu: '欢杀糜竺',
                            hpp_ziyuan: '资援',
                            hpp_ziyuan_info: '出牌阶段限一次，你可以将任意张手牌交给一名其他角色，若点数之和大于等于13，令该角色回复1点体力；若点数之和小于等于13，则你摸1张牌。',
                            hpp_jugu: '巨贾',
                            hpp_jugu_info: '锁定技，你的手牌上限+X。你的回合开始时，你选择至多X名角色，视为对这些角色使用了一张【五谷丰登】。（X为你的体力上限）',
                            // P
                            hpp_panfeng: '欢杀潘凤',
                            hpp_kuangfu: '狂斧',
                            hpp_kuangfu_info: '出牌阶段限一次，你可以弃置场上一张装备牌，然后视为使用一张【杀】（不计入次数，无视距离）。若此【杀】造成了伤害，你摸两张牌。',
                            hpp_pangde: '欢杀庞德',
                            hpp_jianchu: '鞬出',
                            hpp_jianchu_info: '当你使用【杀】指定一个目标后，你弃置其一张牌，若以此法被弃置的牌：不为基本牌，你摸一张牌，且该角色不能使用【闪】；为基本牌，此杀不计入出杀次数。',
                            hpp_pangtong: '欢杀庞统',
                            hpp_lianhuan: '连环',
                            hpp_lianhuan_info: '出牌阶段开始时，你可以选择最多2名角色横置或重置，如果选择自己，你额外摸一张牌。',
                            hpp_niepan: '涅槃',
                            hpp_niepan_info: '限定技，当你处于濒死状态时，你可以弃置你的区域里的所有牌，然后复原你的武将牌，摸三张牌，将体力回复至3点。',
                            hpp_panjun: '欢杀潘濬',
                            hpp_guanwei: '观微',
                            hpp_guanwei_info: '每名角色的回合限一次，出牌阶段结束时，若其于此回合内使用过重复花色的牌，则你可弃置一张牌。其摸两张牌，获得一个额外出牌阶段。',
                            hpp_gongqing: '公清',
                            hpp_gongqing_info: '锁定技，当你受到伤害时，若伤害来源攻击范围小于3，则你只受到1点伤害；若伤害来源攻击范围大于等于3，你摸一张牌。',
                            // Q
                            hpp_qinmi: '欢杀秦宓',
                            hpp_zhuandui: '专对',
                            hpp_zhuandui_info: '当你使用【杀】指定目标后，你可以与其拼点，若你赢，其不能响应此【杀】；当你成为【杀】的目标后，你可以与其拼点，若你赢，此【杀】对你无效；若你拼点赢，则摸一张牌。',
                            hpp_quyi: '欢杀麴义',
                            hpp_fuqi: '伏骑',
                            hpp_fuqi_info: '锁定技，与你距离为2以内的其他角色不能使用或打出牌响应你使用的牌；且被你造成伤害的其他角色的非锁定技失效，到其他角色的回合内解除。',
                            hpp_jiaozi: '骄恣',
                            hpp_jiaozi_info: '锁定技，当你造成伤害时，若你的手牌数为全场最多，则此伤害+1。',
                            // S
                            hpp_shamoke: '欢杀沙摩柯',
                            hpp_jili: '蒺藜',
                            hpp_jili_info: '当你于一回合内使用或打出第X张牌时，你可以摸X张牌（X为你的攻击范围）。你的回合结束时，你可以弃一张牌然后摸一张牌。',
                            hpp_simayi: '欢杀司马懿',
                            hpp_fankui: '反馈',
                            hpp_fankui_info: '当你受到1点伤害后，你可以进行判定，红桃，你获得场上任意其他角色的一张牌；其他花色，你获得伤害来源的一张牌。',
                            hpp_guicai: '鬼才',
                            hpp_guicai_info: '任何判定牌生效前，你可以打出一张牌代替之，然后若此牌为，红桃，你回复1点体力，若此牌为梅花，你摸两张牌。',
                            hpp_sunce: '欢杀孙策',
                            hpp_jiang: '激昂',
                            hpp_jiang_info: '当你使用【决斗】或【杀】指定目标后，或成为【决斗】或【杀】的指定目标后，你可以摸一张牌。',
                            hpp_hunzi: '魂姿',
                            hpp_hunzi_info: '觉醒技，若你的体力值为1，你减1点体力上限，然后获得“英姿”和“英魂”。',
                            hpp_zhiba: '制霸',
                            hpp_zhiba2: '制霸',
                            hpp_zhiba_info: '主公技，其他吴势力角色可以交给你一张【决斗】或【杀】。',
                            hpp_sundeng: '欢杀孙登',
                            hpp_kuangbi: '匡弼',
                            hpp_kuangbi_info: '出牌阶段限一次，你可以令一名有牌的其他角色将其一至三张牌置于你的武将牌上，然后你可以令其摸等量的牌。你的回合开始时，你获得武将牌上的所有牌，当你失去手牌中最后一张“匡弼牌”时，你摸一张牌并回复一点体力。',
                            hpp_sunhao: '欢杀孙皓',
                            hpp_canshi: '残蚀',
                            hpp_canshi2: '残蚀',
                            hpp_canshi_info: '摸牌阶段，你可以额外摸X张牌（X为已受伤的角色数），然后本回合你使用【杀】时，弃置一张牌。',
                            hpp_chouhai: '仇海',
                            hpp_chouhai_info: '锁定技，当你受到【杀】的伤害时，若你没有手牌和装备，此伤害+1。',
                            hpp_sunjian: '欢杀孙坚',
                            hpp_yinghun: '英魂',
                            hpp_yinghun_info: '准备阶段，你可以选择一名其他角色并选择一项：1.令其摸X张牌；2.令其摸一张牌，然后弃置X张牌（X为你已损失的体力值）。',
                            hpp_wulie: '武烈',
                            hpp_wulie_info: '限定技，你的回合开始前，你可以失去任意点体力，自己获得等量的“烈”标记，然后至多令等量的其他角色各获得1枚“烈”标记；当有“烈”标记的角色受到伤害时，可以弃置1枚标记并防止该伤害。',
                            hpp_wulie2: '武烈',
                            hpp_wulie2_info: '移去1枚「烈」，然后防止此伤害',
                            hpp_sunliang: '欢杀孙亮',
                            hpp_kuizhu: '溃诛',
                            hpp_kuizhu_info: '弃牌阶段结束后，你可以选择一项：令至多X名角色各摸一张牌；对任意名体力值之和≤X的角色各造成1点伤害（X为你此阶段弃置的牌数）。',
                            hpp_chezheng: '掣政',
                            hpp_chezheng_info: '锁定技，你的出牌阶段内，攻击范围内不包含你的角色不能成为你【杀】的目标。出牌阶段结束时，你摸与这些角色数相同的牌且至少为2。',
                            hpp_lijun: '立军',
                            hpp_lijun_info: '主公技，每个出牌阶段限一次，其他吴势力角色于其出牌阶段使用【杀】结算结束后，你摸一张牌，然后你可以令其摸一张牌。',
                            hpp_sunluban: '欢杀孙鲁班',
                            hpp_zenhui: '谮毁',
                            hpp_zenhui_info: '出牌阶段限一次，当你使用【杀】或普通锦囊牌指定唯一目标时，你可令其选择一项：1.交给你一张牌；2.失去1点体力。',
                            hpp_jiaojin: '骄矜',
                            hpp_jiaojin_info: '当你成为【杀】或普通锦囊牌的目标后，你可以弃置一张手牌，然后此牌对你无效。',
                            hpp_sunluyu: '欢杀孙鲁育',
                            hpp_meibu: '魅步',
                            hpp_meibu_info: '其他角色的出牌阶段开始时，你可以弃置一张牌，令该角色于本回合内拥有“止息”。你获得其因“止息”弃置的牌。',
                            hpp_sunqian: '欢杀孙乾',
                            hpp_qianya: '谦雅',
                            hpp_qianya_info: '当你成为锦囊牌的目标后，你可以将任意张手牌交给一名其他角色，并从牌堆中获得一张非装备牌。',
                            hpp_sunquan: '欢杀孙权',
                            hpp_zhiheng: '制衡',
                            hpp_zhiheng_info: '出牌阶段限一次，你可以弃置任意张牌，然后摸等量的牌。若你以此法弃置了所有的手牌，则额外摸一张牌；若你以此法获得的牌不包含延时锦牌，则本同合此技能使用次数+1；若你本回合第二次以此法获得的牌全是基本牌，则本回合此技能使用次数再+1。',
                            hpp_jiuyuan: '救援',
                            hpp_jiuyuan_info: '主公技，其他吴势力角色于其回合内回复体力时，该角色可以改为令你回复1点体力，然后其摸一张牌。当你处于濒死状态时，其他吴势力武将对你使用的【桃】回复的体力+1。',
                            hpp_sunshangxiang: '欢杀孙尚香',
                            hpp_jieyi: '结谊',
                            hpp_jieyi_info: '出牌阶段限一次，选择一名其他角色，给予一张手牌或将一张装备牌置入其装备区，然后自己回复1点体力，并摸一张牌，若其体力小于你，你可令其回复1点体力；反之，可令其摸一张牌。',
                            // T
                            hpp_taishici: '欢杀太史慈',
                            hpp_tianyi: '天义',
                            hpp_tianyi_info: '出牌阶段开始时，你可以选择一项效果发动：1、本回合出杀次数+1，杀造成伤害后回复1点体力；2、摸一张牌，本回合杀无距离限制且无视防具。',
                            hpp_tangji: '欢杀唐姬',
                            hpp_kangge: '抗歌',
                            hpp_kangge_info: '你的回合开始时，你选择一名其他角色：该角色于其回合外获得手牌时，你摸等量的牌（每回合最多摸3张）；该角色进入濒死状态时，你可以令其将体力回复至1点（每轮限一次）；场上同时仅能存在一名“抗歌角色”。',
                            hpp_jielie: '节烈',
                            hpp_jielie_info: '当你受到伤害时，你可以防止此伤害并选择1种花色，然后你失去1点体力，令“抗歌”角色从弃牌堆中随机获得X张此花色的牌（X为伤害值）。',
                            // W
                            hpp_wangji: '欢杀王基',
                            hpp_qizhi: '奇制',
                            hpp_qizhi_info: '当你于回合内使用基本牌或锦囊牌指定目标后，你可以弃置不是此牌目标的一名角色的一张牌。若弃置的牌与使用的牌类型相同，你摸一张牌；类型不同，其摸一张牌。',
                            hpp_jinqu: '进趋',
                            hpp_jinqu_info: '你可以跳过弃牌阶段并摸两张牌。若如此做，你将手牌弃置至X张（X为你于此回合内发动过“奇制”的次数+1）。',
                            hpp_wangping: '欢杀王平',
                            hpp_feijun: '飞军',
                            hpp_feijun_info: '出牌阶段限一次，你可以弃置一张牌，然后选择一项：令一名其他角色交给你一张牌；或令一名其他角色弃置一张装备区的牌。',
                            hpp_binglue: '兵略',
                            hpp_binglue_info: '锁定技，当你发动“飞军”时，摸1张牌，若目标与你之前指定的目标均不相同，则你再摸X张牌（X为场上成为过你发动“飞军”目标的存活角色数）。',
                            hpp_wangrong: '欢杀王荣',
                            hpp_minsi: '敏思',
                            hpp_minsi2: '敏思',
                            hpp_minsi_info: '出牌阶段限1次，你可以弃置任意张点数之和为13的牌，并摸2倍弃置牌数量的牌。本回合以此法获得的牌，无距离限制且不计入手牌上限。',
                            hpp_jijing: '吉境',
                            hpp_jijing_info: '你受到伤害后可以执行1次判定，可选择弃置任意张点数之和大于等于判定结果点数的牌并回复1点体力。',
                            hpp_wanniangongzhu: '欢杀万年公主',
                            hpp_zhenge: '枕戈',
                            hpp_zhenge_info: '准备阶段，你可以选择一名角色，该角色本局游戏的攻击范围+1（至多+5）。若此时全场角色都在该角色的攻击范围内，你可以令其视为对另一名角色使用了一张【杀】。',
                            hpp_xinghan: '兴汉',
                            hpp_xinghan_info: '锁定技，每回合的第一张【杀】造成伤害后，若此【杀】的使用者是你对其发动过“枕戈”的角色，你摸一张牌。若你的手牌数不是全场唯一最多的，则改为摸X张牌（X为该角色的攻击范围且最多为5）。',
                            hpp_weiyan: '欢杀魏延',
                            hpp_kuanggu: '狂骨',
                            hpp_kuanggu_info: '当你对一名角色造成1点伤害后，你可以回复1点体力或摸一张牌。',
                            hpp_qimou: '奇谋',
                            hpp_qimou_info: '限定技，出牌阶段，你可以失去任意点体力，摸1张牌，然后本回合你计算与其他角色的距离-X且你可以多使用X张【杀】（X为你以此法失去的体力数）。',
                            hpp_wangyi: '欢杀王异',
                            hpp_zhenlie: '贞烈',
                            hpp_zhenlie_info: '当你成为【杀】或普通锦囊的目标后，你可以失去1点体力使此牌对你无效，然后你弃置使用者一张牌。',
                            hpp_miji: '秘计',
                            hpp_miji_info: '结束阶段，你可以摸X张牌（X为你已损失的体力值），然后你可以将等量的手牌交给其他角色。',
                            hpp_wenqin: '欢杀文钦',
                            hpp_huiqi: '彗企',
                            hpp_huiqi_info: '觉醒技，每回合结束后，若此回合包括你仅3名角色成为牌的目标，你回复1点体力获得“偕举”。',
                            hpp_xieju: '偕举',
                            hpp_xieju_info: '出牌阶段限一次，你可以选择任意名本回合成为过牌的目标的角色，令其可以各将一张黑牌当【杀】使用。',
                            hpp_wuguotai: '欢杀吴国太',
                            hpp_ganlu: '甘露',
                            hpp_ganlu_info: '锁定技，出牌阶段开始时，你选择一项：1、移动场上的一张装备牌或交换场上两张副类别相同的装备牌的位置；2、摸一张牌。',
                            hpp_buyi: '补益',
                            hpp_buyi_info: '每回合限三次，有角色进入濒死状态时，你可以展示该角色一张手牌，若此牌是基本牌，该角色弃置此牌并回复1点体力。',
                            hpp_wuxian: '欢杀吴苋',
                            hpp_fumian: '福绵',
                            hpp_fumian_info: '准备阶段，你可以选择一项：1.摸牌阶段多摸一张牌；2.使用红色牌可以多选择一个目标。若与你上回合选择的选项不同，则该选项数值+1并复原此技能。',
                            hpp_daiyan: '怠宴',
                            hpp_daiyan_info: '结束阶段，你可以令一名角色从牌堆中获得一张红桃基本牌，然后若其于上回合未成为过该技能目标，你摸一张牌。',
                            hpp_wuyi: '欢杀吴懿',
                            // X
                            hpp_xiahouba: '欢杀夏侯霸',
                            hpp_baobian: '豹变',
                            hpp_baobian_info: '锁定技，当你受到伤害后，你依次获得以下一个技能：“挑衅”、“咆哮”、“神速”。',
                            hpp_xiahoudun: '欢杀夏侯惇',
                            hpp_qingjian: '清俭',
                            hpp_qingjian_info: '每回合限一次，当你于摸牌阶段外获得牌后，你可以展示任意张牌并交给一名其他角色，然后你摸一张牌。',
                            hpp_xiahoujie: '欢杀夏侯杰',
                            hpp_liedan: '裂胆',
                            hpp_liedan_info: '锁定技，其他角色的准备阶段，你与其依次比较双方的手牌数，体力值与装备区牌数，你每有一项大于该角色则摸一张牌。若均大于该角色，你加1点体力上限（你的体力上限最大为8）；若小于等于，你失去1点体力并获得一枚“裂”标记。准备阶段，若“裂”大于等于5，你死亡。',
                            hpp_zhuangdan: '壮胆',
                            hpp_zhuangdan_mark: '壮胆',
                            hpp_zhuangdan_info: '锁定技，其他角色的回合结束时，若你的手牌数是全场唯一最多的，【裂胆】失效直到你回合结束。',
                            hpp_xiahoulingnv: '欢杀夏侯令女',
                            hpp_weilie: '炜烈',
                            hpp_weilie_info: '每局游戏限一次，出牌阶段，你可以弃置一张牌令一名角色回复1点体力，摸一张牌。你每次发动“浮萍”记录牌名时，此技能使用次数+1。',
                            hpp_xiahoushi: '欢杀夏侯氏',
                            hpp_qiaoshi: '樵拾',
                            hpp_qiaoshi_info: '其他角色的结束阶段，若其手牌数大于等于你，你可以与其各摸一张牌。',
                            hpp_yanyu: '燕语',
                            hpp_yanyu_info: '出牌阶段，你可以重铸【杀】；回合结束时，若你与出牌阶段内重铸过【杀】，则你可以令一名角色摸2张牌，若该角色是你，则改为摸1张。',
                            hpp_xiahouyuan: '欢杀夏侯渊',
                            hpp_shensu: '神速',
                            hpp_shensu_info: '你可以选择至多三项：1.跳过判定阶段和摸牌阶段；2.跳过出牌阶段；3.跳过弃牌阶段并翻面。你每选择一项，视为你使用一张无距离限制的雷【杀】。',
                            hpp_shebian: '设变',
                            hpp_shebian_info: '当你翻面时，你可以移动场上一张装备牌然后回复1点体力。',
                            hpp_xiaoqiao: '欢杀小乔',
                            hpp_tianxiang: '天香',
                            hpp_tianxiang2: '天香',
                            hpp_tianxiang_info: '当你受到伤害时，可以弃置一张红桃手牌，选择一名角色代替你承受此伤害，若如此做，你选择一项：1.其摸一张牌；2.令其摸X张牌（X为其损失的体力值且至多为5）。',
                            hpp_hongyan: '红颜',
                            hpp_hongyan_info: '锁定技，你的黑桃牌视为红桃牌，若你的装备区有红桃牌，你的手牌上限等于体力上限。',
                            hpp_xinxianying: '欢杀辛宪英',
                            hpp_zhongjian: '忠鉴',
                            hpp_zhongjian_info: '出牌阶段限一次，你可以选择一名没有忠鉴的角色并选择一项：1.该角色下次造成伤害后，其弃置两张牌；2.该角色下次受到伤害后，该角色摸两张牌。忠鉴触发后角色身上的忠鉴效果消失且你摸一张牌。',
                            hpp_caishi: '才识',
                            hpp_caishi_info: '摸牌阶段结束时，若你此阶段的牌花色相同，则“忠鉴”改为“出牌阶段限两次”，但不能选择相同的角色；若花色不同，你可以弃置1张牌回复1点体力。',
                            hpp_xizhicai: '欢杀戏志才',
                            hpp_chouce: '筹策',
                            hpp_chouce_info: '当你受到1点伤害后，你可以判定，若结果为：黑色，你获得一名角色区域里的一张牌；红色，令一名角色摸一张牌（先辅的角色摸两张）。',
                            hpp_xuhuang: '欢杀徐晃',
                            hpp_duanliang: '断粮',
                            hpp_duanliang1: '断粮',
                            hpp_duanliang_info: '你可以将一张黑色的基本牌或装备牌当【兵粮寸断】使用；你对手牌数大于等于你的角色使用【兵粮寸断】无距离限制。',
                            hpp_jiezi: '截辎',
                            hpp_jiezi_info: '锁定技，每轮限两次，一名其他角色跳过摸牌阶段后，你摸两张牌。',
                            hpp_xunyou: '欢杀荀攸',
                            hpp_qice: '奇策',
                            hpp_qice_info: '出牌阶段限一次，你可以将任意张手牌当任意一张普通锦囊牌使用。',
                            hpp_zhiyu: '智愚',
                            hpp_zhiyu_info: '当你受到伤害后，你可以摸两张牌再弃一张牌，然后展示所有手牌，若颜色均相同，你可以让伤害来源弃置到与你手牌数相同。',
                            hpp_xunyu: '欢杀荀彧',
                            hpp_quhu: '驱虎',
                            hpp_quhu_backup: '驱虎',
                            hpp_quhu_info: '出牌阶段限一次，你可以选择一项：1、弃置两张手牌，对一名其他角色造成1点伤害；2、对自己造成1点伤害，摸一张牌。',
                            hpp_jieming: '节命',
                            hpp_jieming_info: '当你受到1点伤害后，你可以令一名角色将手牌摸至X张（X为其体力上限且最多为4）。',
                            hpp_xurong: '欢杀徐荣',
                            hpp_xusheng: '欢杀徐盛',
                            hpp_pojun: '破军',
                            hpp_pojun2: '破军',
                            hpp_pojun_info: '当你使用【杀】指定目标后，你可以将其的至多X张牌（X为其体力值）移出游戏直到回合结束：若其中有装备牌，弃置其中一张；若其中有【闪】，你摸一张牌。',
                            hpp_xushi: '欢杀徐氏',
                            hpp_wengua: '问卦',
                            hpp_wengua2: '问卦',
                            hpp_wengua_info: '所有角色出牌阶段限一次，其可以交给你一张牌并展示，若此牌是锦囊你加1点体力上限（你的体力上限最大为5）并回复1点体力，然后你可以将此牌置于牌堆顶或牌堆底，你与其从另一端摸一张牌。',
                            hpp_fuzhu: '伏诛',
                            hpp_fuzhu_info: '一名角色的结束阶段，若牌堆剩余牌数小于等于你体力上限的十倍，则你可以依次对其使用牌堆中所有的【杀】（不能超过游戏人数），然后洗牌。',
                            hpp_xushu: '欢杀徐庶',
                            hpp_jujian: '举荐',
                            hpp_jujian_info: '准备阶段和结束阶段，你可以弃置一张非基本牌并令一名角色选择一项：1.摸两张牌；2.回复1点体力；3.复原武将牌。',
                            hpp_xuyou: '欢杀许攸',
                            hpp_chenglue: '成略',
                            hpp_chenglue_info: '出牌阶段限一次，你可以摸一张牌，然后弃置一张手牌。若如此做，直到本回合结束，你使用与弃置牌相同花色的牌无距离和次数限制。',
                            hpp_xuzhu: '欢杀许诸',
                            hpp_luoyi: '裸衣',
                            hpp_luoyi_info: '摸牌阶段，你可以少摸一张牌，然后本回合你使用【杀】或【决斗】造成的伤害+1。',
                            hpp_huchi: '虎痴',
                            hpp_huchi_info: '回合结束时，若你的手牌数小于2，则摸至2张；且当你对目标出杀被闪时，你获得一枚“痴”。出牌阶段限一次，可以弃置所有“痴”，摸同等数量的牌。',
                            // Y
                            hpp_yanfuren: '欢杀严夫人',
                            hpp_channi: '谗逆',
                            hpp_channi_info: '出牌阶段限一次，你可以交给一名其他角色任意张手牌，然后该角色可以将至多等量的手牌当做1张【决斗】使用。其使用此【决斗】造成伤害后，其摸X张牌（X为其当【决斗】牌的张数），其因此【决斗】受到伤害时，你可以弃置所有手牌（至少1张）并防止此伤害。',
                            hpp_nifu: '匿伏',
                            hpp_nifu_info: '锁定技，每个回合结束时，你将手牌摸至三张。',
                            hpp_yangxiu: '欢杀杨修',
                            hpp_jilei: '鸡肋',
                            hpp_jilei_info: '当你受到伤害后，你可以声明一种牌的类别。你获得一张该类别的牌，且伤害来源不能使用、打出或弃置你声明的此类手牌直到其下回合开始。',
                            hpp_yanjun: '欢杀严畯',
                            hpp_guanchao: '观潮',
                            hpp_guanchao_info: '出牌阶段开始时，你可以选择一项直到回合结束：1.本回合你的出杀次数+1，当你使用牌时，若你此阶段使用过的所有牌的点数为递增，你摸一张牌；2.本回合你与其他角色距离-1，当你使用牌时，若你此阶段使用过的所有牌的点数为递减，你摸一张牌。',
                            hpp_xunxian: '逊贤',
                            hpp_xunxian_info: '每名角色的回合限一次，你使用或打出的牌置入弃牌堆时，你可以将之交给一名其他角色。',
                            hpp_yanliangwenchou: '欢杀颜良文丑',
                            hpp_shuangxiong: '双雄',
                            hpp_shuangxiong_info: '摸牌阶段，你可以改为展示牌堆顶的三张牌，你获得其中相同颜色的牌，然后本回合你可以将与此牌颜色不同的一张手牌当【决斗】使用。每回合限3次；当你因“双雄”受到伤害后，你可以获得此次【决斗】中其他角色打出的【杀】。',
                            hpp_yanyan: '欢杀严颜',
                            hpp_juzhan: '拒战',
                            hpp_juzhan_info: '当你成为其他角色【杀】的目标后，你可以与其各摸一张牌，然后其本回合不能再对你使用牌；当你使用【杀】指定一名角色为目标后，你可以获得其一张牌，然后你本回合不能再对其使用红色【杀】。',
                            hpp_yinfuren: '欢杀尹夫人',
                            hpp_yongbi: '拥嬖',
                            hpp_yongbi_info: '限定技。出牌阶段，你可将任意手牌交给一名其他角色，然后“媵予”改为结束阶段也可以发动。根据其中牌的花色数量，你与其永久获得以下效果：至少两种，手牌上限+2；至少三种，受到大于1点的伤害时伤害-1。',
                            hpp_yuanshao: '欢杀袁绍',
                            hpp_luanji: '乱击',
                            hpp_luanji_info: '你可以将两张手牌当【万箭齐发】使用（不能使用本回合此前发动该技能时已用过的花色）；若没有角色受到你使用的【万箭齐发】的伤害，你摸等同于此【万箭齐发】指定目标数量的牌。',
                            hpp_xueyi: '血裔',
                            hpp_xueyi_draw: '血裔',
                            hpp_xueyi_info: '主公技，游戏开始时，你获得X个“裔”标记（X为群势力角色数）；你的出牌阶段或濒死时，你可以移除1个“裔”，然后回复1点体力并摸一张牌；你的手牌上限+X（X为“裔”数的两倍）。',
                            hpp_yuanshu: '欢杀袁术',
                            hpp_weidi: '伪帝',
                            hpp_weidi_info: '弃牌阶段结束时，你可以选择一张弃置的牌交给一名其他角色。',
                            hpp_yuji: '欢杀于吉',
                            hpp_guhuo: '蛊惑',
                            hpp_guhuo_info: '你使用的【杀】或伤害锦囊牌结算后，若没有造成伤害，则将此牌移出游戏，你摸一张牌，并在回合结束后将此牌归还；若造成伤害，你摸一张牌，每回合限一次。',
                            hpp_yujin: '欢杀于禁',
                            hpp_yizhong: '毅重',
                            hpp_yizhong_info: '锁定技，当你的防具栏为空时，梅花花色的杀对你无效。',
                            // Z
                            hpp_zhangbao: '欢杀张宝',
                            hpp_zhoufu: '咒缚',
                            hpp_zhoufu2: '咒缚',
                            hpp_zhoufu_info: '出牌阶段限一次，你可以用一张手牌对一名其他角色施“咒”或移除一名角色的“咒”。当有“咒”的角色判定时，将“咒”作为判定牌；一名角色的回合结束时，你可令本回合移除过“咒”的角色各失去1点体力（每个角色只能同时拥有一个“咒”）。',
                            hpp_yingbing: '影兵',
                            hpp_yingbing_info: '锁定技，有“咒”的角色使用与“咒”颜色相同的牌时，你摸一张牌；若这是你第二次因该“咒”摸牌，则移去该“咒”。',
                            hpp_zhangchunhua: '欢杀张春华',
                            hpp_jueqing: '绝情',
                            hpp_jueqing_info: '你即将造成的伤害视为失去体力。',
                            hpp_shangshi: '伤逝',
                            hpp_shangshi_info: '当你的手牌数小于X时，你将手牌摸至X张（X为你已损失的体力值且至少为1）。',
                            hpp_zhangfei: '欢杀张飞',
                            hpp_tishen: '替身',
                            hpp_tishen_info: '回合外，获得所有对你使用且未对你造成伤害的【杀】。出牌阶段你使用的杀被闪抵消后，则你本阶段使用的下一张【杀】不可被响应且造成的伤害+1。',
                            hpp_zhanghe: '欢杀张郃',
                            hpp_qiaobian: '巧变',
                            hpp_qiaobian_info: '你可以弃置一张手牌并跳过一个阶段（准备阶段和结束阶段除外）：若跳过摸牌阶段，你可以获得至多两名角色的各一张手牌；若跳过出牌阶段，你可以移动场上的一张牌。回合结束时，若你跳过了至少三个阶段，则你摸两张牌。',
                            hpp_zhangji: '欢杀张济',
                            hpp_lueming: '掠命',
                            hpp_lueming_info: '出牌阶段限一次，你可以选择一名装备区装备少于等于你的其他角色，令其选择一个点数，然后你进行判定：若点数相同，你对其造成2点伤害；不同，你随机获得其区域内的一张牌。',
                            hpp_tunjun: '屯军',
                            hpp_tunjun_info: '限定技，出牌阶段，你可以选择一名角色，令其随机使用牌堆中的X+1张不同类型的装备牌（不替换已有装备，X为你发动“掠命”的次数）。',
                            hpp_zhangjiao: '欢杀张角',
                            hpp_leiji: '雷击',
                            hpp_leiji_info: '当你使用【闪】或【闪电】时，你可以令一名其他角色判定，若结果为：黑桃，你对其造成2点伤害；梅花，你回复1点体力，然后对其造成1点伤害。你的手牌上限+2。',
                            hpp_guidao: '鬼道',
                            hpp_guidao_info: '当一名角色的判定牌生效前，你可以打出一张黑色牌替换之；若你打出的牌是黑桃2~9，则你摸一张牌。',
                            hpp_huangtian: '黄天',
                            hpp_huangtian2: '黄天',
                            hpp_huangtian4: '黄天',
                            hpp_huangtian_info: '主公技。其他群势力角色的出牌阶段限一次，该角色可以将一张【闪】、【闪电】或黑桃手牌交给你；你获得其他群势力角色使用或打出的闪，每回合限一次。',
                            hpp_zhangliang: '欢杀张梁',
                            hpp_jijun: '集军',
                            hpp_jijun_info: '锁定技，当你使用杀或普通锦囊牌指定唯一目标时，或被杀指定为唯一目标时，进行判定，若判定牌为黑色，将判定牌置于你的武将牌上，称为“方”。',
                            hpp_fangtong: '方统',
                            hpp_fangtong_info: '你的回合结束时，你可以选择一项效果发动：1、弃置1枚“方”，摸一张牌；2、弃置2枚“方”，回复1点体力；3、弃置3枚“方”，选择一名角色对其造成2点雷电伤害。',
                            hpp_zhangliao: '欢杀张辽',
                            hpp_zhengbing: '整兵',
                            hpp_zhengbing_info: '通过突袭获得的牌不计入手牌上限；且可以被重铸；最后一张突袭牌被重铸时再摸一张牌。',
                            hpp_zhangsong: '欢杀张松',
                            hpp_xiantu: '献图',
                            hpp_xiantu_info: '其他角色的出牌阶段开始时，你可以摸两张牌，然后将两张牌交给该角色。此阶段结束时，若其没有造成过伤害，则你失去1点体力。',
                            hpp_zhangxingcai: '欢杀张星彩',
                            hpp_qiangwu: '枪舞',
                            hpp_qiangwu_info: '出牌阶段限一次，你可以进行判定并获得判定牌，然后本回合你使用点数小于判定结果的【杀】无距离限制，点数大于判定结果的【杀】无次数限制。',
                            hpp_zhangxiu: '欢杀张绣',
                            hpp_zhangyao: '欢杀张媱',
                            hpp_yuanyu: "怨语",
                            hpp_yuanyu_info: "出牌阶段限一次，你可以摸一张牌并将一张手牌置于武将牌上，称为“怨”。然后选择一名其他角色，你与其的弃牌阶段开始时，或该角色每次造成1点伤害后，其须放置一张“怨”直到你触发“夕颜”。",
                            hpp_xiyan: "夕颜",
                            hpp_xiyan_info: "每次增加“怨”时，若“怨”的花色数达到4种，你可以获得所有“怨”。然后若此时是你的回合，你的“怨语”视为未发动过，本回合手牌上限+4且使用牌无次数限制；若不是你的回合，你可令当前回合角色本回合手牌上限-4且本回合不能使用基本牌。",
                            hpp_zhangzhaozhanghong: '欢杀张昭张纮',
                            hpp_zhijian: '直谏',
                            hpp_zhijian_info: '出牌阶段，你可以将手牌中的一张装备牌置于其他角色的装备区里，然后摸一张牌。',
                            hpp_guzheng: '固政',
                            hpp_guzheng_info: '其他角色的弃牌阶段结束时，你可以令其获得弃牌中的一张曾是于此阶段内弃置的【手牌】，然后你可以获得其余的弃牌。如果其有弃牌且你没有通过此法获得牌，则你摸一张牌。',
                            hpp_zhaoxiang: '欢杀赵襄',
                            hpp_fanghun: '芳魂',
                            hpp_fanghun_info: '当你使用【杀】指定目标后或成为【杀】的目标后，你获得1个“梅影”标记；你可以移去1个“梅影”标记来发动“龙胆”并摸一张牌。',
                            hpp_fuhan: '扶汉',
                            hpp_fuhan_info: '限定技，回合开始时，你可以移去所有“梅影”标记并摸等量的牌，然后从X张（X为存活人数且至少为4）蜀势力武将牌中选择并获得至多两个技能（限定技、觉醒技、隐匿技、使命技、主公技除外）。若此时你是体力值最低的角色，你回复1点体力。',
                            hpp_zhaoyun: '欢杀赵云',
                            hpp_longdan: '龙胆',
                            hpp_longdan_info: '你可以将一张【杀】当【闪】、【闪】当【杀】使用或打出。',
                            hpp_yajiao: '涯角',
                            hpp_yajiao_info: '当你于回合外使用或打出手牌时，你可以展示牌堆顶的一张牌并将其交给一名角色；当你于自己回合内使用过【龙胆】，本回合结束阶段摸一张牌。',
                            hpp_zhenji: '欢杀甄姬',
                            hpp_luoshen: '洛神',
                            hpp_luoshen_info: '准备阶段，你可以进行判定，若结果为黑色，你获得此牌，然后你可以重复此流程；红色，获得此牌，然后结束此流程。',
                            hpp_zhonghui: '欢杀钟会',
                            hpp_quanji: '权计',
                            hpp_quanji_info: '当你受到1点伤害后，你可以摸两张牌；你的出牌阶段，可以将任意张手牌置于武将牌上，称为“权”；你的手牌上限+X（X为“权”的数量且最大为5）。',
                            hpp_paiyi: '排异',
                            hpp_paiyi_backup: '排异',
                            hpp_paiyi_info: '出牌阶段限一次，你可以移去1张“权”，令1名角色摸2张牌。若获得牌的角色手牌比你多，则你对其造成1点伤害。',
                            hpp_zhongyao: '欢杀钟繇',
                            hpp_huomo: '活墨',
                            hpp_huomo_info: '当你需要使用基本牌时，你可以将一张不为基本牌的黑色牌置于牌堆顶。若如此做，你视为使用此基本牌，每回合限两次。',
                            hpp_zuoding: '佐定',
                            hpp_zuoding_info: '任意角色在其出牌阶段内使用黑桃牌时，若没有角色受到过伤害，你可以令其中的一个目标角色摸一张牌。',
                            hpp_zhoucang: '欢杀周仓',
                            hpp_zhongyong: '忠勇',
                            hpp_zhongyong_info: '当你使用的【杀】结算完毕后，你可以将此【杀】或目标角色使用的【闪】交给除该角色以外的一名其他角色，若其以此法获得的牌中有：红色，其可以对你攻击范围内的角色使用一张【杀】；黑色，你与其各摸一张牌。',
                            hpp_daopu: '刀仆',
                            hpp_daopu_info: '若你的你的装备区没有武器牌，视为装备【青龙偃月刀】；若你的装备区有【青龙偃月刀】，则你的红色【杀】伤害+1。',
                            hpp_zhoufang: '欢杀周鲂',
                            hpp_youdi: '诱敌',
                            hpp_youdi_info: '结束阶段，你可以令一名其他角色弃置你一张手牌，若弃置的牌不是【杀】，则你获得其一张牌并摸一张牌；若弃置的牌不是黑色，则你增加1点体力上限（最多为5）。',
                            hpp_zhoufei: '欢杀周妃',
                            hpp_liangyin: '良姻',
                            hpp_liangyin_info: '当有牌移出游戏时，你可以令一名角色摸一张牌；当有牌从游戏外加入任意角色的手牌时，你可以令一名角色弃置一张牌。',
                            hpp_zhoutai: '欢杀周泰',
                            hpp_buqu: '不屈',
                            hpp_buqu_info: '锁定技。当你受到伤害或失去体力时，你获得1点“创”，并防止此伤害或体力流失。当获得4点“创”后，不再发动该技能。你每获得一点“创”，手牌上限+1。',
                            hpp_qingchuang: '清创',
                            hpp_qingchuang_info: '出牌阶段限一次，你可以弃置一张【桃】或者【酒】并移去身上的1点“创”，然后摸1张牌。',
                            hpp_zhouyu: '欢杀周瑜',
                            hpp_yingzi: '英姿',
                            hpp_yingzi_info: '锁定技，摸牌阶段，你多摸一张牌；你的手牌上限等于你的体力上限。',
                            hpp_fanjian: '反间',
                            hpp_fanjian_info: '出牌阶段开始时，你可以选择一名其他角色，令其摸一张牌然后对其造成1点伤害。',
                            hpp_zhugeguo: '欢杀诸葛果',
                            hpp_qirang: '祈禳',
                            hpp_qirang_info: '当你使用一张装备牌时，你可以从牌堆里获得一张锦囊牌，你使用非延时锦囊牌指定唯一目标时，可以额外增加一个目标。',
                            hpp_yuhua: '羽化',
                            hpp_yuhua_info: '锁定技，弃牌阶段，你的锦囊牌和装备牌不计入手牌数。结束阶段，你观看牌堆顶的2张牌，将一张返回牌堆顶或牌堆底，并获得剩余的牌。',
                            hpp_zhugejin: '欢杀诸葛瑾',
                            hpp_hongyuan: '弘援',
                            hpp_hongyuan_info: '摸牌阶段，你可以令至多两名角色各摸一张牌。',
                            hpp_zhugeke: '欢杀诸葛恪',
                            hpp_aocai: '傲才',
                            hpp_aocai_info: '你的回合外，当你需要出基本牌时，你可以观看牌堆顶的3张牌（若你没有手牌，改为四张），并且可以出其中的基本牌。',
                            hpp_duwu: '黩武',
                            hpp_duwu_info: '出牌阶段，你可以选择你攻击范围内的一名其他角色并弃置X张牌（X为该角色的体力值），然后对其造成1点伤害。若该角色因此法进入了濒死状态并且被救回，则你摸一张牌，且此技能失效，直到回合结束。',
                            hpp_zhugeliang: '欢杀诸葛亮',
                            hpp_guanxing: '观星',
                            hpp_guanxing_info: '准备阶段和结束阶段，你可以观看牌堆顶的五张牌（仅2人是改为三），然后放置于牌堆顶或牌堆底。',
                            hpp_kongcheng: '空城',
                            hpp_kongcheng_info: '锁定技，若你没有手牌，你不能成为【杀】、【决斗】或【顺手牵羊】的目标。',
                            hpp_zhugezhan: '欢杀诸葛瞻',
                            hpp_zuilun: '罪论',
                            hpp_zuilun_info: '结束阶段，你可以观看牌堆顶的四张牌，你每满足以下一项便保留一张，然后以任意顺序放回其余的牌：1.你于此回合内造成过伤害；2.你于此回合内未弃置过牌；3.手牌数为全场最少。若均不满足，你与一名其他角色失去1点体力。',
                            hpp_zhuhuan: '欢杀朱桓',
                            hpp_fenli: '奋励',
                            hpp_fenli_info: '若你的手牌数为全场最多，你可以跳过判定和摸牌阶段；若你的体力值为全场最多，你可以跳过出牌阶段；若你的装备区的牌数量为全场最多，你可以跳过弃牌阶段。',
                            hpp_pingkou: '平寇',
                            hpp_pingkou_info: '回合结束时，你可以对至多X名其他角色各造成1点伤害（X为你本回合跳过的阶段数）。若你跳过的阶段数大于你选择的角色数，则你获得其中一名角色装备区的一张牌。',
                            hpp_zhuran: '欢杀朱然',
                            hpp_danshou: '胆守',
                            hpp_danshou_info: '每个回合限一次，当你成为基本牌或锦囊牌的目标后，你可以摸X张牌（X为你本回合成为牌的目标的次数）；当前回合角色的结束阶段，若你本回合没有以此法摸牌，你可以弃置与其手牌数相同的牌数对其造成1点伤害。',
                            hpp_zhurong: '欢杀祝融',
                            hpp_juxiang: '巨象',
                            hpp_juxiang_info: '锁定技，【南蛮入侵】对你无效；当其他角色使用或弃置的【南蛮入侵】进入弃牌堆时，你获得之，若该牌造成过伤害，则你额外摸一张牌。',
                            hpp_lieren: '烈刃',
                            hpp_lieren_info: '当你使用【杀】指定一个目标后，你可以与其拼点，你获得其拼点的牌，若你赢，你获得其一张牌。',
                            hpp_zhuzhi: '欢杀朱治',
                            hpp_anguo: '安国',
                            hpp_anguo_info: '出牌阶段限一次，你可以选择一名角色，若其手牌数为全场最少，其摸一张牌；体力值为全场最低，回复1点体力；装备区内牌数为全场最少，随机使用一张装备牌。然后若该角色有未执行的分支且你满足条件，你执行之。',
                            hpp_zumao: '欢杀祖茂',
                            hpp_yinbing: '引兵',
                            hpp_yinbing_info: '弃牌阶段前，你可以将任意张非基本牌置于你的武将牌上；当你受到【杀】造成的伤害后，你移去一张“引兵”牌，并摸一张牌。',
                            hpp_juedi: '绝地',
                            hpp_juedi_info: '锁定技，准备阶段，你选择一项：1.移去“引兵”牌，然后将手牌摸至体力上限+1；2.令体力值小于等于你的一名其他角色获得“引兵”牌，然后回复1点体力并摸等量的牌。',
                            hpp_zuoci: '欢杀左慈',
                            hpp_shendao: '神道',
                            hpp_shendao_info: '你的判定牌生效前，你可以将判定结果修改为任意花色。',
                            hpp_xinsheng: '新生',
                            hpp_xinsheng_info: '当你受到伤害后，你可以亮出牌堆顶三张牌，然后获得其中花色不同的牌各一张。',
                            // SP
                            hpp_sp_caiwenji: '欢杀SP蔡文姬',
                            hpp_chenqing: '陈情',
                            hpp_chenqing_info: '每回合限一次，当一名角色进入濒死状态时，你可以令另一名角色摸五张牌，然后弃置四张牌，若花色各不相同，则其视为对处于濒死状态的角色使用一张【桃】。',
                            hpp_mozhi: '默识',
                            hpp_mozhi_info: '结束阶段，你可以将一张手牌当你出牌阶段内使用过的第一张基本牌或普通锦囊牌使用，然后你可以将一张手牌当你出牌阶段使用过的第二张基本牌或普通锦囊牌使用。',
                            hpp_sp_caoren: '欢杀SP曹仁',
                            hpp_weikui: '伪溃',
                            hpp_weikui_info: '出牌阶段限一次，你可以失去1点体力并选择一名有手牌的其他角色，你观看其手牌：若其手牌中没有【闪】，则视为你对其使用【杀】（不计入次数），且本回合你计算与其的距离视为1；若其手牌中有【闪】，你获得其中一张牌并回复1点体力。',
                            hpp_lizhan: '励战',
                            hpp_lizhan_info: '回合结束时，你可以令任意名已受伤的角色摸一张牌，然后其中每存在一名手牌数与体力值相等的角色，你摸1张牌。',
                            hpp_sp_daqiao: '欢杀SP大乔',
                            hpp_yanxiao: '言笑',
                            hpp_yanxiao_info: '出牌阶段，你可以将一张方块牌置于一名角色的判定区内。判定区内有“言笑”牌的角色下个判定阶段开始时，获得其判定区里的所有牌，并进行一次判定，若为红色，其摸一张牌。若为黑色，本回合出杀次数+1。',
                            hpp_anxian: '安娴',
                            hpp_anxian_info: '每当你使用【杀】指定目标时，你可以令其弃置一张手牌；当你成为【杀】的目标时，你可以弃置一张手牌使之无效，然后该【杀】的使用者摸一张牌，若你弃置的是方块牌，则视为对【杀】的来源使用一张【杀】（此杀不能触发安娴）。',
                            hpp_sp_diaochan: '欢杀SP貂蝉',
                            hpp_lihun: '离魂',
                            hpp_lihun_info: '出牌阶段限一次，你可翻面，并获得一名其他角色所有手牌。出牌阶段结束时，你须为该角色每一点体力分配给其一张牌。',
                            hpp_pianyi: '翩仪',
                            hpp_pianyi_info: '回合结束阶段开始时，你可以摸一张牌，如你处于翻面状态，则摸三张牌。',
                            hpp_sp_guanyu: '欢杀SP关羽',
                            hpp_spwusheng: '武圣',
                            hpp_spwusheng_info: '回合开始时，你获得一张红色牌，你可以将一张红色牌当【杀】使用或打出；你的非转化的红色【杀】伤害+1；你使用方块【杀】无距离限制。',
                            hpp_danji: '单骑',
                            hpp_danji_info: '觉醒技，当你累计使用和打出5张牌或造成6点伤害后，回满体力，立即获得“驭马”和“怒斩”。',
                            hpp_nuzhan: '怒斩',
                            hpp_nuzhan_info: '锁定技，你使用非锦囊牌转化的【杀】后，本回合出【杀】次数+1；你使用锦囊牌转化的【杀】造成的伤害+1。',
                            hpp_sp_huangyueying: '欢杀SP黄月英',
                            hpp_jiqiao: '机巧',
                            hpp_jiqiao_info: '出牌阶段开始时，你可以弃置任意张非锦囊牌，然后你亮出牌堆顶两倍数量的牌，获得其中的锦囊牌，若其中没有锦囊牌，你获得1张锦囊牌。',
                            hpp_linglong: '玲珑',
                            hpp_linglong_info: '锁定技，若你的装备区里没有防具牌，你视为装备着【八卦阵】；若你的装备区里没有坐骑牌，你的手牌上限+1；若你装备区没有装备，你视为拥有“奇才”和“集智”。',
                            hpp_linglong_jizhi: '集智',
                            hpp_linglong_jizhi_info: '当你使用一张锦囊牌时，你可以摸一张牌。若此牌是基本牌，本回合手牌上限+1；若此牌是装备牌，则可以置入其他角色的装备栏；若此牌是锦囊牌，本回合出杀次数+1。',
                            hpp_sp_jiangwei: '欢杀SP姜维',
                            hpp_kunfen: '困奋',
                            hpp_kunfen_info: '结束阶段，你可以失去1点体力，然后摸两张牌，并可以视为对一名角色使用【火攻】。',
                            hpp_fengliang: '逢亮',
                            hpp_fengliang_info: '觉醒技，当你进入濒死状态时，你减1点体力上限并恢复体力值至3点，然后获得“挑衅”。',
                            hpp_sp_jiaxu: '欢杀SP贾诩',
                            hpp_jianshu: '间书',
                            hpp_jianshu_info: '出牌阶段限一次，你可以将一张手牌交给一名其他角色，然后选择另一名其他角色，令这两名角色拼点：赢的角色随机交给你一张牌，没赢的角色失去1点体力。若有角色因此死亡，此技能视为未发动过。',
                            hpp_yongdi: '拥嫡',
                            hpp_yongdi_info: '限定技，出牌阶段，你可以选择一名角色，若其体力值或体力上限是全场最少的，则回复1点体力或加1点体力上限；若其手牌数是全场最少的，则摸体力上限张牌（最多摸五张）。',
                            hpp_sp_machao: '欢杀SP马超',
                            hpp_zhuiji: '追击',
                            hpp_zhuiji_info: '锁定技，你计算与体力值小于等于你的角色的距离视为1，体力值大于等于你的角色无法响应你的【杀】。',
                            hpp_shichou: '誓仇',
                            hpp_shichou2: '誓仇',
                            hpp_shichou4: '誓仇',
                            hpp_shichou_info: '当你使用【杀】指定目标后，你可以多选择至多X名角色成为此【杀】的目标（X为你已损失的体力值+1）；若此【杀】没有造成伤害，你摸一张【杀】，此【杀】每造成1点伤害，你摸1张牌，每回合至多为3。',
                            hpp_sp_menghuo: '欢杀SP孟获',
                            hpp_manwang: '蛮王',
                            hpp_manwang_info: '出牌阶段，你可以弃置任意张牌依次执行前等量项：⒈获得“叛侵”；⒉摸一张牌；⒊回复一点体力；⒋摸两张牌并失去“叛侵”；若你如此做，直到你的下个回合开始前，你拥有“祸首”。',
                            hpp_sp_pangde: '欢杀SP庞德',
                            hpp_juesi: '决死',
                            hpp_juesi_info: '出牌阶段，你可以弃置一张【杀】并选择你攻击范围内的一名其他角色，该角色弃置一张牌。若其弃置的不是【杀】且你的体力值小于等于该角色，则你可以摸两张牌；若其弃置的是【杀】，则你视为对其使用【决斗】。',
                            hpp_sp_pangtong: '欢杀SP庞统',
                            hpp_guolun: '过论',
                            hpp_guolun_info: '出牌阶段限一次，你可展示一名其他角色的一张手牌。然后你可选择你的一张牌。若其选择的牌点数小，你与其交换这两张牌，其摸一张牌，你回复1点体力；若你选择的牌点数小，你与其交互这两张牌，你摸两张牌。',
                            hpp_songsang: '送丧',
                            hpp_songsang_info: '当其他角色死亡时，你可加1点体力上限并回复1点体力。',
                            hpp_zhanji: "展骥",
                            hpp_zhanji_info: "锁定技，当你于出牌阶段内因摸牌且并非因发动此技能而得到牌时，你摸一张牌。",
                            hpp_sp_sunshangxiang: '欢杀SP孙尚香',
                            hpp_liangzhu: '良助',
                            hpp_liangzhu_info: '当一名角色于其出牌阶段内回复体力后，你可以选择一项：1.摸一张牌；2.令其摸两张牌；3.获得其装备区里的武器牌。',
                            hpp_fanxiang: '返乡',
                            hpp_fanxiang_info: '觉醒技，准备阶段开始时，若你发动过“良助”，则你加1点体力上，然后回复1点体力，失去“良助”并获得“枭姬”和“舞剑”。',
                            hpp_wujian: '舞剑',
                            hpp_wujian_info: '出牌阶段，你可以把装备区的牌当杀使用，每个装备栏限一次，该杀不计入使用次数。',
                            hpp_sp_taishici: '欢杀SP太史慈',
                            hpp_jixu: '击虚',
                            hpp_jixu_info: '出牌阶段限一次，你可令至多四名其他角色各猜测你的手牌区里是否有【杀】。猜错的角色，你弃置其一张牌，然后视为对其使用一张杀；你获得X张牌，且本回合手牌上限+X（X为猜对的角色数+1）。',
                            hpp_sp_xiaoqiao: '欢杀SP小乔',
                            hpp_xingwu: '星舞',
                            hpp_xingwu_info: '出牌阶段限一次，你可以翻面并弃置一张手牌，然后弃置一名其他角色装备区里的一张牌，并对其造成2点伤害（若为女性角色则改为1点伤害）。',
                            hpp_luoyan: '落雁',
                            hpp_luoyan_info: '锁定技，当你发动星舞后，直至你的下个出牌阶段开始前，你拥有“天香”和“红颜”。',
                            hpp_huimou: '回眸',
                            hpp_huimou_info: '当你于回合外使用打出红桃牌或发动天香时，你可以选择一名角色从背面翻至正面。',
                            hpp_sp_zhangfei: '欢杀SP张飞',
                            hpp_sppaoxiao: '咆哮',
                            hpp_sppaoxiao_info: '锁定技，你使用【杀】无次数限制和无距离限制，本回合第二张【杀】起伤害+1；第三张【杀】起无视防具且不可响应。',
                            hpp_xvhe: '虚吓',
                            hpp_xvhe_info: '锁定技，你的【杀】被【闪】抵消后，摸一张牌；你使用或打出【闪】后，摸一张牌。',
                            hpp_sp_zhanghe: '欢杀SP张郃',
                            hpp_zhouxuan: '周旋',
                            hpp_zhouxuan_info: '弃牌阶段开始时，你可将任意张手牌置于武将牌上（称为“旋”，‘旋’最大为5）。当你使用或打出一张牌时，你摸一张牌，然后移去一张“旋”，若你的手牌不是场上唯一最多，则改为摸X张牌，然后移去2张“旋”（X为“旋”的数量）；当你没有“旋”时，你可令使用的牌结算后成为“旋”。',
                            hpp_sp_zhangliao: '欢杀SP张辽',
                            hpp_mubing: '募兵',
                            hpp_mubing_info: '出牌阶段限一次，你可以观看牌堆顶的四张牌，然后你可以弃置任意张手牌，获得任意张展示的牌（你弃置的牌点数和不得小于你获得的牌的点数之和），将其余牌置入弃牌堆。',
                            hpp_ziqu: '资取',
                            hpp_ziqu_info: '每名角色每轮限一次，你对其他角色造成伤害时，你可防止此伤害，令其将一张点数最大的牌交给你。',
                            hpp_diaoling: '调令',
                            hpp_diaoling_info: '你可以将任意张“募兵”牌交给一名其他角色，若以此法给出的牌点数连续且各不相同，你可以获得场上至多X名角色的各一张手牌（X为给出的“募兵”牌数-1）。',
                            hpp_sp_zhaoyun: '欢杀SP赵云',
                            hpp_chongzhen: '冲阵',
                            hpp_chongzhen1: '冲阵',
                            hpp_chongzhen2: '冲阵',
                            hpp_chongzhen_info: '当你发动【龙胆】时，你可以获得对方的一张手牌。',
                            hpp_sp_zhenji: '欢杀SP甄姬',
                            hpp_jinghong: '惊鸿',
                            hpp_jinghong_info: '准备阶段，你可以选择至多X名其他角色（X为场上存活角色数-1，最多为4），随机展示其一张手牌：若为黑色，你获得之（这些牌不计入你本回合的手牌上限）；若为红色，其弃置之。',
                            hpp_spluoshen: '洛神',
                            hpp_spluoshen_info: '你可以将一张黑色牌当【闪】使用或打出；若如此做，每轮限一次，你可以进行判定，若结果为黑色，你获得此牌，然后你可以重复此流程；红色，获得此牌，然后结束此流程。',
                            hpp_sp_zhugeliang: '欢杀卧龙诸葛',
                            hpp_bazhen: '八阵',
                            hpp_bazhen_info: '锁定技，若你的装备区里没有防具牌，你视为装备着【八卦阵】，你的八卦阵判定失效时，你摸一张牌。',
                            hpp_huoji: '火计',
                            hpp_huoji_info: '你可以将一张红色手牌当【火攻】使用；你可以观看牌堆顶的4张牌，选择其中一张代替火攻需弃置的牌，其余的牌放回牌堆顶。',
                            hpp_kanpo: '看破',
                            hpp_kanpo_info: '你可以将一张黑色手牌当【无懈可击】使用；你的无懈可击不可被响应。',
                            // 喵
                            hpp_doumao: '逗猫',
                            hpp_doumao_info: '回合开始时，你可以弃置一张牌并选择一名其他角色，转移“逗猫”，并使其摸一张牌，回合结束时，若你拥有“逗猫”，则需弃置一张牌。',
                            hpp_miao_caifuren: '喵蔡夫人',
                            hpp_miaoqieting: '窃听',
                            hpp_miaoqieting_info: '其他角色的回合结束时，若其没有“逗猫”，则你可以选择一项：1.将其装备区里的一张牌置入自己的装备区；2.摸一张牌。若其拥有“逗猫”，则你可以选择一项：1.观看其两张手牌并获得其中一张；2.摸一张牌。',
                            hpp_miaoxianzhou: '献州',
                            hpp_miaoxianzhou_info: '限定技，出牌阶段，你可以将任意张手牌交给一名其他角色，然后该角色选择一项：1.令你回复X点体力；2.对其攻击范围内的至多X名角色各造成1点伤害（X为你以此法交给该角色的牌的数量）。当你获得“逗猫”时，“献州”视为未发动过。',
                            hpp_miao_caiwenji: '喵蔡文姬',
                            hpp_miaobeige: '悲歌',
                            hpp_miaobeige_info: '当一名角色受到【杀】造成的伤害后，你可以弃置一张牌。若弃置的牌为：红桃，令其回复1点体力；方片：令其摸两张牌；黑桃，伤害来源翻面；梅花，伤害来源弃置2张牌。若你没有“逗猫”，则额外选择一个效果。',
                            hpp_miaoduanchang: '断肠',
                            hpp_miaoduanchang_info: '锁定技。当你死亡时，杀死你的角色失去所有武将技能。若你没有“逗猫”时，令你进入濒死的角色需弃置两张牌。',
                            hpp_miao_daqiao: '喵大乔',
                            hpp_miaoguose: '国色',
                            hpp_miaoguose_info: '出牌阶段限四次。你可以将一张方块牌当【乐不思蜀】使用；或弃置场上的一张【乐不思蜀】；然后你摸一张牌，若目标角色身上有“逗猫”，则改为你摸两张牌并弃一张牌。',
                            hpp_miaoliuli: '流离',
                            hpp_miaoliuli_info: '你被【杀】时，可以弃置一张牌转移给你攻击范围内的一名其他角色；若你没有“逗猫”，则改为攻击范围内的至多两名其他角色。',
                            hpp_miao_diaochan: '喵貂蝉',
                            hpp_miaolijian: '离间',
                            hpp_miaolijian_info: '出牌阶段限一次，你可以选择至少两名角色并弃置X张牌（X为你选择的角色数，若你没有“逗猫”则改为-1）。他们依次对逆时针最近座次的你选择的另一名角色视为使用一张【决斗】。',
                            hpp_miaobiyue: '闭月',
                            hpp_miaobiyue_info: '锁定技，结束阶段，你摸X张牌（X为本回合受到伤害的角色数+1，若你没有“逗猫”则改为+2，至多为5）。',
                            hpp_miao_huangyueying: '喵黄月英',
                            hpp_miaojizhi: '集智',
                            hpp_miaojizhi_info: '当你使用一张锦囊牌时，你可以摸一张牌。若你没有“逗猫”，其他角色使用普通锦囊时，你摸一张牌（每回合限一次）。',
                            hpp_miaoqicai: '奇才',
                            hpp_miaoqicai_info: '锁定技。你使用锦囊牌无距离限制；其他角色不能弃置你装备区里的防具。当其他角色获得“逗猫”时，你从牌堆中获得一张锦囊牌。',
                            hpp_miao_sunshangxiang: '喵孙尚香',
                            hpp_miaojieyi: '结姻',
                            hpp_miaojieyi_info: '出牌阶段限一次，选择一名其他角色，给予一张手牌或将一张装备牌置入其装备区，然后自己回复1点体力，并摸一张牌；若没有“逗猫”，可令其也回复1点体力，并摸一张牌。',
                            hpp_miaoxiaoji: '枭姬',
                            hpp_miaoxiaoji_info: '当你失去装备区里的一张牌后，你可以摸两张牌；若你没有“逗猫”，你可以弃置场上一张牌。',
                            hpp_miao_wangyi: '喵王异',
                            hpp_miaozhenlie: '贞烈',
                            hpp_miaozhenlie_info: '当你成为【杀】或普通锦囊的目标后，你可以失去1点体力使此牌对你无效，然后你弃置使用者一张牌；若你没有“逗猫”，则改为获得使用者一张牌。',
                            hpp_miaomiji: '秘计',
                            hpp_miaomiji_info: '结束阶段，你可以摸X张牌（X为你已损失的体力值），然后你可以将等量的手牌交给一名其他角色；若你没有“逗猫”则X改为场上一名你选择的角色的已损失体力值且至多为5。',
                            hpp_miao_xiaoqiao: '喵小乔',
                            hpp_miaotianxiang: '天香',
                            hpp_miaotianxiang2: '天香',
                            hpp_miaotianxiang_info: '你受到伤害时，可以交给一名角色一张红桃手牌，然后令其代替你承受此伤害，若其拥有“逗猫”，你对其造成1点伤害；若其没有“逗猫”，你弃置其一张牌。',
                            hpp_miaohongyan: '红颜',
                            hpp_miaohongyan_info: '锁定技，你的黑桃牌视为红桃牌。没有“逗猫”的角色判定牌生效后；如果此判定牌为红桃，你回复1点体力并摸一张牌。',
                            hpp_miao_zhangchunhua: '喵张春华',
                            hpp_miaojueqing: '绝情',
                            hpp_miaojueqing_info: '当你即将造成伤害时，若你没有“逗猫”，你可以失去等量体力，令此伤害翻倍。你即将造成的伤害视为失去体力。',
                            hpp_miaoshangshi: '伤势',
                            hpp_miaoshangshi_info: '当你的手牌数小于X时，你将手牌摸至X张（X为你已损失的体力值且至少为1）；当你失去“逗猫”时，体力值上限+1；当你“逗猫”时，体力值上限-1。',
                            hpp_miao_zhangxingcai: '喵张星彩',
                            hpp_miaoshenxian: '甚贤',
                            hpp_miaoshenxian_info: '当其他角色因弃置而失去的基本牌后（若你没有“逗猫”则改为非装备牌），你可以摸一张牌（每回合限一次）。',
                            hpp_miaoqiangwu: '枪舞',
                            hpp_miaoqiangwu_info: '你对没有“逗猫”的角色使用【杀】无距离限制，对有“逗猫”的角色使用【杀】无次数限制。若你拥有“逗猫”时，你的【杀】造成伤害后，摸一张牌。',
                            hpp_miao_zhenji: '喵甄姬',
                            hpp_miaoluoshen: '洛神',
                            hpp_miaoluoshen_info: '准备阶段，你可以进行判定，若结果为黑色，你获得此牌，然后你可以重复此流程；红色，获得此牌，然后结束此流程。若你没有“逗猫”，回合结束时可以再次发动〖洛神〗。',
                            hpp_miaoqingguo: '倾国',
                            hpp_miaoqingguo_info: '你可以将一张黑色牌当【闪】使用或打出；若没有“逗猫”，你可以将一张【闪】当【桃】使用。',
                            hpp_miao_zhurong: '喵祝融',
                            // hpp_miaochangbiao: '长标',
                            // hpp_miaochangbiao_info: '出牌阶段限一次，你可以将任意张手牌当做【杀】使用（无距离限制，若你拥有技能〖逗猫〗，则此牌可以额外指定一名目标）。若你因此【杀】对目标角色造成过伤害，则你于出牌阶段结束时摸X张牌（X为此【杀】对应的实体牌数量）。',
                            hpp_miaojuxiang: '巨象',
                            hpp_miaojuxiang_info: '锁定技，【南蛮入侵】对你无效；当其他角色使用或弃置的【南蛮入侵】进入弃牌堆时，你获得之。拥有“逗猫”的角色无法响应你的【南蛮入侵】，你的【南蛮入侵】对没有“逗猫”的角色造成伤害时，你摸一张牌。',
                            hpp_miaolieren: '烈刃',
                            hpp_miaolieren_info: '当你使用【杀】指定一个目标后，你可以与其拼点，你获得其拼点的牌，若你赢，你获得其一张牌。出牌阶段开始时，若你本回合失去了“逗猫”，你可以指定一名其他角色，并发动“烈刃”。',
                            // 神
                            hpp_shen_caocao: '欢杀神曹操',
                            hpp_guixin: '归心',
                            hpp_guixin_info: '当你受到1点伤害后，你可以随机获得每名其他角色区域里的一张牌，如果获得牌大于4张且你为正面，则翻面。',
                            hpp_shen_daxiaoqiao: '欢杀神大小乔',
                            hpp_shuangshu: '双姝',
                            hpp_shuangshu_pingting: '双姝·娉婷',
                            hpp_shuangshu_yizheng: '双姝·移筝',
                            hpp_shuangshu_info: '准备阶段，你可以展示牌堆顶的2张牌。若包含：方片：本回合“娉婷”可选择的选项个数+1；红桃：本回合“移筝”可选择的选项个数+1；只有黑色牌：你获得展示的牌。',
                            hpp_pingting: '娉婷',
                            hpp_pingting_info: '出牌阶段开始时，你可以至多选择以下选项中的两项：⒈你使用的第一张牌无距离限制。⒉你使用的第二张牌返还到你的手牌。⒊你使用的第三张牌结算后立即摸两张牌。⒋你使用的第四张牌额外执行1次效果。',
                            hpp_yizheng: '移筝',
                            hpp_yizheng_info: '你的出牌阶段结束时，你可至多选择以下选项中的至多一项：⒈移动场上的一张武器牌。⒉移动场上的一张坐骑牌。⒊移动场上的一张防具牌。若本回合你移动了一张牌：回复1点体力；两张牌：直到你的下回合开始，你失去一张牌时立即摸一张牌。',
                            hpp_shen_dianwei: '欢杀神典韦',
                            hpp_shenwei: '神卫',
                            hpp_shenwei_info: '回合开始时，你可以选择一名角色获得“卫”标记（当你的体力值为1时，改为至多两名）。该角色受到伤害时可以移除标记，然后本次伤害由你承受；每名角色只能拥有一个“卫”标记。',
                            hpp_elai: '恶来',
                            hpp_elai_info: '锁定技，当场上的“卫”标记移除时，你可以选择一项：1.你回复1点体力；2.对你攻击范围内的一名其他角色造成1点伤害。',
                            hpp_kuangxi: '狂袭',
                            hpp_kuangxi_info: '锁定技，当场上存在“卫”标记时，你造成的伤害+1。',
                            hpp_shen_diaochan: '欢杀神貂蝉',
                            hpp_meihun: '魅魂',
                            hpp_meihun_info: '你的回合结束时或当你本回合首次成为【杀】的目标后，你可指定一名其他角色，然后声明一种花色，令其交给你该花色的所有牌，若其没有，则你观看其手牌，然后获得其中一张。',
                            hpp_huoxin: '惑心',
                            hpp_huoxin_info: '出牌阶段限一次，你可以弃置一张牌并令两名有手牌的角色拼点，然后你可以声明1种花色，令没赢的角色交给你对应花色的所有牌或获得1个“魅惑”标记，有“魅惑”标记的角色不能使用和打出对应花色的牌。拥有“魅惑”标记的角色回合结束时，移除“魅惑”标记。',
                            hpp_shen_ganning: '欢杀神甘宁',
                            hpp_poxi: '魄袭',
                            hpp_poxi_info: '出牌阶段限一次，你可以观看一名其他角色的手牌，然后你可以弃置你与其手里共计三张不同花色的牌。若如此做，根据此次弃置你的牌数量执行以下效果：没有，体力上限减1；两张，回复1点体力并摸一张牌；三张，摸三张牌。',
                            hpp_shen_guanyu: '欢杀神关羽',
                            hpp_wushen: '武神',
                            hpp_wushen_info: '你的红桃手牌可以视为【杀】；你使用红桃【杀】无距离限制且伤害+1。',
                            hpp_wuhun: '武魂',
                            hpp_wuhun_info: '锁定技，当你受到1点伤害后，你令伤害来源获得1枚“梦魇”标记；当你脱离濒死状态或阵亡时，你令拥有最多“梦魇”标记的一名其他角色进行判定，若结果不为【桃】或【桃园结义】，则该角色流失5点体力。',
                            hpp_shen_guojia: '欢杀神郭嘉',
                            hpp_gjtianyi: '天翊',
                            hpp_gjtianyi_info: '觉醒技，准备阶段，若全场角色在本局游戏中均受到过伤害，你加2点体力上限，回复1点体力，然后令一名角色获得“佐幸”。',
                            hpp_zuoxing: '佐幸',
                            hpp_zuoxing_info: '出牌阶段开始时，若神郭嘉存活且体力上限大于1，你可令神郭嘉减1点体力上限。然后你可以视为使用一张普通锦囊牌。',
                            hpp_huishi: '辉逝',
                            hpp_huishi_info: '限定技，出牌阶段，你可以选择一名角色。若其：有未触发的觉醒技，且你的体力上限不小于X（X为全场存活角色数），则你选择其中一个觉醒技，然后该角色视为满足觉醒条件；没有未触发的觉醒技，且你的体力上限大于2，则其摸四张牌。若如此做，你减2点体力上限。',
                            hpp_shen_huatuo: '欢杀神华佗',
                            hpp_jishi: '济世',
                            hpp_jishi_info: '游戏开始时，你获得3个“药”标记，“药”的上限为3；当有角色濒死时，你可以弃置1个“药”，使其回复至1点体力；当你回合外失去红色手牌时，获得等量“药”；你的手牌上限+3。',
                            hpp_taoxian: '桃仙',
                            hpp_taoxian_info: '你可以将一张红桃牌当【桃】使用；其他角色使用【桃】时，你摸一张牌。',
                            hpp_shenzhen: '神针',
                            hpp_shenzhen_info: '回合开始时，你可以弃置X枚“药”标记，然后选择一项：1.令X名角色各回复1点体力；2.令X名角色各失去1点体力。',
                            hpp_shen_jiangwei: '欢杀神姜维',
                            hpp_shen_liubei: '欢杀神刘备',
                            hpp_longnu: '龙怒',
                            hpp_longnu_info: '锁定技，出牌阶段开始时选择一项：1.失去1点体力并摸两张牌，然后本回合你的红色手牌均视为火【杀】且无距离限制；2.你减1点体力上限，然后本回合你的黑色手牌均视为雷【杀】且无次数限制。',
                            hpp_jieying: '结营',
                            hpp_jieying_info: '锁定技，你始终处于横置状态，受到伤害时摸一张牌；已横置的角色手牌上限+2；结束阶段，你可以横置一名其他角色。',
                            hpp_shen_luxun: '欢杀神陆逊',
                            hpp_junlue: '军略',
                            hpp_junlue_info: '锁定技，当你受到或造成1点伤害后，你获得一个“军略"标记。',
                            hpp_cuike: '摧克',
                            hpp_cuike_info: '出牌阶段开始时，若“军略”数量为奇数，你可以对一名角色造成1点伤害；若“军略”数量为偶数，你可以横置一名角色并弃置其区域里的—张牌。若“军略”数量超过7个，你可以移去全部“军略”标记并对所有其他角色造成1点伤害。',
                            hpp_zhanhuo: '绽火',
                            hpp_zhanhuo_info: '限定技，出牌阶段，你可以移去全部“军略”标记，令至多等量的已横置角色弃置所有装备区里的牌，然后对其中1名角色造成1点火焰伤害。',
                            hpp_shen_lvbu: '欢杀神吕布',
                            hpp_wuqian: '无前',
                            hpp_wuqian_info: '锁定技，每个自己回合使用的第一张杀或决斗，获得“无双”效果且无视目标角色的防具。',
                            hpp_shenfen: '神愤',
                            hpp_shenfen_info: '限定技，出牌阶段，你可以失去3点体力，然后对所有其他角色各造成1点伤害。这些角色弃置装备区里的所有牌，再弃置四张手牌。',
                            hpp_shen_lvmeng: '欢杀神吕蒙',
                            hpp_shelie: '涉猎',
                            hpp_shelie_info: '锁定技，摸牌阶段，改为亮出牌堆顶的五张牌，然后获得其中每种花色的牌各一张。',
                            hpp_gongxin: '攻心',
                            hpp_gongxin_info: '当你使用牌指定唯一目标或成为其他角色使用牌的唯一目标后，你可以观看目标角色的手牌，然后你可以展示其中一张红色牌，获得此牌或将此牌置于牌堆顶（每回合限触发一次）。',
                            hpp_shen_simayi: '欢杀神司马懿',
                            hpp_renjie: '忍戒',
                            hpp_renjie_info: '锁定技，游戏开始时，你获得1枚‘忍’标记，当你受到伤害后，或于弃牌阶段内弃置手牌后，你获得X枚‘忍’标记（X为伤害值或弃置手牌数）。',
                            hpp_jilve: '极略',
                            hpp_jilve_info: '你可以弃置1枚“忍”标记，然后发动下列一项技能：“鬼才”、“放逐”、“集智”或“完杀”；每回合第一次发动极略时可摸一张牌。',
                            hpp_jilve_guicai: '鬼才',
                            hpp_jilve_guicai_info: '任何判定牌生效前，你可以打出一张牌代替之。若此牌的花色为：红桃，你回复1点体力；梅花，你摸两张牌。',
                            hpp_jilve_fangzhu: '放逐',
                            hpp_jilve_fangzhu_info: '你受到伤害后，你可以令一名其他角色翻面，然后该角色摸一张牌。',
                            hpp_jilve_jizhi: '集智',
                            hpp_jilve_jizhi_info: '当你使用锦囊牌时，你可以摸一张牌。',
                            hpp_jilve_wansha: '完杀',
                            hpp_jilve_hppwansha: '完杀',
                            hpp_jilve_wansha_info: '锁定技，你的回合内，只有你才能使用【桃】。',
                            hpp_shen_sunce: '欢杀神孙策',
                            hpp_shen_sunquan: '欢杀神孙权',
                            hpp_quanxue: '劝学',
                            hpp_quanxue_info: '出牌阶段开始时，你可以选择至多两名其他角色各获得1个“学”；拥有“学”的角色回合开始时移除标记并选择一项：1.出牌阶段无法对其他角色使用牌；2.失去1点体力。',
                            hpp_shehu: '射虎',
                            hpp_shehu_info: '锁定技，当你对有“学”的角色使用杀时，弃置其一张手牌。',
                            hpp_dingli: '鼎立',
                            hpp_dingli_info: '每轮限一次，当其他角色移除学时，若其体力值大于等于你，你可以回复1点体力；若其体力值小于你，你可以摸X张牌（X为你与其体力值的差，且至多为2）。',
                            hpp_shen_taishici: '欢杀神太史慈',
                            hpp_dulie: '笃烈',
                            hpp_dulie_info: '锁定技，当你成为其他角色使用【杀】的目标时，你进行判定：若结果为红桃，取消之。你首次进入濒死状态时，若场上存在“围”标记，你将体力回复至X点（X为场上围标记的数目）。',
                            hpp_chongwei: '重围',
                            hpp_chongwei_info: '游戏开始时，令所有其他角色获得“围”标记。回合开始时，你令所有有“围”标记的角色将“围”标记移动到下家角色（若你获得“围”标记，则直接交给下家）。有“围”的角色受到伤害后，弃置其“围”标记。有“围”的角色回合开始时，你可以选择一项：⒈弃置一张手牌，对其造成1点伤害；⒉若其体力值不大于你，获得其一张手牌。若如此做，直到本回合结束，你视为在其攻击范围内。',
                            hpp_powei: '破围',
                            hpp_powei_info: '觉醒技，任意角色回合结束时，若场上没有“围”标记，你获得技能“神著”，并摸X张牌（X为本轮中被移除的“围”标记数）。',
                            hpp_shenzhu: '神著',
                            hpp_shenzhu_info: '锁定技，回合开始时摸一张【杀】，你使用非转化和非虚拟【杀】结算结束后，你须选择一项执行：1.摸一张牌，然后本回合可以额外使用一张【杀】；2.摸三张牌，然后本回合不能再使用【杀】。',
                            hpp_shen_xunyu: '欢杀神荀彧',
                            hpp_shen_zhangfei: '欢杀神张飞',
                            hpp_shen_zhangjiao: '欢杀神张角',
                            hpp_yizhao: '异兆',
                            hpp_yizhao_info: '锁定技，你使用或打出一张牌时，获得等于此牌点数的“黄”标记。每次“黄”的十位数因此变化时，你获得牌堆中一张与变化后十位数点数相同的牌。',
                            hpp_sanshou: '三首',
                            hpp_sanshou_info: '当你受到伤害时，你可以亮出牌堆顶三张牌，若包含本回合未使用过的类型，你防止此伤害。',
                            hpp_sijun: '肆军',
                            hpp_sijun_info: '准备阶段，若“黄”标记数量大于牌堆的牌数，你可以移去所有“黄”，然后从牌堆中随机获得点数之和为36的牌，并洗牌。',
                            hpp_tianjie: '天劫',
                            hpp_tianjie_info: '每个回合结束时，若本回合牌堆洗过牌，你可以选择至多3名其他角色，对这些角色分别造成X点雷电伤害（X为其手牌中【闪】的数量且至少为1）',
                            hpp_shen_zhangliao: '欢杀神张辽',
                            hpp_duorui: '夺锐',
                            hpp_duorui_info: '出牌阶段开始前，你可以选择一名其他角色，观看并获得一张手牌，然后本回合你使用该颜色的牌，其不能响应。',
                            hpp_zhiti: '止啼',
                            hpp_zhiti_info: '锁定技，若存活的已受伤角色数：大于1，你摸牌阶段摸牌数量+1；大于2，你每回合可使用杀的次数+1。',
                            hpp_shen_zhaoyun: '欢杀神赵云',
                            hpp_juejing: '绝境',
                            hpp_juejing_info: '锁定技，你的手牌上限+3；当你进入或脱离濒死状态时，你摸一张牌。',
                            hpp_longhun: '龙魂',
                            hpp_longhun_info: '你可以将至多两张同花色的牌按以下规则使用或打出：红桃当【桃】；方块当火【杀】；梅花当【闪】；黑桃当【无懈可击】。若你以此法使用了两张红色牌，则此牌回复值或伤害值+1，且你摸一张牌。若你以此法使用了两张黑色牌，则你获得当前回合角色一张牌。',
                            hpp_shen_zhenji: '欢杀神甄姬',
                            hpp_shenfu: '神赋',
                            hpp_shenfu_info: '回合结束时，如果你的手牌数量为：奇数，可对一名其他角色造成1点雷电伤害，若造成其死亡，你可重复此流程；偶数，可令一名角色摸一张牌或弃置其一张牌，若执行后该角色的手牌数等于其体力值，你可重复此流程（不能对本回合指定过的目标使用）；回合结束后，你摸X张牌（X为本回合你发动神赋的次数，且最大为5）。',
                            hpp_qixian: '七弦',
                            hpp_qixian2: '七弦',
                            hpp_qixian_info: '锁定技，你的手牌上限为7，出牌阶段结束时，你可以将一张手牌移出游戏，回合结束后归还。',
                            hpp_feifu: '飞凫',
                            hpp_feifu_info: '你可以将一张黑色牌当【闪】使用或打出。',
                            hpp_shen_zhouyu: '欢杀神周瑜',
                            hpp_qinyin: '琴音',
                            hpp_qinyin_info: '弃牌阶段结束时，若你于此阶段内弃置过至少1张手牌，则你可以选择一项：1.令所有角色各回复1点体力；2.令所有角色各失去1点体力。',
                            hpp_yeyan: '业炎',
                            hpp_yeyan_info: '出牌阶段开始时，你可以选择一名其他角色，对其造成1点火焰伤害。',
                            hpp_shen_zhugeliang: '欢杀神诸葛亮',
                            hpp_qixing: '七星',
                            hpp_qixing_info: '游戏开始时你多摸七张牌，置于武将牌上，称为“星”。你的每个摸牌阶段结束时，可以用任意张手牌交换等量的“星”。',
                            hpp_kuangfeng: '狂风',
                            hpp_kuangfeng_info: '出牌阶段结束时，你可以移去任意张“星”对等量的角色各造成1点伤害。',
                            hpp_dawu: '大雾',
                            hpp_dawu_info: '结束阶段，你可以移去一张“星”，然后直到你的下回合开始，你受到非属性伤害-1。',
                            // 斗地主
                            hpp_change: '欢杀嫦娥',
                            hpp_daoyao: '捣药',
                            hpp_daoyao_info: '出牌阶段限1次，你可以弃置一张手牌，然后从剩余牌堆中获得一张【桃】并摸2张牌，若牌堆中没有【桃】则改为摸3张牌。',
                            hpp_benyue: '奔月',
                            hpp_benyue_info: '觉醒技，当你摸到【桃】后若同时拥有3张及以上【桃】，或本局游戏累计回复体力值达到3点时，体力上限增加至15并获得技能“广寒”。',
                            hpp_guanghan: '广寒',
                            hpp_guanghan_info: '锁定技。当场上任意角色受到伤害后，与其相邻的角色（嫦娥除外）需弃置1张手牌，否则流失等量的体力。',
                            hpp_dalanmao: '欢杀大懒猫',
                            hpp_zuzhou: '诅咒',
                            hpp_zuzhou_info: '任意角色的回合开始时，你可以失去1点体力，并选择一项：1、令其手牌中的所有【杀】视为【闪】直到回合结束。2、令其手牌中的所有【闪】视为【杀】直到回合结束。',
                            hpp_moyu: '摸鱼',
                            hpp_moyu2: '摸鱼',
                            hpp_moyu4: '摸鱼',
                            hpp_moyu_info: '你的出牌阶段开始时，你可以令你本回合手牌上限+2，下个回合摸牌阶段摸牌数+2；若你如此做，则你本回合无法对其他角色使用牌，回合结束时，回复1点体力。',
                            hpp_sanlian: '三连',
                            hpp_sanlian_info: '你的出牌阶段，你可以弃置三张类型相同的手牌，再摸X张牌（X为你已损的体力），并对全场所有角色造成1点伤害，若这三张牌的牌名相同，则弃置受到伤害的其他角色各一张牌。',
                            hpp_libai: '欢杀李白',
                            hpp_shixian: '诗仙',
                            hpp_shixian_info: '锁定技，回合开始时，李白清除已有的诗篇并展示牌堆顶的4张牌，根据花色创作对应的诗篇：红桃：静夜思；方片：行路难；黑桃：侠客行；梅花：将进酒。然后你可获得其中重复花色的牌。',
                            hpp_shixian_qiangjinjiu: '将进酒',
                            hpp_shixian_qiangjinjiu_info: '其他角色回合开始时，你可以弃置一张手牌，并选择一项：1、弃置其装备栏中所有的装备，令其从牌堆中获得一张【酒】；2、获得其手牌中所有【酒】；若其手牌中没有【酒】，则改为获得其一张牌。',
                            hpp_shixian_xiakexing: '侠客行',
                            hpp_shixian_xiakexing_info: '当你使用了牌名中有“剑”的武器时，视为使用了一张【万箭齐发】；当你的【杀】造成伤害后，若你装备了武器，你可以与其进行一次拼点，若你赢，则其失去一点体力上限，若你没赢，则弃置你装备栏的武器。',
                            hpp_shixian_jingyesi: '静夜思',
                            hpp_shixian_jingyesi_info: '出牌阶段结束时，你可以查看牌堆顶一张牌，并选择是否立即使用此牌，若该牌未被使用则将其放回牌堆顶；弃牌阶段结束时，你获得牌堆底的一张牌。',
                            hpp_shixian_xinglunan: '行路难',
                            hpp_shixian_xingluBuff: '行路难',
                            hpp_shixian_xinglunan_info: '你的回合外，当你成为其他角色使用的【杀】的目标，且结束完毕后，直到你的回合开始，其他角色计算与你的距离时+1。',
                            hpp_sunwukong: '欢杀孙悟空',
                            hpp_72bian: '72变',
                            hpp_72bian_backup: '72变',
                            hpp_72bian_info: '出牌阶段，你可以将基本牌重铸为锦囊牌，锦囊牌重铸为装备牌，装备牌重铸为基本牌，每个类型的牌每回合限1次。',
                            hpp_ruyi: '如意',
                            hpp_ruyi_info: '锁定技，若你的装备区里没有武器牌时，你视为装备着【如意金箍棒】。',
                            hpp_ruyijingubang: '如意金箍棒',
                            hpp_ruyijingubang2: '如意金箍棒',
                            hpp_ruyijingubang_info: '回合开始时，你可以将如意金箍棒攻击范围调整至1-4，并获得对应效果，初始攻击范围默认为1。1.你使用【杀】不计入次数。2.本回合你使用的第一张【杀】伤害+1。3.你使用【杀】无法被响应。4.你使用【杀】可以额外增加一个目标。',
                            hpp_qitian: '齐天',
                            hpp_qitian_info: '觉醒技，若你的体力值为1时，你减1点体力上限，然后获得技能【火眼】和【筋斗云】。',
                            hpp_huoyan: '火眼',
                            hpp_huoyan_info: '锁定技，其他角色的手牌始终对你可见。',
                            hpp_jindouyun: '筋斗云',
                            hpp_jindouyun_info: '锁定技，你计算与其他角色的距离时，始终-1；其他角色计算与你的距离时，始终+1。',

                            biao_zhu: '标·主',
                            biao_hu: '标·虎',
                            biao_meng: '标·猛',
                            biao_jiao: '标·娇',
                            biao_wei: '标·威',
                            biao_mou: '标·谋',
                            feng_xiao: '风·骁',
                            feng_li: '风·离',
                            feng_zhi: '风·志',
                            feng_xian: '风·仙',
                            lin_zhi: '林·智',
                            lin_man: '林·蛮',
                            lin_xiong: '林·雄',
                            huo_zhong: '火·忠',
                            huo_yi: '火·义',
                            huo_bi: '火·愎',
                            huo_yong: '火·勇',
                            shan_zhen: '山·贞',
                            shan_si: '山·嗣',
                            shan_liang: '山·良',
                            shan_ce: '山·策',
                            shan_ji: '山·继',
                            shan_xian: '山·娴',
                            ming_shu: '名·淑',
                            ming_ru: '名·儒',
                            ming_cao: '名·曹',
                            ming_han: '名·悍',
                            ming_qi: '名·奇',
                            ming_jue: '名·绝',
                            xian_sp: '限·SP',
                            xian_sp2: '限·SP2',
                            xian_jin: '限·锦',
                            xian_xiu: '限·绣',
                            xian_miao: '限·喵',
                            shen_wei: '神·魏',
                            shen_shu: '神·蜀',
                            shen_wu: '神·吴',
                            shen_qun: '神·群',
                            doudizhu: '斗地主限定',
                        },
                    };
                    if (lib.device || lib.node) {
                        for (var i in happykill.character) {
                            happykill.character[i][4].push('ext:欢乐三国杀/image/character/' + i + '.jpg');
                        }
                    }
                    else {
                        for (var i in happykill.character) {
                            happykill.character[i][4].push('db:extension-欢乐三国杀/image/character:' + i + '.jpg');
                        }
                    }
                    for (var i in happykill.character) {
                        if (happykill.translate[i]) {
                            if (happykill.translate[i].indexOf('欢杀神SP') == 0) happykill.translate[i + '_prefix'] = '欢杀神SP';
                            else if (happykill.translate[i].indexOf('欢杀SP') == 0) happykill.translate[i + '_prefix'] = '欢杀SP';
                            else if (happykill.translate[i].indexOf('欢杀神') == 0) happykill.translate[i + '_prefix'] = '欢杀神';
                            else if (happykill.translate[i].indexOf('欢杀') == 0) happykill.translate[i + '_prefix'] = '欢杀';
                            else if (happykill.translate[i].indexOf('喵') == 0) happykill.translate[i + '_prefix'] = '喵';
                        }
                        happykill.character[i][4].push(((lib.device || lib.node) ? 'ext:' : 'db:extension-') + '活动武将/image/character/' + i + '.jpg');
                    }
                    return happykill;
                });

                lib.namePrefix.set('喵', {
                    color: '#fdd559',
                    nature: 'soilmm',
                });
                lib.namePrefix.set('欢杀', {
                    color: '#ff6a6a',
                    nature: 'MXpink',
                    showName: '欢',
                });
                lib.namePrefix.set('欢杀SP', {
                    color: '#fdd559',
                    nature: 'soilmm',
                    getSpan: (prefix, name) => `${get.prefixSpan('欢杀')}${get.prefixSpan('SP')}`,
                });
                lib.namePrefix.set('欢杀神', {
                    getSpan: (prefix, name) => `${get.prefixSpan('欢杀')}${get.prefixSpan('神')}`,
                });
                lib.namePrefix.set('欢杀神SP', {
                    getSpan: (prefix, name) => `${get.prefixSpan('欢杀')}${get.prefixSpan('神')}${get.prefixSpan('SP')}`,
                });

                lib.config.all.characters.push("happykill");
                lib.config.all.sgscharacters.push('happykill');
                if (!lib.config.characters.contains("happykill")) lib.config.characters.push("happykill");
                lib.translate["happykill_character_config"] = "欢乐三国杀";
            }
        }, help: {}, config: {}, package: {
            character: {
                character: {},
                translate: {}
            },
            card: {
                card: {},
                translate: {},
                list: []
            },
            skill: {
                skill: {},
                translate: {}
            },
            intro: "官方作者：《欢乐三国杀》<br/>\
                    扩展作者：捞德一<br/>\
                    代码节选：《活动武将》萌新",
            // author: "欢乐三国杀(搬运:捞德一)",
            diskURL: "",
            forumURL: "",
            version: "1.0",
        }, files: { "character": [], "card": [], "skill": [] },
        editable: false
    }
})